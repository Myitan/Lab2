
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d38  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a28  08008ee8  08008ee8  00009ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b910  0800b910  0000d240  2**0
                  CONTENTS
  4 .ARM          00000008  0800b910  0800b910  0000c910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b918  0800b918  0000d240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b918  0800b918  0000c918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b91c  0800b91c  0000c91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  0800b920  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d240  2**0
                  CONTENTS
 10 .bss          00000594  20000240  20000240  0000d240  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007d4  200007d4  0000d240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d2b  00000000  00000000  0000d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003296  00000000  00000000  00021f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  00025238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecd  00000000  00000000  00026590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bb9  00000000  00000000  0002745d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ba8  00000000  00000000  0004e016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1189  00000000  00000000  00064bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145d47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006024  00000000  00000000  00145d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0014bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000240 	.word	0x20000240
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008ed0 	.word	0x08008ed0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000244 	.word	0x20000244
 80001ec:	08008ed0 	.word	0x08008ed0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <drawBlock>:
int current_x = 3; // Pozycja X (kolumna)
int current_y = 0; // Pozycja Y (wiersz)
uint32_t backgroundColor = LCD_COLOR_BLACK;
uint32_t blockColor = LCD_COLOR_CYAN;

void drawBlock(int x, int y, uint32_t color) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
    BSP_LCD_SetTextColor(color);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f001 fc5d 	bl	8002784 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	b298      	uxth	r0, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	2310      	movs	r3, #16
 8000edc:	2210      	movs	r2, #16
 8000ede:	f001 fcab 	bl	8002838 <BSP_LCD_FillRect>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <drawTetromino>:

void drawTetromino(int x, int y, uint8_t piece[4][4], uint32_t color) {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e01e      	b.n	8000f3c <drawTetromino+0x52>
        for (int j = 0; j < 4; j++) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	e015      	b.n	8000f30 <drawTetromino+0x46>
            if (piece[i][j] == 1) {
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d109      	bne.n	8000f2a <drawTetromino+0x40>
                drawBlock(x + j, y + i, color);
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	18d0      	adds	r0, r2, r3
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	4413      	add	r3, r2
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff ffc7 	bl	8000eb8 <drawBlock>
        for (int j = 0; j < 4; j++) {
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	dde6      	ble.n	8000f04 <drawTetromino+0x1a>
    for (int i = 0; i < 4; i++) {
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	dddd      	ble.n	8000efe <drawTetromino+0x14>
            }
        }
    }
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <gameLoop>:

void gameLoop() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    while (1) {
        // Wyświetlenie klocka w obecnej pozycji
        drawTetromino(current_x, current_y, klocekI, blockColor);
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <gameLoop+0x4c>)
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <gameLoop+0x50>)
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <gameLoop+0x54>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <gameLoop+0x58>)
 8000f5e:	f7ff ffc4 	bl	8000eea <drawTetromino>
        // Opóźnienie, aby symulować opadanie
        HAL_Delay(500);
 8000f62:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f66:	f002 f80b 	bl	8002f80 <HAL_Delay>

        // Usunięcie klocka z poprzedniej pozycji
        drawTetromino(current_x, current_y, klocekI, backgroundColor);
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <gameLoop+0x4c>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <gameLoop+0x50>)
 8000f70:	6819      	ldr	r1, [r3, #0]
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <gameLoop+0x5c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <gameLoop+0x58>)
 8000f78:	f7ff ffb7 	bl	8000eea <drawTetromino>

        // Aktualizacja pozycji (spadanie w dół)
        current_y++;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <gameLoop+0x50>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <gameLoop+0x50>)
 8000f84:	6013      	str	r3, [r2, #0]

        // Jeśli klocek osiągnie dół ekranu, zresetuj pozycję
        if (current_y + 4 >= BOARD_HEIGHT) {
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <gameLoop+0x50>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	dde0      	ble.n	8000f50 <gameLoop+0x4>
            current_y = 0;
 8000f8e:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <gameLoop+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
        drawTetromino(current_x, current_y, klocekI, blockColor);
 8000f94:	e7dc      	b.n	8000f50 <gameLoop+0x4>
 8000f96:	bf00      	nop
 8000f98:	20000010 	.word	0x20000010
 8000f9c:	20000424 	.word	0x20000424
 8000fa0:	20000018 	.word	0x20000018
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000014 	.word	0x20000014

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb0:	f001 ff74 	bl	8002e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb4:	f000 f82a 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb8:	f000 fa40 	bl	800143c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000fbc:	f000 f896 	bl	80010ec <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fc0:	f000 f9ee 	bl	80013a0 <MX_FMC_Init>
  MX_I2C3_Init();
 8000fc4:	f000 f8c4 	bl	8001150 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000fc8:	f000 f902 	bl	80011d0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000fcc:	f000 f9b2 	bl	8001334 <MX_SPI5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Init();
 8000fd0:	f001 ff64 	bl	8002e9c <HAL_Init>
  SystemClock_Config();
 8000fd4:	f000 f81a 	bl	800100c <SystemClock_Config>
  BSP_LCD_Init();
 8000fd8:	f001 fade 	bl	8002598 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 8000fdc:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f001 fb5b 	bl	800269c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f001 fbbc 	bl	8002764 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(backgroundColor);
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <main+0x58>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fbf9 	bl	80027e8 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 8000ff6:	4804      	ldr	r0, [pc, #16]	@ (8001008 <main+0x5c>)
 8000ff8:	f001 fbdc 	bl	80027b4 <BSP_LCD_SetFont>
  gameLoop();
 8000ffc:	f7ff ffa6 	bl	8000f4c <gameLoop>
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <main+0x54>
 8001004:	20000014 	.word	0x20000014
 8001008:	20000064 	.word	0x20000064

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	@ 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	2230      	movs	r2, #48	@ 0x30
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f006 f835 	bl	800708a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <SystemClock_Config+0xd8>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	4a2a      	ldr	r2, [pc, #168]	@ (80010e4 <SystemClock_Config+0xd8>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <SystemClock_Config+0xd8>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <SystemClock_Config+0xdc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a24      	ldr	r2, [pc, #144]	@ (80010e8 <SystemClock_Config+0xdc>)
 8001056:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <SystemClock_Config+0xdc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001076:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800107c:	2310      	movs	r3, #16
 800107e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001080:	23b4      	movs	r3, #180	@ 0xb4
 8001082:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001088:	2307      	movs	r3, #7
 800108a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fca7 	bl	80049e4 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800109c:	f000 fb0c 	bl	80016b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010a0:	f003 fc50 	bl	8004944 <HAL_PWREx_EnableOverDrive>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010aa:	f000 fb05 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2302      	movs	r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2105      	movs	r1, #5
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 ff01 	bl	8004ed4 <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80010d8:	f000 faee 	bl	80016b8 <Error_Handler>
  }
}
 80010dc:	bf00      	nop
 80010de:	3750      	adds	r7, #80	@ 0x50
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 80010f2:	4a16      	ldr	r2, [pc, #88]	@ (800114c <MX_DMA2D_Init+0x60>)
 80010f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80010f6:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 80010fe:	2202      	movs	r2, #2
 8001100:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 8001110:	2202      	movs	r2, #2
 8001112:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 8001116:	2200      	movs	r2, #0
 8001118:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 800111c:	2200      	movs	r2, #0
 800111e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 8001122:	f002 fa21 	bl	8003568 <HAL_DMA2D_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800112c:	f000 fac4 	bl	80016b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001130:	2101      	movs	r1, #1
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_DMA2D_Init+0x5c>)
 8001134:	f002 fb76 	bl	8003824 <HAL_DMA2D_ConfigLayer>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800113e:	f000 fabb 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000025c 	.word	0x2000025c
 800114c:	4002b000 	.word	0x4002b000

08001150 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_I2C3_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <MX_I2C3_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800116e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001172:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800117a:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800118e:	f002 ff49 	bl	8004024 <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 fa8e 	bl	80016b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_I2C3_Init+0x74>)
 80011a0:	f003 f884 	bl	80042ac <HAL_I2CEx_ConfigAnalogFilter>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80011aa:	f000 fa85 	bl	80016b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011ae:	2100      	movs	r1, #0
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_I2C3_Init+0x74>)
 80011b2:	f003 f8b7 	bl	8004324 <HAL_I2CEx_ConfigDigitalFilter>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 fa7c 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000029c 	.word	0x2000029c
 80011c8:	40005c00 	.word	0x40005c00
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09a      	sub	sp, #104	@ 0x68
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80011d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011da:	2234      	movs	r2, #52	@ 0x34
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f005 ff53 	bl	800708a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2234      	movs	r2, #52	@ 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f005 ff4d 	bl	800708a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011f0:	4b4e      	ldr	r3, [pc, #312]	@ (800132c <MX_LTDC_Init+0x15c>)
 80011f2:	4a4f      	ldr	r2, [pc, #316]	@ (8001330 <MX_LTDC_Init+0x160>)
 80011f4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011f6:	4b4d      	ldr	r3, [pc, #308]	@ (800132c <MX_LTDC_Init+0x15c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011fc:	4b4b      	ldr	r3, [pc, #300]	@ (800132c <MX_LTDC_Init+0x15c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001202:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001208:	4b48      	ldr	r3, [pc, #288]	@ (800132c <MX_LTDC_Init+0x15c>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800120e:	4b47      	ldr	r3, [pc, #284]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001210:	2207      	movs	r2, #7
 8001212:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001214:	4b45      	ldr	r3, [pc, #276]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001216:	2203      	movs	r2, #3
 8001218:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800121a:	4b44      	ldr	r3, [pc, #272]	@ (800132c <MX_LTDC_Init+0x15c>)
 800121c:	220e      	movs	r2, #14
 800121e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001220:	4b42      	ldr	r3, [pc, #264]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001222:	2205      	movs	r2, #5
 8001224:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8001226:	4b41      	ldr	r3, [pc, #260]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001228:	22fe      	movs	r2, #254	@ 0xfe
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 800122c:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <MX_LTDC_Init+0x15c>)
 800122e:	f240 1245 	movw	r2, #325	@ 0x145
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 260;
 8001234:	4b3d      	ldr	r3, [pc, #244]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001236:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 800123c:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <MX_LTDC_Init+0x15c>)
 800123e:	f240 1247 	movw	r2, #327	@ 0x147
 8001242:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001244:	4b39      	ldr	r3, [pc, #228]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800124c:	4b37      	ldr	r3, [pc, #220]	@ (800132c <MX_LTDC_Init+0x15c>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001254:	4b35      	ldr	r3, [pc, #212]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800125c:	4833      	ldr	r0, [pc, #204]	@ (800132c <MX_LTDC_Init+0x15c>)
 800125e:	f003 f8a1 	bl	80043a4 <HAL_LTDC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8001268:	f000 fa26 	bl	80016b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800127c:	2300      	movs	r3, #0
 800127e:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800128e:	2305      	movs	r3, #5
 8001290:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	481c      	ldr	r0, [pc, #112]	@ (800132c <MX_LTDC_Init+0x15c>)
 80012ba:	f003 f943 	bl	8004544 <HAL_LTDC_ConfigLayer>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80012c4:	f000 f9f8 	bl	80016b8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012ea:	2305      	movs	r3, #5
 80012ec:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	2201      	movs	r2, #1
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <MX_LTDC_Init+0x15c>)
 8001314:	f003 f916 	bl	8004544 <HAL_LTDC_ConfigLayer>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 800131e:	f000 f9cb 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	3768      	adds	r7, #104	@ 0x68
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002f0 	.word	0x200002f0
 8001330:	40016800 	.word	0x40016800

08001334 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001338:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_SPI5_Init+0x64>)
 800133a:	4a18      	ldr	r2, [pc, #96]	@ (800139c <MX_SPI5_Init+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <MX_SPI5_Init+0x64>)
 8001340:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_SPI5_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_SPI5_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_SPI5_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_SPI5_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_SPI5_Init+0x64>)
 8001360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001364:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_SPI5_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_SPI5_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_SPI5_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <MX_SPI5_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_SPI5_Init+0x64>)
 8001380:	220a      	movs	r2, #10
 8001382:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_SPI5_Init+0x64>)
 8001386:	f004 fa02 	bl	800578e <HAL_SPI_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001390:	f000 f992 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000398 	.word	0x20000398
 800139c:	40015000 	.word	0x40015000

080013a0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <MX_FMC_Init+0x94>)
 80013ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <MX_FMC_Init+0x98>)
 80013bc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <MX_FMC_Init+0x94>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <MX_FMC_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <MX_FMC_Init+0x94>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <MX_FMC_Init+0x94>)
 80013d2:	2210      	movs	r2, #16
 80013d4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <MX_FMC_Init+0x94>)
 80013d8:	2240      	movs	r2, #64	@ 0x40
 80013da:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <MX_FMC_Init+0x94>)
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_FMC_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <MX_FMC_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_FMC_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_FMC_Init+0x94>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80013fa:	2310      	movs	r3, #16
 80013fc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80013fe:	2310      	movs	r3, #16
 8001400:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001402:	2310      	movs	r3, #16
 8001404:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001406:	2310      	movs	r3, #16
 8001408:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800140a:	2310      	movs	r3, #16
 800140c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800140e:	2310      	movs	r3, #16
 8001410:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001412:	2310      	movs	r3, #16
 8001414:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	@ (8001434 <MX_FMC_Init+0x94>)
 800141c:	f004 f926 	bl	800566c <HAL_SDRAM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001426:	f000 f947 	bl	80016b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200003f0 	.word	0x200003f0
 8001438:	a0000140 	.word	0xa0000140

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	@ 0x38
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
 8001456:	4b92      	ldr	r3, [pc, #584]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a91      	ldr	r2, [pc, #580]	@ (80016a0 <MX_GPIO_Init+0x264>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b8f      	ldr	r3, [pc, #572]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	623b      	str	r3, [r7, #32]
 800146c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	4b8b      	ldr	r3, [pc, #556]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a8a      	ldr	r2, [pc, #552]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b88      	ldr	r3, [pc, #544]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	4b84      	ldr	r3, [pc, #528]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a83      	ldr	r2, [pc, #524]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b81      	ldr	r3, [pc, #516]	@ (80016a0 <MX_GPIO_Init+0x264>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	4b7d      	ldr	r3, [pc, #500]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a7c      	ldr	r2, [pc, #496]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b7a      	ldr	r3, [pc, #488]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b76      	ldr	r3, [pc, #472]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a75      	ldr	r2, [pc, #468]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b73      	ldr	r3, [pc, #460]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b6f      	ldr	r3, [pc, #444]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a6e      	ldr	r2, [pc, #440]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b6c      	ldr	r3, [pc, #432]	@ (80016a0 <MX_GPIO_Init+0x264>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b68      	ldr	r3, [pc, #416]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a67      	ldr	r2, [pc, #412]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001504:	f043 0310 	orr.w	r3, r3, #16
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b65      	ldr	r3, [pc, #404]	@ (80016a0 <MX_GPIO_Init+0x264>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b61      	ldr	r3, [pc, #388]	@ (80016a0 <MX_GPIO_Init+0x264>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a60      	ldr	r2, [pc, #384]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b5e      	ldr	r3, [pc, #376]	@ (80016a0 <MX_GPIO_Init+0x264>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2116      	movs	r1, #22
 8001536:	485b      	ldr	r0, [pc, #364]	@ (80016a4 <MX_GPIO_Init+0x268>)
 8001538:	f002 fd5a 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2180      	movs	r1, #128	@ 0x80
 8001540:	4859      	ldr	r0, [pc, #356]	@ (80016a8 <MX_GPIO_Init+0x26c>)
 8001542:	f002 fd55 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800154c:	4857      	ldr	r0, [pc, #348]	@ (80016ac <MX_GPIO_Init+0x270>)
 800154e:	f002 fd4f 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001558:	4855      	ldr	r0, [pc, #340]	@ (80016b0 <MX_GPIO_Init+0x274>)
 800155a:	f002 fd49 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800155e:	2316      	movs	r3, #22
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	484b      	ldr	r0, [pc, #300]	@ (80016a4 <MX_GPIO_Init+0x268>)
 8001576:	f002 fa83 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800157a:	f248 0307 	movw	r3, #32775	@ 0x8007
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001580:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4845      	ldr	r0, [pc, #276]	@ (80016a8 <MX_GPIO_Init+0x26c>)
 8001592:	f002 fa75 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	483e      	ldr	r0, [pc, #248]	@ (80016a8 <MX_GPIO_Init+0x26c>)
 80015ae:	f002 fa67 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80015b2:	2320      	movs	r3, #32
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015b6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4837      	ldr	r0, [pc, #220]	@ (80016a4 <MX_GPIO_Init+0x268>)
 80015c8:	f002 fa5a 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015cc:	2304      	movs	r3, #4
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	4835      	ldr	r0, [pc, #212]	@ (80016b4 <MX_GPIO_Init+0x278>)
 80015e0:	f002 fa4e 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80015e4:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80015f6:	230c      	movs	r3, #12
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	482c      	ldr	r0, [pc, #176]	@ (80016b4 <MX_GPIO_Init+0x278>)
 8001602:	f002 fa3d 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4826      	ldr	r0, [pc, #152]	@ (80016b4 <MX_GPIO_Init+0x278>)
 800161c:	f002 fa30 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001620:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	481d      	ldr	r0, [pc, #116]	@ (80016ac <MX_GPIO_Init+0x270>)
 8001636:	f002 fa23 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800163a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	@ (80016ac <MX_GPIO_Init+0x270>)
 8001654:	f002 fa14 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001658:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166a:	2307      	movs	r3, #7
 800166c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <MX_GPIO_Init+0x26c>)
 8001676:	f002 fa03 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800167a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <MX_GPIO_Init+0x274>)
 8001694:	f002 f9f4 	bl	8003a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001698:	bf00      	nop
 800169a:	3738      	adds	r7, #56	@ 0x38
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40020400 	.word	0x40020400

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <Error_Handler+0x8>

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	@ (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001702:	2007      	movs	r0, #7
 8001704:	f001 fd30 	bl	8003168 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_DMA2D_MspInit+0x3c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10d      	bne.n	8001742 <HAL_DMA2D_MspInit+0x2e>
  if(hadc->Instance==ADC1)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_DMA2D_MspInit+0x40>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <HAL_DMA2D_MspInit+0x40>)
 8001730:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <HAL_DMA2D_MspInit+0x40>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	4002b000 	.word	0x4002b000
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_I2C_MspInit>:
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();

    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]

 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a29      	ldr	r2, [pc, #164]	@ (800181c <HAL_I2C_MspInit+0xc4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d14b      	bne.n	8001812 <HAL_I2C_MspInit+0xba>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a27      	ldr	r2, [pc, #156]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a20      	ldr	r2, [pc, #128]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
/**
* @brief DMA2D MSP Initialization
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
 80017b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b6:	617b      	str	r3, [r7, #20]
*/
 80017b8:	2312      	movs	r3, #18
 80017ba:	61bb      	str	r3, [r7, #24]
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
{
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
  if(hdma2d->Instance==DMA2D)
 80017c4:	2304      	movs	r3, #4
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
  {
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4815      	ldr	r0, [pc, #84]	@ (8001824 <HAL_I2C_MspInit+0xcc>)
 80017d0:	f002 f956 	bl	8003a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN DMA2D_MspInit 0 */

 80017d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d8:	617b      	str	r3, [r7, #20]
  /* USER CODE END DMA2D_MspInit 0 */
 80017da:	2312      	movs	r3, #18
 80017dc:	61bb      	str	r3, [r7, #24]
    /* Peripheral clock enable */
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  /* USER CODE BEGIN DMA2D_MspInit 1 */
 80017e6:	2304      	movs	r3, #4
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24

 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	480d      	ldr	r0, [pc, #52]	@ (8001828 <HAL_I2C_MspInit+0xd0>)
 80017f2:	f002 f945 	bl	8003a80 <HAL_GPIO_Init>
  /* USER CODE END DMA2D_MspInit 1 */

  }
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 8001800:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_I2C_MspInit+0xc8>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
}

/**
* @brief DMA2D MSP De-Initialization
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40005c00 	.word	0x40005c00
 8001820:	40023800 	.word	0x40023800
 8001824:	40020800 	.word	0x40020800
 8001828:	40020000 	.word	0x40020000

0800182c <HAL_LTDC_MspInit>:
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800182c:	b580      	push	{r7, lr}
 800182e:	b09a      	sub	sp, #104	@ 0x68
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001848:	2230      	movs	r2, #48	@ 0x30
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f005 fc1c 	bl	800708a <memset>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a81      	ldr	r2, [pc, #516]	@ (8001a5c <HAL_LTDC_MspInit+0x230>)
 8001858:	4293      	cmp	r3, r2
 800185a:	f040 80fa 	bne.w	8001a52 <HAL_LTDC_MspInit+0x226>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800185e:	2308      	movs	r3, #8
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001862:	2331      	movs	r3, #49	@ 0x31
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34

 8001866:	2302      	movs	r3, #2
 8001868:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Peripheral clock enable */
 800186a:	2300      	movs	r3, #0
 800186c:	64bb      	str	r3, [r7, #72]	@ 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 800186e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fd3a 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_LTDC_MspInit+0x56>
  /* USER CODE BEGIN I2C3_MspInit 1 */

 800187e:	f7ff ff1b 	bl	80016b8 <Error_Handler>
  /* USER CODE END I2C3_MspInit 1 */

  }

 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
 8001886:	4b76      	ldr	r3, [pc, #472]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a75      	ldr	r2, [pc, #468]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 800188c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b73      	ldr	r3, [pc, #460]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	6a3b      	ldr	r3, [r7, #32]
}

 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	69fb      	ldr	r3, [r7, #28]
/**
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	4b68      	ldr	r3, [pc, #416]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a67      	ldr	r2, [pc, #412]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b65      	ldr	r3, [pc, #404]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
* @brief I2C MSP De-Initialization
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	4b61      	ldr	r3, [pc, #388]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a60      	ldr	r2, [pc, #384]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
* This function freeze the hardware resources used in this example
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a59      	ldr	r2, [pc, #356]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 80018fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
* @param hi2c: I2C handle pointer
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a52      	ldr	r2, [pc, #328]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
* @retval None
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a4b      	ldr	r2, [pc, #300]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <HAL_LTDC_MspInit+0x234>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800194a:	657b      	str	r3, [r7, #84]	@ 0x54

 800194c:	2302      	movs	r3, #2
 800194e:	65bb      	str	r3, [r7, #88]	@ 0x58
/**
 8001950:	2300      	movs	r3, #0
 8001952:	65fb      	str	r3, [r7, #92]	@ 0x5c
* @brief LTDC MSP Initialization
 8001954:	2300      	movs	r3, #0
 8001956:	663b      	str	r3, [r7, #96]	@ 0x60
* This function configures the hardware resources used in this example
 8001958:	230e      	movs	r3, #14
 800195a:	667b      	str	r3, [r7, #100]	@ 0x64
* @param hltdc: LTDC handle pointer
 800195c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001960:	4619      	mov	r1, r3
 8001962:	4840      	ldr	r0, [pc, #256]	@ (8001a64 <HAL_LTDC_MspInit+0x238>)
 8001964:	f002 f88c 	bl	8003a80 <HAL_GPIO_Init>
* @retval None
*/
 8001968:	f641 0358 	movw	r3, #6232	@ 0x1858
 800196c:	657b      	str	r3, [r7, #84]	@ 0x54
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800196e:	2302      	movs	r3, #2
 8001970:	65bb      	str	r3, [r7, #88]	@ 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	2300      	movs	r3, #0
 8001974:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001976:	2300      	movs	r3, #0
 8001978:	663b      	str	r3, [r7, #96]	@ 0x60
  if(hltdc->Instance==LTDC)
 800197a:	230e      	movs	r3, #14
 800197c:	667b      	str	r3, [r7, #100]	@ 0x64
  {
 800197e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001982:	4619      	mov	r1, r3
 8001984:	4838      	ldr	r0, [pc, #224]	@ (8001a68 <HAL_LTDC_MspInit+0x23c>)
 8001986:	f002 f87b 	bl	8003a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 0 */

 800198a:	2303      	movs	r3, #3
 800198c:	657b      	str	r3, [r7, #84]	@ 0x54
  /* USER CODE END LTDC_MspInit 0 */
 800198e:	2302      	movs	r3, #2
 8001990:	65bb      	str	r3, [r7, #88]	@ 0x58

 8001992:	2300      	movs	r3, #0
 8001994:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /** Initializes the peripherals clock
 8001996:	2300      	movs	r3, #0
 8001998:	663b      	str	r3, [r7, #96]	@ 0x60
  */
 800199a:	2309      	movs	r3, #9
 800199c:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800199e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019a2:	4619      	mov	r1, r3
 80019a4:	4831      	ldr	r0, [pc, #196]	@ (8001a6c <HAL_LTDC_MspInit+0x240>)
 80019a6:	f002 f86b 	bl	8003a80 <HAL_GPIO_Init>
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80019aa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80019ae:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b4:	2300      	movs	r3, #0
 80019b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    {
 80019b8:	2300      	movs	r3, #0
 80019ba:	663b      	str	r3, [r7, #96]	@ 0x60
      Error_Handler();
 80019bc:	230e      	movs	r3, #14
 80019be:	667b      	str	r3, [r7, #100]	@ 0x64
    }
 80019c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019c4:	4619      	mov	r1, r3
 80019c6:	4829      	ldr	r0, [pc, #164]	@ (8001a6c <HAL_LTDC_MspInit+0x240>)
 80019c8:	f002 f85a 	bl	8003a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
 80019cc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80019d0:	657b      	str	r3, [r7, #84]	@ 0x54
    __HAL_RCC_LTDC_CLK_ENABLE();
 80019d2:	2302      	movs	r3, #2
 80019d4:	65bb      	str	r3, [r7, #88]	@ 0x58

 80019d6:	2300      	movs	r3, #0
 80019d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	663b      	str	r3, [r7, #96]	@ 0x60
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	230e      	movs	r3, #14
 80019e0:	667b      	str	r3, [r7, #100]	@ 0x64
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019e6:	4619      	mov	r1, r3
 80019e8:	4821      	ldr	r0, [pc, #132]	@ (8001a70 <HAL_LTDC_MspInit+0x244>)
 80019ea:	f002 f849 	bl	8003a80 <HAL_GPIO_Init>
    __HAL_RCC_GPIOG_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80019f2:	657b      	str	r3, [r7, #84]	@ 0x54
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	2302      	movs	r3, #2
 80019f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    /**LTDC GPIO Configuration
 80019f8:	2300      	movs	r3, #0
 80019fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PF10     ------> LTDC_DE
 80019fc:	2300      	movs	r3, #0
 80019fe:	663b      	str	r3, [r7, #96]	@ 0x60
    PA3     ------> LTDC_B5
 8001a00:	230e      	movs	r3, #14
 8001a02:	667b      	str	r3, [r7, #100]	@ 0x64
    PA4     ------> LTDC_VSYNC
 8001a04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481a      	ldr	r0, [pc, #104]	@ (8001a74 <HAL_LTDC_MspInit+0x248>)
 8001a0c:	f002 f838 	bl	8003a80 <HAL_GPIO_Init>
    PA6     ------> LTDC_G2
    PB0     ------> LTDC_R3
 8001a10:	2348      	movs	r3, #72	@ 0x48
 8001a12:	657b      	str	r3, [r7, #84]	@ 0x54
    PB1     ------> LTDC_R6
 8001a14:	2302      	movs	r3, #2
 8001a16:	65bb      	str	r3, [r7, #88]	@ 0x58
    PB10     ------> LTDC_G4
 8001a18:	2300      	movs	r3, #0
 8001a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PB11     ------> LTDC_G5
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	663b      	str	r3, [r7, #96]	@ 0x60
    PG6     ------> LTDC_R7
 8001a20:	230e      	movs	r3, #14
 8001a22:	667b      	str	r3, [r7, #100]	@ 0x64
    PG7     ------> LTDC_CLK
 8001a24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4813      	ldr	r0, [pc, #76]	@ (8001a78 <HAL_LTDC_MspInit+0x24c>)
 8001a2c:	f002 f828 	bl	8003a80 <HAL_GPIO_Init>
    PC6     ------> LTDC_HSYNC
    PC7     ------> LTDC_G6
 8001a30:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a34:	657b      	str	r3, [r7, #84]	@ 0x54
    PA11     ------> LTDC_R4
 8001a36:	2302      	movs	r3, #2
 8001a38:	65bb      	str	r3, [r7, #88]	@ 0x58
    PA12     ------> LTDC_R5
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PC10     ------> LTDC_R2
 8001a3e:	2300      	movs	r3, #0
 8001a40:	663b      	str	r3, [r7, #96]	@ 0x60
    PD3     ------> LTDC_G7
 8001a42:	2309      	movs	r3, #9
 8001a44:	667b      	str	r3, [r7, #100]	@ 0x64
    PD6     ------> LTDC_B2
 8001a46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4808      	ldr	r0, [pc, #32]	@ (8001a70 <HAL_LTDC_MspInit+0x244>)
 8001a4e:	f002 f817 	bl	8003a80 <HAL_GPIO_Init>
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	bf00      	nop
 8001a54:	3768      	adds	r7, #104	@ 0x68
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40016800 	.word	0x40016800
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40021400 	.word	0x40021400
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40021800 	.word	0x40021800
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00

08001a7c <HAL_SPI_MspInit>:
* This function freeze the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a19      	ldr	r2, [pc, #100]	@ (8001b00 <HAL_SPI_MspInit+0x84>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d12c      	bne.n	8001af8 <HAL_SPI_MspInit+0x7c>
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();

 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <HAL_SPI_MspInit+0x88>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <HAL_SPI_MspInit+0x88>)
 8001aa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_SPI_MspInit+0x88>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    /**LTDC GPIO Configuration
    PF10     ------> LTDC_DE
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_SPI_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a10      	ldr	r2, [pc, #64]	@ (8001b04 <HAL_SPI_MspInit+0x88>)
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_SPI_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> LTDC_B5
    PA4     ------> LTDC_VSYNC
    PA6     ------> LTDC_G2
    PB0     ------> LTDC_R3
    PB1     ------> LTDC_R6
    PB10     ------> LTDC_G4
 8001ad6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001ada:	617b      	str	r3, [r7, #20]
    PB11     ------> LTDC_G5
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
    PG6     ------> LTDC_R7
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    PG7     ------> LTDC_CLK
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
    PC6     ------> LTDC_HSYNC
 8001ae8:	2305      	movs	r3, #5
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
    PC7     ------> LTDC_G6
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <HAL_SPI_MspInit+0x8c>)
 8001af4:	f001 ffc4 	bl	8003a80 <HAL_GPIO_Init>
    PC10     ------> LTDC_R2
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PG10     ------> LTDC_G3
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	@ 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40015000 	.word	0x40015000
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40021400 	.word	0x40021400

08001b0c <HAL_SPI_MspDeInit>:
    HAL_GPIO_DeInit(ENABLE_GPIO_Port, ENABLE_Pin);

    HAL_GPIO_DeInit(GPIOA, B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
                          |R5_Pin);

    HAL_GPIO_DeInit(GPIOB, R3_Pin|R6_Pin|G4_Pin|G5_Pin
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
                          |B6_Pin|B7_Pin);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <HAL_SPI_MspDeInit+0x30>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10a      	bne.n	8001b34 <HAL_SPI_MspDeInit+0x28>

    HAL_GPIO_DeInit(GPIOG, R7_Pin|DOTCLK_Pin|G3_Pin|B3_Pin
                          |B4_Pin);

    HAL_GPIO_DeInit(GPIOC, HSYNC_Pin|G6_Pin|R2_Pin);

 8001b1e:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_SPI_MspDeInit+0x34>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_SPI_MspDeInit+0x34>)
 8001b24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }

 8001b2a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_SPI_MspDeInit+0x38>)
 8001b30:	f002 f952 	bl	8003dd8 <HAL_GPIO_DeInit>

/**
* @brief SPI MSP Initialization
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40015000 	.word	0x40015000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40021400 	.word	0x40021400

08001b48 <HAL_FMC_MspInit>:
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
  if(hspi->Instance==SPI5)
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  /* USER CODE END SPI5_MspInit 0 */
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <HAL_FMC_MspInit+0x104>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d16f      	bne.n	8001c44 <HAL_FMC_MspInit+0xfc>
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();

 8001b64:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <HAL_FMC_MspInit+0x104>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b38      	ldr	r3, [pc, #224]	@ (8001c50 <HAL_FMC_MspInit+0x108>)
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	4a37      	ldr	r2, [pc, #220]	@ (8001c50 <HAL_FMC_MspInit+0x108>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b7a:	4b35      	ldr	r3, [pc, #212]	@ (8001c50 <HAL_FMC_MspInit+0x108>)
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

 8001b86:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001b8a:	607b      	str	r3, [r7, #4]
  /* USER CODE END SPI5_MspDeInit 1 */
  }

 8001b8c:	2302      	movs	r3, #2
 8001b8e:	60bb      	str	r3, [r7, #8]
}
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]

 8001b94:	2303      	movs	r3, #3
 8001b96:	613b      	str	r3, [r7, #16]
/**
 8001b98:	230c      	movs	r3, #12
 8001b9a:	617b      	str	r3, [r7, #20]
* @brief TIM_Base MSP Initialization
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	482c      	ldr	r0, [pc, #176]	@ (8001c54 <HAL_FMC_MspInit+0x10c>)
 8001ba2:	f001 ff6d 	bl	8003a80 <HAL_GPIO_Init>
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
* @retval None
 8001baa:	2302      	movs	r3, #2
 8001bac:	60bb      	str	r3, [r7, #8]
*/
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	613b      	str	r3, [r7, #16]
{
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	617b      	str	r3, [r7, #20]
  if(htim_base->Instance==TIM3)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4826      	ldr	r0, [pc, #152]	@ (8001c58 <HAL_FMC_MspInit+0x110>)
 8001bc0:	f001 ff5e 	bl	8003a80 <HAL_GPIO_Init>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */
 8001bc4:	f248 1337 	movw	r3, #33079	@ 0x8137
 8001bc8:	607b      	str	r3, [r7, #4]

  /* USER CODE END TIM3_MspInit 0 */
 8001bca:	2302      	movs	r3, #2
 8001bcc:	60bb      	str	r3, [r7, #8]
    /* Peripheral clock enable */
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	613b      	str	r3, [r7, #16]
    /* TIM3 interrupt Init */
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	617b      	str	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481f      	ldr	r0, [pc, #124]	@ (8001c5c <HAL_FMC_MspInit+0x114>)
 8001be0:	f001 ff4e 	bl	8003a80 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */
 8001be4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001be8:	607b      	str	r3, [r7, #4]

  /* USER CODE END TIM3_MspInit 1 */

 8001bea:	2302      	movs	r3, #2
 8001bec:	60bb      	str	r3, [r7, #8]
  }
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]

 8001bf2:	2303      	movs	r3, #3
 8001bf4:	613b      	str	r3, [r7, #16]
}
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	617b      	str	r3, [r7, #20]

 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4818      	ldr	r0, [pc, #96]	@ (8001c60 <HAL_FMC_MspInit+0x118>)
 8001c00:	f001 ff3e 	bl	8003a80 <HAL_GPIO_Init>
/**
* @brief TIM_Base MSP De-Initialization
 8001c04:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001c08:	607b      	str	r3, [r7, #4]
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	60bb      	str	r3, [r7, #8]
* @retval None
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
*/
 8001c12:	2303      	movs	r3, #3
 8001c14:	613b      	str	r3, [r7, #16]
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
 8001c16:	230c      	movs	r3, #12
 8001c18:	617b      	str	r3, [r7, #20]
{
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4811      	ldr	r0, [pc, #68]	@ (8001c64 <HAL_FMC_MspInit+0x11c>)
 8001c20:	f001 ff2e 	bl	8003a80 <HAL_GPIO_Init>
  if(htim_base->Instance==TIM3)
  {
 8001c24:	2360      	movs	r3, #96	@ 0x60
 8001c26:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIM3_MspDeInit 0 */
 8001c28:	2302      	movs	r3, #2
 8001c2a:	60bb      	str	r3, [r7, #8]

 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  /* USER CODE END TIM3_MspDeInit 0 */
 8001c30:	2303      	movs	r3, #3
 8001c32:	613b      	str	r3, [r7, #16]
    /* Peripheral clock disable */
 8001c34:	230c      	movs	r3, #12
 8001c36:	617b      	str	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_DISABLE();
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <HAL_FMC_MspInit+0x120>)
 8001c3e:	f001 ff1f 	bl	8003a80 <HAL_GPIO_Init>
 8001c42:	e000      	b.n	8001c46 <HAL_FMC_MspInit+0xfe>
    /* Peripheral clock enable */
 8001c44:	bf00      	nop

    /* TIM3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000428 	.word	0x20000428
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40021400 	.word	0x40021400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_SDRAM_MspInit>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

}

static uint32_t FMC_Initialized = 0;
 8001c74:	f7ff ff68 	bl	8001b48 <HAL_FMC_MspInit>

static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd6:	f001 f933 	bl	8002f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  return 1;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_kill>:

int _kill(int pid, int sig)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf8:	f005 fa1a 	bl	8007130 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2216      	movs	r2, #22
 8001d00:	601a      	str	r2, [r3, #0]
  return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_exit>:

void _exit (int status)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d16:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffe7 	bl	8001cee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <_exit+0x12>

08001d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e00a      	b.n	8001d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d36:	f3af 8000 	nop.w
 8001d3a:	4601      	mov	r1, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbf0      	blt.n	8001d36 <_read+0x12>
  }

  return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e009      	b.n	8001d84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	60ba      	str	r2, [r7, #8]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf1      	blt.n	8001d70 <_write+0x12>
  }
  return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_close>:

int _close(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_isatty>:

int _isatty(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f005 f97e 	bl	8007130 <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	@ (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20030000 	.word	0x20030000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	2000042c 	.word	0x2000042c
 8001e68:	200007d8 	.word	0x200007d8

08001e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <SystemInit+0x20>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <SystemInit+0x20>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e94:	f7ff ffea 	bl	8001e6c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f005 f93d 	bl	800713c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec2:	f7ff f873 	bl	8000fac <main>
  bx  lr    
 8001ec6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ec8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001ed4:	0800b920 	.word	0x0800b920
  ldr r2, =_sbss
 8001ed8:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001edc:	200007d4 	.word	0x200007d4

08001ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>

08001ee2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001ee6:	f000 fa5d 	bl	80023a4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001eea:	20ca      	movs	r0, #202	@ 0xca
 8001eec:	f000 f95d 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001ef0:	20c3      	movs	r0, #195	@ 0xc3
 8001ef2:	f000 f967 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001ef6:	2008      	movs	r0, #8
 8001ef8:	f000 f964 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001efc:	2050      	movs	r0, #80	@ 0x50
 8001efe:	f000 f961 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001f02:	20cf      	movs	r0, #207	@ 0xcf
 8001f04:	f000 f951 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f000 f95b 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001f0e:	20c1      	movs	r0, #193	@ 0xc1
 8001f10:	f000 f958 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001f14:	2030      	movs	r0, #48	@ 0x30
 8001f16:	f000 f955 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001f1a:	20ed      	movs	r0, #237	@ 0xed
 8001f1c:	f000 f945 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001f20:	2064      	movs	r0, #100	@ 0x64
 8001f22:	f000 f94f 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f94c 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001f2c:	2012      	movs	r0, #18
 8001f2e:	f000 f949 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001f32:	2081      	movs	r0, #129	@ 0x81
 8001f34:	f000 f946 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001f38:	20e8      	movs	r0, #232	@ 0xe8
 8001f3a:	f000 f936 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001f3e:	2085      	movs	r0, #133	@ 0x85
 8001f40:	f000 f940 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 f93d 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f4a:	2078      	movs	r0, #120	@ 0x78
 8001f4c:	f000 f93a 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001f50:	20cb      	movs	r0, #203	@ 0xcb
 8001f52:	f000 f92a 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001f56:	2039      	movs	r0, #57	@ 0x39
 8001f58:	f000 f934 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001f5c:	202c      	movs	r0, #44	@ 0x2c
 8001f5e:	f000 f931 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f92e 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001f68:	2034      	movs	r0, #52	@ 0x34
 8001f6a:	f000 f92b 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f000 f928 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001f74:	20f7      	movs	r0, #247	@ 0xf7
 8001f76:	f000 f918 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001f7a:	2020      	movs	r0, #32
 8001f7c:	f000 f922 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001f80:	20ea      	movs	r0, #234	@ 0xea
 8001f82:	f000 f912 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f000 f91c 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f000 f919 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001f92:	20b1      	movs	r0, #177	@ 0xb1
 8001f94:	f000 f909 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 f913 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f9e:	201b      	movs	r0, #27
 8001fa0:	f000 f910 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001fa4:	20b6      	movs	r0, #182	@ 0xb6
 8001fa6:	f000 f900 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001faa:	200a      	movs	r0, #10
 8001fac:	f000 f90a 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001fb0:	20a2      	movs	r0, #162	@ 0xa2
 8001fb2:	f000 f907 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001fb6:	20c0      	movs	r0, #192	@ 0xc0
 8001fb8:	f000 f8f7 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001fbc:	2010      	movs	r0, #16
 8001fbe:	f000 f901 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001fc2:	20c1      	movs	r0, #193	@ 0xc1
 8001fc4:	f000 f8f1 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001fc8:	2010      	movs	r0, #16
 8001fca:	f000 f8fb 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001fce:	20c5      	movs	r0, #197	@ 0xc5
 8001fd0:	f000 f8eb 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001fd4:	2045      	movs	r0, #69	@ 0x45
 8001fd6:	f000 f8f5 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001fda:	2015      	movs	r0, #21
 8001fdc:	f000 f8f2 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001fe0:	20c7      	movs	r0, #199	@ 0xc7
 8001fe2:	f000 f8e2 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001fe6:	2090      	movs	r0, #144	@ 0x90
 8001fe8:	f000 f8ec 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001fec:	2036      	movs	r0, #54	@ 0x36
 8001fee:	f000 f8dc 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001ff2:	20c8      	movs	r0, #200	@ 0xc8
 8001ff4:	f000 f8e6 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001ff8:	20f2      	movs	r0, #242	@ 0xf2
 8001ffa:	f000 f8d6 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f8e0 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002004:	20b0      	movs	r0, #176	@ 0xb0
 8002006:	f000 f8d0 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800200a:	20c2      	movs	r0, #194	@ 0xc2
 800200c:	f000 f8da 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002010:	20b6      	movs	r0, #182	@ 0xb6
 8002012:	f000 f8ca 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002016:	200a      	movs	r0, #10
 8002018:	f000 f8d4 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800201c:	20a7      	movs	r0, #167	@ 0xa7
 800201e:	f000 f8d1 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002022:	2027      	movs	r0, #39	@ 0x27
 8002024:	f000 f8ce 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002028:	2004      	movs	r0, #4
 800202a:	f000 f8cb 	bl	80021c4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800202e:	202a      	movs	r0, #42	@ 0x2a
 8002030:	f000 f8bb 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002034:	2000      	movs	r0, #0
 8002036:	f000 f8c5 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800203a:	2000      	movs	r0, #0
 800203c:	f000 f8c2 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f000 f8bf 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002046:	20ef      	movs	r0, #239	@ 0xef
 8002048:	f000 f8bc 	bl	80021c4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800204c:	202b      	movs	r0, #43	@ 0x2b
 800204e:	f000 f8ac 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f8b6 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f8b3 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800205e:	2001      	movs	r0, #1
 8002060:	f000 f8b0 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002064:	203f      	movs	r0, #63	@ 0x3f
 8002066:	f000 f8ad 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800206a:	20f6      	movs	r0, #246	@ 0xf6
 800206c:	f000 f89d 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002070:	2001      	movs	r0, #1
 8002072:	f000 f8a7 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002076:	2000      	movs	r0, #0
 8002078:	f000 f8a4 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800207c:	2006      	movs	r0, #6
 800207e:	f000 f8a1 	bl	80021c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002082:	202c      	movs	r0, #44	@ 0x2c
 8002084:	f000 f891 	bl	80021aa <ili9341_WriteReg>
  LCD_Delay(200);
 8002088:	20c8      	movs	r0, #200	@ 0xc8
 800208a:	f000 fa79 	bl	8002580 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800208e:	2026      	movs	r0, #38	@ 0x26
 8002090:	f000 f88b 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002094:	2001      	movs	r0, #1
 8002096:	f000 f895 	bl	80021c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800209a:	20e0      	movs	r0, #224	@ 0xe0
 800209c:	f000 f885 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80020a0:	200f      	movs	r0, #15
 80020a2:	f000 f88f 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80020a6:	2029      	movs	r0, #41	@ 0x29
 80020a8:	f000 f88c 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80020ac:	2024      	movs	r0, #36	@ 0x24
 80020ae:	f000 f889 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80020b2:	200c      	movs	r0, #12
 80020b4:	f000 f886 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80020b8:	200e      	movs	r0, #14
 80020ba:	f000 f883 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020be:	2009      	movs	r0, #9
 80020c0:	f000 f880 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80020c4:	204e      	movs	r0, #78	@ 0x4e
 80020c6:	f000 f87d 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80020ca:	2078      	movs	r0, #120	@ 0x78
 80020cc:	f000 f87a 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80020d0:	203c      	movs	r0, #60	@ 0x3c
 80020d2:	f000 f877 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020d6:	2009      	movs	r0, #9
 80020d8:	f000 f874 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80020dc:	2013      	movs	r0, #19
 80020de:	f000 f871 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80020e2:	2005      	movs	r0, #5
 80020e4:	f000 f86e 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80020e8:	2017      	movs	r0, #23
 80020ea:	f000 f86b 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80020ee:	2011      	movs	r0, #17
 80020f0:	f000 f868 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020f4:	2000      	movs	r0, #0
 80020f6:	f000 f865 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80020fa:	20e1      	movs	r0, #225	@ 0xe1
 80020fc:	f000 f855 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002100:	2000      	movs	r0, #0
 8002102:	f000 f85f 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002106:	2016      	movs	r0, #22
 8002108:	f000 f85c 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800210c:	201b      	movs	r0, #27
 800210e:	f000 f859 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002112:	2004      	movs	r0, #4
 8002114:	f000 f856 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002118:	2011      	movs	r0, #17
 800211a:	f000 f853 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800211e:	2007      	movs	r0, #7
 8002120:	f000 f850 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002124:	2031      	movs	r0, #49	@ 0x31
 8002126:	f000 f84d 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800212a:	2033      	movs	r0, #51	@ 0x33
 800212c:	f000 f84a 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002130:	2042      	movs	r0, #66	@ 0x42
 8002132:	f000 f847 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002136:	2005      	movs	r0, #5
 8002138:	f000 f844 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800213c:	200c      	movs	r0, #12
 800213e:	f000 f841 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002142:	200a      	movs	r0, #10
 8002144:	f000 f83e 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002148:	2028      	movs	r0, #40	@ 0x28
 800214a:	f000 f83b 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800214e:	202f      	movs	r0, #47	@ 0x2f
 8002150:	f000 f838 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002154:	200f      	movs	r0, #15
 8002156:	f000 f835 	bl	80021c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800215a:	2011      	movs	r0, #17
 800215c:	f000 f825 	bl	80021aa <ili9341_WriteReg>
  LCD_Delay(200);
 8002160:	20c8      	movs	r0, #200	@ 0xc8
 8002162:	f000 fa0d 	bl	8002580 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002166:	2029      	movs	r0, #41	@ 0x29
 8002168:	f000 f81f 	bl	80021aa <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800216c:	202c      	movs	r0, #44	@ 0x2c
 800216e:	f000 f81c 	bl	80021aa <ili9341_WriteReg>
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}

08002176 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800217a:	f000 f913 	bl	80023a4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800217e:	2103      	movs	r1, #3
 8002180:	20d3      	movs	r0, #211	@ 0xd3
 8002182:	f000 f82c 	bl	80021de <ili9341_ReadData>
 8002186:	4603      	mov	r3, r0
 8002188:	b29b      	uxth	r3, r3
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}

0800218e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002192:	2029      	movs	r0, #41	@ 0x29
 8002194:	f000 f809 	bl	80021aa <ili9341_WriteReg>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80021a0:	2028      	movs	r0, #40	@ 0x28
 80021a2:	f000 f802 	bl	80021aa <ili9341_WriteReg>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}

080021aa <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f98e 	bl	80024d8 <LCD_IO_WriteReg>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 f95f 	bl	8002494 <LCD_IO_WriteData>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	460a      	mov	r2, r1
 80021e8:	80fb      	strh	r3, [r7, #6]
 80021ea:	4613      	mov	r3, r2
 80021ec:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80021ee:	797a      	ldrb	r2, [r7, #5]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f991 	bl	800251c <LCD_IO_ReadData>
 80021fa:	4603      	mov	r3, r0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002208:	23f0      	movs	r3, #240	@ 0xf0
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002218:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800222c:	4819      	ldr	r0, [pc, #100]	@ (8002294 <SPIx_Init+0x6c>)
 800222e:	f003 ff65 	bl	80060fc <HAL_SPI_GetState>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12b      	bne.n	8002290 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002238:	4b16      	ldr	r3, [pc, #88]	@ (8002294 <SPIx_Init+0x6c>)
 800223a:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <SPIx_Init+0x70>)
 800223c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <SPIx_Init+0x6c>)
 8002240:	2218      	movs	r2, #24
 8002242:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <SPIx_Init+0x6c>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800224a:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <SPIx_Init+0x6c>)
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002250:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <SPIx_Init+0x6c>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <SPIx_Init+0x6c>)
 8002258:	2200      	movs	r2, #0
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800225c:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <SPIx_Init+0x6c>)
 800225e:	2207      	movs	r2, #7
 8002260:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002262:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <SPIx_Init+0x6c>)
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002268:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <SPIx_Init+0x6c>)
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800226e:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <SPIx_Init+0x6c>)
 8002270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002274:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <SPIx_Init+0x6c>)
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <SPIx_Init+0x6c>)
 800227e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002282:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <SPIx_Init+0x6c>)
 8002286:	f000 f853 	bl	8002330 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800228a:	4802      	ldr	r0, [pc, #8]	@ (8002294 <SPIx_Init+0x6c>)
 800228c:	f003 fa7f 	bl	800578e <HAL_SPI_Init>
  } 
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000430 	.word	0x20000430
 8002298:	40015000 	.word	0x40015000

0800229c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <SPIx_Read+0x38>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f107 0108 	add.w	r1, r7, #8
 80022b6:	4808      	ldr	r0, [pc, #32]	@ (80022d8 <SPIx_Read+0x3c>)
 80022b8:	f003 fc5e 	bl	8005b78 <HAL_SPI_Receive>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80022c6:	f000 f827 	bl	8002318 <SPIx_Error>
  }
  
  return readvalue;
 80022ca:	68bb      	ldr	r3, [r7, #8]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000058 	.word	0x20000058
 80022d8:	20000430 	.word	0x20000430

080022dc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80022ea:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <SPIx_Write+0x34>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1db9      	adds	r1, r7, #6
 80022f0:	2201      	movs	r2, #1
 80022f2:	4808      	ldr	r0, [pc, #32]	@ (8002314 <SPIx_Write+0x38>)
 80022f4:	f003 fafc 	bl	80058f0 <HAL_SPI_Transmit>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002302:	f000 f809 	bl	8002318 <SPIx_Error>
  }
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000058 	.word	0x20000058
 8002314:	20000430 	.word	0x20000430

08002318 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800231c:	4803      	ldr	r0, [pc, #12]	@ (800232c <SPIx_Error+0x14>)
 800231e:	f003 fabf 	bl	80058a0 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002322:	f7ff ff81 	bl	8002228 <SPIx_Init>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000430 	.word	0x20000430

08002330 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	@ 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	4b17      	ldr	r3, [pc, #92]	@ (800239c <SPIx_MspInit+0x6c>)
 800233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002340:	4a16      	ldr	r2, [pc, #88]	@ (800239c <SPIx_MspInit+0x6c>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002346:	6453      	str	r3, [r2, #68]	@ 0x44
 8002348:	4b14      	ldr	r3, [pc, #80]	@ (800239c <SPIx_MspInit+0x6c>)
 800234a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <SPIx_MspInit+0x6c>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	4a0f      	ldr	r2, [pc, #60]	@ (800239c <SPIx_MspInit+0x6c>)
 800235e:	f043 0320 	orr.w	r3, r3, #32
 8002362:	6313      	str	r3, [r2, #48]	@ 0x30
 8002364:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <SPIx_MspInit+0x6c>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002370:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002374:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800237a:	2302      	movs	r3, #2
 800237c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800237e:	2301      	movs	r3, #1
 8002380:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002382:	2305      	movs	r3, #5
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	4804      	ldr	r0, [pc, #16]	@ (80023a0 <SPIx_MspInit+0x70>)
 800238e:	f001 fb77 	bl	8003a80 <HAL_GPIO_Init>
}
 8002392:	bf00      	nop
 8002394:	3728      	adds	r7, #40	@ 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40021400 	.word	0x40021400

080023a4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80023aa:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <LCD_IO_Init+0xe0>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d164      	bne.n	800247c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80023b2:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <LCD_IO_Init+0xe0>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	4b32      	ldr	r3, [pc, #200]	@ (8002488 <LCD_IO_Init+0xe4>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	4a31      	ldr	r2, [pc, #196]	@ (8002488 <LCD_IO_Init+0xe4>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002488 <LCD_IO_Init+0xe4>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80023d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023da:	2301      	movs	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	4827      	ldr	r0, [pc, #156]	@ (800248c <LCD_IO_Init+0xe8>)
 80023ee:	f001 fb47 	bl	8003a80 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b24      	ldr	r3, [pc, #144]	@ (8002488 <LCD_IO_Init+0xe4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a23      	ldr	r2, [pc, #140]	@ (8002488 <LCD_IO_Init+0xe4>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b21      	ldr	r3, [pc, #132]	@ (8002488 <LCD_IO_Init+0xe4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800240e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4619      	mov	r1, r3
 8002426:	4819      	ldr	r0, [pc, #100]	@ (800248c <LCD_IO_Init+0xe8>)
 8002428:	f001 fb2a 	bl	8003a80 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <LCD_IO_Init+0xe4>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <LCD_IO_Init+0xe4>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6313      	str	r3, [r2, #48]	@ 0x30
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <LCD_IO_Init+0xe4>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002448:	2304      	movs	r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800244c:	2301      	movs	r3, #1
 800244e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	4619      	mov	r1, r3
 800245e:	480c      	ldr	r0, [pc, #48]	@ (8002490 <LCD_IO_Init+0xec>)
 8002460:	f001 fb0e 	bl	8003a80 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002464:	2200      	movs	r2, #0
 8002466:	2104      	movs	r1, #4
 8002468:	4809      	ldr	r0, [pc, #36]	@ (8002490 <LCD_IO_Init+0xec>)
 800246a:	f001 fdc1 	bl	8003ff0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800246e:	2201      	movs	r2, #1
 8002470:	2104      	movs	r1, #4
 8002472:	4807      	ldr	r0, [pc, #28]	@ (8002490 <LCD_IO_Init+0xec>)
 8002474:	f001 fdbc 	bl	8003ff0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002478:	f7ff fed6 	bl	8002228 <SPIx_Init>
  }
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000488 	.word	0x20000488
 8002488:	40023800 	.word	0x40023800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40020800 	.word	0x40020800

08002494 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800249e:	2201      	movs	r2, #1
 80024a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024a4:	480a      	ldr	r0, [pc, #40]	@ (80024d0 <LCD_IO_WriteData+0x3c>)
 80024a6:	f001 fda3 	bl	8003ff0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80024aa:	2200      	movs	r2, #0
 80024ac:	2104      	movs	r1, #4
 80024ae:	4809      	ldr	r0, [pc, #36]	@ (80024d4 <LCD_IO_WriteData+0x40>)
 80024b0:	f001 fd9e 	bl	8003ff0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff10 	bl	80022dc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80024bc:	2201      	movs	r2, #1
 80024be:	2104      	movs	r1, #4
 80024c0:	4804      	ldr	r0, [pc, #16]	@ (80024d4 <LCD_IO_WriteData+0x40>)
 80024c2:	f001 fd95 	bl	8003ff0 <HAL_GPIO_WritePin>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40020800 	.word	0x40020800

080024d8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80024e2:	2200      	movs	r2, #0
 80024e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024e8:	480a      	ldr	r0, [pc, #40]	@ (8002514 <LCD_IO_WriteReg+0x3c>)
 80024ea:	f001 fd81 	bl	8003ff0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80024ee:	2200      	movs	r2, #0
 80024f0:	2104      	movs	r1, #4
 80024f2:	4809      	ldr	r0, [pc, #36]	@ (8002518 <LCD_IO_WriteReg+0x40>)
 80024f4:	f001 fd7c 	bl	8003ff0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff feed 	bl	80022dc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002502:	2201      	movs	r2, #1
 8002504:	2104      	movs	r1, #4
 8002506:	4804      	ldr	r0, [pc, #16]	@ (8002518 <LCD_IO_WriteReg+0x40>)
 8002508:	f001 fd72 	bl	8003ff0 <HAL_GPIO_WritePin>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40020800 	.word	0x40020800

0800251c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	460a      	mov	r2, r1
 8002526:	80fb      	strh	r3, [r7, #6]
 8002528:	4613      	mov	r3, r2
 800252a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002530:	2200      	movs	r2, #0
 8002532:	2104      	movs	r1, #4
 8002534:	4810      	ldr	r0, [pc, #64]	@ (8002578 <LCD_IO_ReadData+0x5c>)
 8002536:	f001 fd5b 	bl	8003ff0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002540:	480e      	ldr	r0, [pc, #56]	@ (800257c <LCD_IO_ReadData+0x60>)
 8002542:	f001 fd55 	bl	8003ff0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fec7 	bl	80022dc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800254e:	797b      	ldrb	r3, [r7, #5]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fea3 	bl	800229c <SPIx_Read>
 8002556:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002558:	2201      	movs	r2, #1
 800255a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800255e:	4807      	ldr	r0, [pc, #28]	@ (800257c <LCD_IO_ReadData+0x60>)
 8002560:	f001 fd46 	bl	8003ff0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002564:	2201      	movs	r2, #1
 8002566:	2104      	movs	r1, #4
 8002568:	4803      	ldr	r0, [pc, #12]	@ (8002578 <LCD_IO_ReadData+0x5c>)
 800256a:	f001 fd41 	bl	8003ff0 <HAL_GPIO_WritePin>
  
  return readvalue;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00

08002580 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fcf9 	bl	8002f80 <HAL_Delay>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800259c:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <BSP_LCD_Init+0xbc>)
 800259e:	4a2e      	ldr	r2, [pc, #184]	@ (8002658 <BSP_LCD_Init+0xc0>)
 80025a0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80025a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025a4:	2209      	movs	r2, #9
 80025a6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80025ae:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025b0:	221d      	movs	r2, #29
 80025b2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80025b4:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025b6:	2203      	movs	r2, #3
 80025b8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80025ba:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025bc:	f240 120d 	movw	r2, #269	@ 0x10d
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025c4:	f240 1243 	movw	r2, #323	@ 0x143
 80025c8:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025cc:	f240 1217 	movw	r2, #279	@ 0x117
 80025d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80025d2:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025d4:	f240 1247 	movw	r2, #327	@ 0x147
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <BSP_LCD_Init+0xbc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <BSP_LCD_Init+0xc4>)
 80025f4:	2208      	movs	r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <BSP_LCD_Init+0xc4>)
 80025fa:	22c0      	movs	r2, #192	@ 0xc0
 80025fc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80025fe:	4b17      	ldr	r3, [pc, #92]	@ (800265c <BSP_LCD_Init+0xc4>)
 8002600:	2204      	movs	r2, #4
 8002602:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <BSP_LCD_Init+0xc4>)
 8002606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800260c:	4813      	ldr	r0, [pc, #76]	@ (800265c <BSP_LCD_Init+0xc4>)
 800260e:	f002 fe6d 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <BSP_LCD_Init+0xbc>)
 8002614:	2200      	movs	r2, #0
 8002616:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002618:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <BSP_LCD_Init+0xbc>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800261e:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <BSP_LCD_Init+0xbc>)
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <BSP_LCD_Init+0xbc>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800262a:	f000 f95f 	bl	80028ec <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800262e:	4809      	ldr	r0, [pc, #36]	@ (8002654 <BSP_LCD_Init+0xbc>)
 8002630:	f001 feb8 	bl	80043a4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002634:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <BSP_LCD_Init+0xc8>)
 8002636:	4a0b      	ldr	r2, [pc, #44]	@ (8002664 <BSP_LCD_Init+0xcc>)
 8002638:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <BSP_LCD_Init+0xc8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002642:	f000 fa61 	bl	8002b08 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002646:	4808      	ldr	r0, [pc, #32]	@ (8002668 <BSP_LCD_Init+0xd0>)
 8002648:	f000 f8b4 	bl	80027b4 <BSP_LCD_SetFont>

  return LCD_OK;
 800264c:	2300      	movs	r3, #0
}  
 800264e:	4618      	mov	r0, r3
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000048c 	.word	0x2000048c
 8002658:	40016800 	.word	0x40016800
 800265c:	20000574 	.word	0x20000574
 8002660:	200005c0 	.word	0x200005c0
 8002664:	20000020 	.word	0x20000020
 8002668:	2000005c 	.word	0x2000005c

0800266c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002670:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <BSP_LCD_GetXSize+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002676:	4798      	blx	r3
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200005c0 	.word	0x200005c0

08002684 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <BSP_LCD_GetYSize+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	4798      	blx	r3
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200005c0 	.word	0x200005c0

0800269c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800269c:	b580      	push	{r7, lr}
 800269e:	b090      	sub	sp, #64	@ 0x40
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80026ac:	f7ff ffde 	bl	800266c <BSP_LCD_GetXSize>
 80026b0:	4603      	mov	r3, r0
 80026b2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026b8:	f7ff ffe4 	bl	8002684 <BSP_LCD_GetYSize>
 80026bc:	4603      	mov	r3, r0
 80026be:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80026c8:	23ff      	movs	r3, #255	@ 0xff
 80026ca:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026e8:	2307      	movs	r3, #7
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80026ec:	f7ff ffbe 	bl	800266c <BSP_LCD_GetXSize>
 80026f0:	4603      	mov	r3, r0
 80026f2:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80026f4:	f7ff ffc6 	bl	8002684 <BSP_LCD_GetYSize>
 80026f8:	4603      	mov	r3, r0
 80026fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	4619      	mov	r1, r3
 8002704:	4814      	ldr	r0, [pc, #80]	@ (8002758 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002706:	f001 ff1d 	bl	8004544 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	4913      	ldr	r1, [pc, #76]	@ (800275c <BSP_LCD_LayerDefaultInit+0xc0>)
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3304      	adds	r3, #4
 800271a:	f04f 32ff 	mov.w	r2, #4294967295
 800271e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	490e      	ldr	r1, [pc, #56]	@ (800275c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3308      	adds	r3, #8
 8002730:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002732:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	4909      	ldr	r1, [pc, #36]	@ (800275c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002746:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002748:	4803      	ldr	r0, [pc, #12]	@ (8002758 <BSP_LCD_LayerDefaultInit+0xbc>)
 800274a:	f001 ff39 	bl	80045c0 <HAL_LTDC_EnableDither>
}
 800274e:	bf00      	nop
 8002750:	3740      	adds	r7, #64	@ 0x40
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000048c 	.word	0x2000048c
 800275c:	200005a8 	.word	0x200005a8
 8002760:	2000005c 	.word	0x2000005c

08002764 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800276c:	4a04      	ldr	r2, [pc, #16]	@ (8002780 <BSP_LCD_SelectLayer+0x1c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200005a4 	.word	0x200005a4

08002784 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800278c:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <BSP_LCD_SetTextColor+0x28>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4907      	ldr	r1, [pc, #28]	@ (80027b0 <BSP_LCD_SetTextColor+0x2c>)
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	601a      	str	r2, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	200005a4 	.word	0x200005a4
 80027b0:	200005a8 	.word	0x200005a8

080027b4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80027bc:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <BSP_LCD_SetFont+0x2c>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <BSP_LCD_SetFont+0x30>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	3308      	adds	r3, #8
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	601a      	str	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	200005a4 	.word	0x200005a4
 80027e4:	200005a8 	.word	0x200005a8

080027e8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <BSP_LCD_Clear+0x48>)
 80027f2:	681c      	ldr	r4, [r3, #0]
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <BSP_LCD_Clear+0x48>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002834 <BSP_LCD_Clear+0x4c>)
 80027fa:	2134      	movs	r1, #52	@ 0x34
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	335c      	adds	r3, #92	@ 0x5c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461e      	mov	r6, r3
 8002808:	f7ff ff30 	bl	800266c <BSP_LCD_GetXSize>
 800280c:	4605      	mov	r5, r0
 800280e:	f7ff ff39 	bl	8002684 <BSP_LCD_GetYSize>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2300      	movs	r3, #0
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	462a      	mov	r2, r5
 8002820:	4631      	mov	r1, r6
 8002822:	4620      	mov	r0, r4
 8002824:	f000 f938 	bl	8002a98 <FillBuffer>
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002830:	200005a4 	.word	0x200005a4
 8002834:	2000048c 	.word	0x2000048c

08002838 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af02      	add	r7, sp, #8
 8002840:	4604      	mov	r4, r0
 8002842:	4608      	mov	r0, r1
 8002844:	4611      	mov	r1, r2
 8002846:	461a      	mov	r2, r3
 8002848:	4623      	mov	r3, r4
 800284a:	80fb      	strh	r3, [r7, #6]
 800284c:	4603      	mov	r3, r0
 800284e:	80bb      	strh	r3, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800285c:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <BSP_LCD_FillRect+0xa8>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4920      	ldr	r1, [pc, #128]	@ (80028e4 <BSP_LCD_FillRect+0xac>)
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff88 	bl	8002784 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <BSP_LCD_FillRect+0xa8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <BSP_LCD_FillRect+0xb0>)
 800287a:	2134      	movs	r1, #52	@ 0x34
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	335c      	adds	r3, #92	@ 0x5c
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	f7ff fef1 	bl	800266c <BSP_LCD_GetXSize>
 800288a:	4602      	mov	r2, r0
 800288c:	88bb      	ldrh	r3, [r7, #4]
 800288e:	fb03 f202 	mul.w	r2, r3, r2
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4423      	add	r3, r4
 800289a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <BSP_LCD_FillRect+0xa8>)
 800289e:	681c      	ldr	r4, [r3, #0]
 80028a0:	68fd      	ldr	r5, [r7, #12]
 80028a2:	887e      	ldrh	r6, [r7, #2]
 80028a4:	f8b7 8000 	ldrh.w	r8, [r7]
 80028a8:	f7ff fee0 	bl	800266c <BSP_LCD_GetXSize>
 80028ac:	4602      	mov	r2, r0
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	1ad1      	subs	r1, r2, r3
 80028b2:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <BSP_LCD_FillRect+0xa8>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	480b      	ldr	r0, [pc, #44]	@ (80028e4 <BSP_LCD_FillRect+0xac>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4403      	add	r3, r0
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	9100      	str	r1, [sp, #0]
 80028c8:	4643      	mov	r3, r8
 80028ca:	4632      	mov	r2, r6
 80028cc:	4629      	mov	r1, r5
 80028ce:	4620      	mov	r0, r4
 80028d0:	f000 f8e2 	bl	8002a98 <FillBuffer>
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028de:	bf00      	nop
 80028e0:	200005a4 	.word	0x200005a4
 80028e4:	200005a8 	.word	0x200005a8
 80028e8:	2000048c 	.word	0x2000048c

080028ec <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08e      	sub	sp, #56	@ 0x38
 80028f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	4b61      	ldr	r3, [pc, #388]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	4a60      	ldr	r2, [pc, #384]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 80028fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002900:	6453      	str	r3, [r2, #68]	@ 0x44
 8002902:	4b5e      	ldr	r3, [pc, #376]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	4b5a      	ldr	r3, [pc, #360]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a59      	ldr	r2, [pc, #356]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002918:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b57      	ldr	r3, [pc, #348]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	4b53      	ldr	r3, [pc, #332]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	4a52      	ldr	r2, [pc, #328]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	@ 0x30
 800293a:	4b50      	ldr	r3, [pc, #320]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a4b      	ldr	r2, [pc, #300]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b49      	ldr	r3, [pc, #292]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b45      	ldr	r3, [pc, #276]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	4a44      	ldr	r2, [pc, #272]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6313      	str	r3, [r2, #48]	@ 0x30
 8002972:	4b42      	ldr	r3, [pc, #264]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b3e      	ldr	r3, [pc, #248]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a3d      	ldr	r2, [pc, #244]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a36      	ldr	r2, [pc, #216]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 80029a4:	f043 0320 	orr.w	r3, r3, #32
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b30      	ldr	r3, [pc, #192]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 80029c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <BSP_LCD_MspInit+0x190>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80029d2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80029e0:	2302      	movs	r3, #2
 80029e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80029e4:	230e      	movs	r3, #14
 80029e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80029e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	4824      	ldr	r0, [pc, #144]	@ (8002a80 <BSP_LCD_MspInit+0x194>)
 80029f0:	f001 f846 	bl	8003a80 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80029f4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029fe:	4619      	mov	r1, r3
 8002a00:	4820      	ldr	r0, [pc, #128]	@ (8002a84 <BSP_LCD_MspInit+0x198>)
 8002a02:	f001 f83d 	bl	8003a80 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002a06:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a10:	4619      	mov	r1, r3
 8002a12:	481d      	ldr	r0, [pc, #116]	@ (8002a88 <BSP_LCD_MspInit+0x19c>)
 8002a14:	f001 f834 	bl	8003a80 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002a18:	2348      	movs	r3, #72	@ 0x48
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a20:	4619      	mov	r1, r3
 8002a22:	481a      	ldr	r0, [pc, #104]	@ (8002a8c <BSP_LCD_MspInit+0x1a0>)
 8002a24:	f001 f82c 	bl	8003a80 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a32:	4619      	mov	r1, r3
 8002a34:	4816      	ldr	r0, [pc, #88]	@ (8002a90 <BSP_LCD_MspInit+0x1a4>)
 8002a36:	f001 f823 	bl	8003a80 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002a3a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a44:	4619      	mov	r1, r3
 8002a46:	4813      	ldr	r0, [pc, #76]	@ (8002a94 <BSP_LCD_MspInit+0x1a8>)
 8002a48:	f001 f81a 	bl	8003a80 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002a50:	2309      	movs	r3, #9
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480a      	ldr	r0, [pc, #40]	@ (8002a84 <BSP_LCD_MspInit+0x198>)
 8002a5c:	f001 f810 	bl	8003a80 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002a60:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4809      	ldr	r0, [pc, #36]	@ (8002a94 <BSP_LCD_MspInit+0x1a8>)
 8002a6e:	f001 f807 	bl	8003a80 <HAL_GPIO_Init>
}
 8002a72:	bf00      	nop
 8002a74:	3738      	adds	r7, #56	@ 0x38
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40021400 	.word	0x40021400
 8002a94:	40021800 	.word	0x40021800

08002a98 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	@ (8002b00 <FillBuffer+0x68>)
 8002aa8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002aac:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002aae:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <FillBuffer+0x68>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002ab4:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <FillBuffer+0x68>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002aba:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <FillBuffer+0x68>)
 8002abc:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <FillBuffer+0x6c>)
 8002abe:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002ac0:	480f      	ldr	r0, [pc, #60]	@ (8002b00 <FillBuffer+0x68>)
 8002ac2:	f000 fd51 	bl	8003568 <HAL_DMA2D_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d115      	bne.n	8002af8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002acc:	68f9      	ldr	r1, [r7, #12]
 8002ace:	480c      	ldr	r0, [pc, #48]	@ (8002b00 <FillBuffer+0x68>)
 8002ad0:	f000 fea8 	bl	8003824 <HAL_DMA2D_ConfigLayer>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69f9      	ldr	r1, [r7, #28]
 8002ae4:	4806      	ldr	r0, [pc, #24]	@ (8002b00 <FillBuffer+0x68>)
 8002ae6:	f000 fd88 	bl	80035fa <HAL_DMA2D_Start>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002af0:	210a      	movs	r1, #10
 8002af2:	4803      	ldr	r0, [pc, #12]	@ (8002b00 <FillBuffer+0x68>)
 8002af4:	f000 fdac 	bl	8003650 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000534 	.word	0x20000534
 8002b04:	4002b000 	.word	0x4002b000

08002b08 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b0c:	4b29      	ldr	r3, [pc, #164]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb8 <BSP_SDRAM_Init+0xb0>)
 8002b10:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002b12:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b14:	2202      	movs	r2, #2
 8002b16:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002b18:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002b1e:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b20:	2204      	movs	r2, #4
 8002b22:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002b24:	4b25      	ldr	r3, [pc, #148]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b26:	2207      	movs	r2, #7
 8002b28:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002b2a:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002b30:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b32:	2202      	movs	r2, #2
 8002b34:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002b36:	4b21      	ldr	r3, [pc, #132]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b38:	2202      	movs	r2, #2
 8002b3a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b42:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002b48:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002b4e:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b50:	2210      	movs	r2, #16
 8002b52:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002b54:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002b5a:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b5c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b60:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002b68:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b6e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002b70:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002b76:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b7c:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002b7e:	2100      	movs	r1, #0
 8002b80:	480c      	ldr	r0, [pc, #48]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b82:	f000 f87f 	bl	8002c84 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002b86:	490d      	ldr	r1, [pc, #52]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b88:	480a      	ldr	r0, [pc, #40]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b8a:	f002 fd6f 	bl	800566c <HAL_SDRAM_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002b94:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <BSP_SDRAM_Init+0xb8>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e002      	b.n	8002ba2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002b9c:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <BSP_SDRAM_Init+0xb8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002ba2:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002ba6:	f000 f80d 	bl	8002bc4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <BSP_SDRAM_Init+0xb8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200005c4 	.word	0x200005c4
 8002bb8:	a0000140 	.word	0xa0000140
 8002bbc:	200005f8 	.word	0x200005f8
 8002bc0:	2000006c 	.word	0x2000006c

08002bc4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002bd6:	4b29      	ldr	r3, [pc, #164]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd8:	2208      	movs	r2, #8
 8002bda:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002bdc:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002be2:	4b26      	ldr	r3, [pc, #152]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002be8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bec:	4923      	ldr	r1, [pc, #140]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bee:	4824      	ldr	r0, [pc, #144]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bf0:	f002 fd70 	bl	80056d4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f000 f9c3 	bl	8002f80 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002bfa:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c00:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c02:	2208      	movs	r2, #8
 8002c04:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c16:	4919      	ldr	r1, [pc, #100]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c18:	4819      	ldr	r0, [pc, #100]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c1a:	f002 fd5b 	bl	80056d4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c20:	2203      	movs	r2, #3
 8002c22:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c24:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c26:	2208      	movs	r2, #8
 8002c28:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c30:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c3a:	4910      	ldr	r1, [pc, #64]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c3c:	4810      	ldr	r0, [pc, #64]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c3e:	f002 fd49 	bl	80056d4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002c42:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002c46:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c50:	2208      	movs	r2, #8
 8002c52:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a07      	ldr	r2, [pc, #28]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c5e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c64:	4905      	ldr	r1, [pc, #20]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c66:	4806      	ldr	r0, [pc, #24]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c68:	f002 fd34 	bl	80056d4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4804      	ldr	r0, [pc, #16]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c70:	f002 fd65 	bl	800573e <HAL_SDRAM_ProgramRefreshRate>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000614 	.word	0x20000614
 8002c80:	200005c4 	.word	0x200005c4

08002c84 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b090      	sub	sp, #64	@ 0x40
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80ec 	beq.w	8002e6e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c9a:	4b77      	ldr	r3, [pc, #476]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	4a76      	ldr	r2, [pc, #472]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ca6:	4b74      	ldr	r3, [pc, #464]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb6:	4b70      	ldr	r3, [pc, #448]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a6f      	ldr	r2, [pc, #444]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	4b69      	ldr	r3, [pc, #420]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a68      	ldr	r2, [pc, #416]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b66      	ldr	r3, [pc, #408]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	4b62      	ldr	r3, [pc, #392]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a61      	ldr	r2, [pc, #388]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	4b54      	ldr	r3, [pc, #336]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a53      	ldr	r2, [pc, #332]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d2c:	f043 0310 	orr.w	r3, r3, #16
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b51      	ldr	r3, [pc, #324]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b4d      	ldr	r3, [pc, #308]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	4a4c      	ldr	r2, [pc, #304]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d48:	f043 0320 	orr.w	r3, r3, #32
 8002d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b46      	ldr	r3, [pc, #280]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	4a45      	ldr	r2, [pc, #276]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6a:	4b43      	ldr	r3, [pc, #268]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002d82:	230c      	movs	r3, #12
 8002d84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002d86:	2360      	movs	r3, #96	@ 0x60
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	483a      	ldr	r0, [pc, #232]	@ (8002e7c <BSP_SDRAM_MspInit+0x1f8>)
 8002d92:	f000 fe75 	bl	8003a80 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002d96:	2301      	movs	r3, #1
 8002d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4837      	ldr	r0, [pc, #220]	@ (8002e80 <BSP_SDRAM_MspInit+0x1fc>)
 8002da2:	f000 fe6d 	bl	8003a80 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002da6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002dac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db0:	4619      	mov	r1, r3
 8002db2:	4834      	ldr	r0, [pc, #208]	@ (8002e84 <BSP_SDRAM_MspInit+0x200>)
 8002db4:	f000 fe64 	bl	8003a80 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002db8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002dbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4830      	ldr	r0, [pc, #192]	@ (8002e88 <BSP_SDRAM_MspInit+0x204>)
 8002dc6:	f000 fe5b 	bl	8003a80 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002dca:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	482d      	ldr	r0, [pc, #180]	@ (8002e8c <BSP_SDRAM_MspInit+0x208>)
 8002dd8:	f000 fe52 	bl	8003a80 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002ddc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002de6:	4619      	mov	r1, r3
 8002de8:	4829      	ldr	r0, [pc, #164]	@ (8002e90 <BSP_SDRAM_MspInit+0x20c>)
 8002dea:	f000 fe49 	bl	8003a80 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002dee:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002df4:	4b27      	ldr	r3, [pc, #156]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e00:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002e02:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e08:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e0a:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e10:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002e12:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e18:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e20:	4b1c      	ldr	r3, [pc, #112]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e26:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e30:	2203      	movs	r2, #3
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e34:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002e3a:	4b16      	ldr	r3, [pc, #88]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002e40:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e42:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <BSP_SDRAM_MspInit+0x214>)
 8002e44:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e4c:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002e52:	4810      	ldr	r0, [pc, #64]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e54:	f000 fa78 	bl	8003348 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002e58:	480e      	ldr	r0, [pc, #56]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e5a:	f000 f9c7 	bl	80031ec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	210f      	movs	r1, #15
 8002e62:	2038      	movs	r0, #56	@ 0x38
 8002e64:	f000 f98b 	bl	800317e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002e68:	2038      	movs	r0, #56	@ 0x38
 8002e6a:	f000 f9a4 	bl	80031b6 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002e6e:	bf00      	nop
 8002e70:	3740      	adds	r7, #64	@ 0x40
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021800 	.word	0x40021800
 8002e94:	20000624 	.word	0x20000624
 8002e98:	40026410 	.word	0x40026410

08002e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <HAL_Init+0x40>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <HAL_Init+0x40>)
 8002ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002edc <HAL_Init+0x40>)
 8002eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <HAL_Init+0x40>)
 8002ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f000 f94f 	bl	8003168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f000 f808 	bl	8002ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed0:	f7fe fbf8 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023c00 	.word	0x40023c00

08002ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee8:	4b12      	ldr	r3, [pc, #72]	@ (8002f34 <HAL_InitTick+0x54>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <HAL_InitTick+0x58>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f967 	bl	80031d2 <HAL_SYSTICK_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00e      	b.n	8002f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d80a      	bhi.n	8002f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f14:	2200      	movs	r2, #0
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f000 f92f 	bl	800317e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f20:	4a06      	ldr	r2, [pc, #24]	@ (8002f3c <HAL_InitTick+0x5c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	2000001c 	.word	0x2000001c
 8002f38:	20000074 	.word	0x20000074
 8002f3c:	20000070 	.word	0x20000070

08002f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <HAL_IncTick+0x20>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_IncTick+0x24>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <HAL_IncTick+0x24>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000074 	.word	0x20000074
 8002f64:	20000684 	.word	0x20000684

08002f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <HAL_GetTick+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000684 	.word	0x20000684

08002f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff ffee 	bl	8002f68 <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d005      	beq.n	8002fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_Delay+0x44>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fa6:	bf00      	nop
 8002fa8:	f7ff ffde 	bl	8002f68 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8f7      	bhi.n	8002fa8 <HAL_Delay+0x28>
  {
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000074 	.word	0x20000074

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4907      	ldr	r1, [pc, #28]	@ (8003064 <__NVIC_EnableIRQ+0x38>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000e100 	.word	0xe000e100

08003068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db0a      	blt.n	8003092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	490c      	ldr	r1, [pc, #48]	@ (80030b4 <__NVIC_SetPriority+0x4c>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	440b      	add	r3, r1
 800308c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003090:	e00a      	b.n	80030a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4908      	ldr	r1, [pc, #32]	@ (80030b8 <__NVIC_SetPriority+0x50>)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	3b04      	subs	r3, #4
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	440b      	add	r3, r1
 80030a6:	761a      	strb	r2, [r3, #24]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	@ 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f1c3 0307 	rsb	r3, r3, #7
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf28      	it	cs
 80030da:	2304      	movcs	r3, #4
 80030dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d902      	bls.n	80030ec <NVIC_EncodePriority+0x30>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3b03      	subs	r3, #3
 80030ea:	e000      	b.n	80030ee <NVIC_EncodePriority+0x32>
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43d9      	mvns	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	4313      	orrs	r3, r2
         );
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003134:	d301      	bcc.n	800313a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003136:	2301      	movs	r3, #1
 8003138:	e00f      	b.n	800315a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <SysTick_Config+0x40>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003142:	210f      	movs	r1, #15
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	f7ff ff8e 	bl	8003068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <SysTick_Config+0x40>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003152:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <SysTick_Config+0x40>)
 8003154:	2207      	movs	r2, #7
 8003156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	e000e010 	.word	0xe000e010

08003168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff29 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003190:	f7ff ff3e 	bl	8003010 <__NVIC_GetPriorityGrouping>
 8003194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	6978      	ldr	r0, [r7, #20]
 800319c:	f7ff ff8e 	bl	80030bc <NVIC_EncodePriority>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff5d 	bl	8003068 <__NVIC_SetPriority>
}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff31 	bl	800302c <__NVIC_EnableIRQ>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ffa2 	bl	8003124 <SysTick_Config>
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031f8:	f7ff feb6 	bl	8002f68 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e099      	b.n	800333c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003228:	e00f      	b.n	800324a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800322a:	f7ff fe9d 	bl	8002f68 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b05      	cmp	r3, #5
 8003236:	d908      	bls.n	800324a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2203      	movs	r2, #3
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e078      	b.n	800333c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e8      	bne.n	800322a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4b38      	ldr	r3, [pc, #224]	@ (8003344 <HAL_DMA_Init+0x158>)
 8003264:	4013      	ands	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003276:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d107      	bne.n	80032b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	4313      	orrs	r3, r2
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0307 	bic.w	r3, r3, #7
 80032ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d117      	bne.n	800330e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8bd 	bl	8003470 <DMA_CheckFifoParam>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2240      	movs	r2, #64	@ 0x40
 8003300:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800330a:	2301      	movs	r3, #1
 800330c:	e016      	b.n	800333c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f874 	bl	8003404 <DMA_CalcBaseAndBitshift>
 800331c:	4603      	mov	r3, r0
 800331e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	223f      	movs	r2, #63	@ 0x3f
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	f010803f 	.word	0xf010803f

08003348 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e050      	b.n	80033fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d101      	bne.n	800336a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	e048      	b.n	80033fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2200      	movs	r2, #0
 8003388:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2221      	movs	r2, #33	@ 0x21
 80033a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f82a 	bl	8003404 <DMA_CalcBaseAndBitshift>
 80033b0:	4603      	mov	r3, r0
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	223f      	movs	r2, #63	@ 0x3f
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3b10      	subs	r3, #16
 8003414:	4a14      	ldr	r2, [pc, #80]	@ (8003468 <DMA_CalcBaseAndBitshift+0x64>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800341e:	4a13      	ldr	r2, [pc, #76]	@ (800346c <DMA_CalcBaseAndBitshift+0x68>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d909      	bls.n	8003446 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800343a:	f023 0303 	bic.w	r3, r3, #3
 800343e:	1d1a      	adds	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	659a      	str	r2, [r3, #88]	@ 0x58
 8003444:	e007      	b.n	8003456 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	aaaaaaab 	.word	0xaaaaaaab
 800346c:	0800b598 	.word	0x0800b598

08003470 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003480:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11f      	bne.n	80034ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d856      	bhi.n	800353e <DMA_CheckFifoParam+0xce>
 8003490:	a201      	add	r2, pc, #4	@ (adr r2, 8003498 <DMA_CheckFifoParam+0x28>)
 8003492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003496:	bf00      	nop
 8003498:	080034a9 	.word	0x080034a9
 800349c:	080034bb 	.word	0x080034bb
 80034a0:	080034a9 	.word	0x080034a9
 80034a4:	0800353f 	.word	0x0800353f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d046      	beq.n	8003542 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b8:	e043      	b.n	8003542 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034c2:	d140      	bne.n	8003546 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c8:	e03d      	b.n	8003546 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d2:	d121      	bne.n	8003518 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d837      	bhi.n	800354a <DMA_CheckFifoParam+0xda>
 80034da:	a201      	add	r2, pc, #4	@ (adr r2, 80034e0 <DMA_CheckFifoParam+0x70>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	080034f7 	.word	0x080034f7
 80034e8:	080034f1 	.word	0x080034f1
 80034ec:	08003509 	.word	0x08003509
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      break;
 80034f4:	e030      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d025      	beq.n	800354e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003506:	e022      	b.n	800354e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003510:	d11f      	bne.n	8003552 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003516:	e01c      	b.n	8003552 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d903      	bls.n	8003526 <DMA_CheckFifoParam+0xb6>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d003      	beq.n	800352c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003524:	e018      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
      break;
 800352a:	e015      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e00b      	b.n	8003556 <DMA_CheckFifoParam+0xe6>
      break;
 800353e:	bf00      	nop
 8003540:	e00a      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 8003542:	bf00      	nop
 8003544:	e008      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
 8003548:	e006      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 800354a:	bf00      	nop
 800354c:	e004      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;   
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 8003556:	bf00      	nop
    }
  } 
  
  return status; 
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e03b      	b.n	80035f2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe f8c0 	bl	8001714 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b8:	f023 0107 	bic.w	r1, r3, #7
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80035d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68d1      	ldr	r1, [r2, #12]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	430b      	orrs	r3, r1
 80035e0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af02      	add	r7, sp, #8
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_DMA2D_Start+0x1c>
 8003612:	2302      	movs	r3, #2
 8003614:	e018      	b.n	8003648 <HAL_DMA2D_Start+0x4e>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f989 	bl	8003948 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d056      	beq.n	800371a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800366c:	f7ff fc7c 	bl	8002f68 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003672:	e04b      	b.n	800370c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003682:	2b00      	cmp	r3, #0
 8003684:	d023      	beq.n	80036ce <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003694:	f043 0202 	orr.w	r2, r3, #2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2221      	movs	r2, #33	@ 0x21
 80036b8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0a5      	b.n	800381a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d01a      	beq.n	800370c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7ff fc47 	bl	8002f68 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <HAL_DMA2D_PollForTransfer+0x9c>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10f      	bne.n	800370c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e086      	b.n	800381a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ac      	beq.n	8003674 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d061      	beq.n	8003800 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800373c:	f7ff fc14 	bl	8002f68 <HAL_GetTick>
 8003740:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003742:	e056      	b.n	80037f2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02e      	beq.n	80037b4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	f043 0204 	orr.w	r2, r3, #4
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2229      	movs	r2, #41	@ 0x29
 800379e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2204      	movs	r2, #4
 80037a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e032      	b.n	800381a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d01a      	beq.n	80037f2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037bc:	f7ff fbd4 	bl	8002f68 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d302      	bcc.n	80037d2 <HAL_DMA2D_PollForTransfer+0x182>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2203      	movs	r2, #3
 80037e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e013      	b.n	800381a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0a1      	beq.n	8003744 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2212      	movs	r2, #18
 8003806:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_DMA2D_ConfigLayer+0x20>
 8003840:	2302      	movs	r3, #2
 8003842:	e079      	b.n	8003938 <HAL_DMA2D_ConfigLayer+0x114>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	3318      	adds	r3, #24
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800386e:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <HAL_DMA2D_ConfigLayer+0x120>)
 8003870:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b0a      	cmp	r3, #10
 8003878:	d003      	beq.n	8003882 <HAL_DMA2D_ConfigLayer+0x5e>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b09      	cmp	r3, #9
 8003880:	d107      	bne.n	8003892 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e005      	b.n	800389e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d120      	bne.n	80038e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	ea02 0103 	and.w	r1, r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b0a      	cmp	r3, #10
 80038cc:	d003      	beq.n	80038d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b09      	cmp	r3, #9
 80038d4:	d127      	bne.n	8003926 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80038e4:	e01f      	b.n	8003926 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	ea02 0103 	and.w	r1, r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b0a      	cmp	r3, #10
 800390e:	d003      	beq.n	8003918 <HAL_DMA2D_ConfigLayer+0xf4>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b09      	cmp	r3, #9
 8003916:	d106      	bne.n	8003926 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003924:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	ff03000f 	.word	0xff03000f

08003948 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003948:	b480      	push	{r7}
 800394a:	b08b      	sub	sp, #44	@ 0x2c
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	041a      	lsls	r2, r3, #16
 8003964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003966:	431a      	orrs	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003980:	d174      	bne.n	8003a6c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003988:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003990:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003998:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d108      	bne.n	80039ba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b8:	e053      	b.n	8003a62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d106      	bne.n	80039d0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ce:	e048      	b.n	8003a62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d111      	bne.n	80039fc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	0cdb      	lsrs	r3, r3, #19
 80039dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	0a9b      	lsrs	r3, r3, #10
 80039e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	08db      	lsrs	r3, r3, #3
 80039e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	02db      	lsls	r3, r3, #11
 80039f2:	4313      	orrs	r3, r2
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039fa:	e032      	b.n	8003a62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d117      	bne.n	8003a34 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	0fdb      	lsrs	r3, r3, #31
 8003a08:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	0cdb      	lsrs	r3, r3, #19
 8003a0e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	0adb      	lsrs	r3, r3, #11
 8003a14:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	08db      	lsrs	r3, r3, #3
 8003a1a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	029b      	lsls	r3, r3, #10
 8003a24:	431a      	orrs	r2, r3
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	03db      	lsls	r3, r3, #15
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	e016      	b.n	8003a62 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	0f1b      	lsrs	r3, r3, #28
 8003a38:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	0d1b      	lsrs	r3, r3, #20
 8003a3e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	0b1b      	lsrs	r3, r3, #12
 8003a44:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	011a      	lsls	r2, r3, #4
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	431a      	orrs	r2, r3
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	031b      	lsls	r3, r3, #12
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a68:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003a6a:	e003      	b.n	8003a74 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	60da      	str	r2, [r3, #12]
}
 8003a74:	bf00      	nop
 8003a76:	372c      	adds	r7, #44	@ 0x2c
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	@ 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e177      	b.n	8003d8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	f040 8166 	bne.w	8003d86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d005      	beq.n	8003ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d130      	bne.n	8003b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 0201 	and.w	r2, r3, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d017      	beq.n	8003b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d123      	bne.n	8003bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	08da      	lsrs	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3208      	adds	r2, #8
 8003b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	08da      	lsrs	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3208      	adds	r2, #8
 8003bbe:	69b9      	ldr	r1, [r7, #24]
 8003bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0203 	and.w	r2, r3, #3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80c0 	beq.w	8003d86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	4b66      	ldr	r3, [pc, #408]	@ (8003da4 <HAL_GPIO_Init+0x324>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	4a65      	ldr	r2, [pc, #404]	@ (8003da4 <HAL_GPIO_Init+0x324>)
 8003c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c16:	4b63      	ldr	r3, [pc, #396]	@ (8003da4 <HAL_GPIO_Init+0x324>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c22:	4a61      	ldr	r2, [pc, #388]	@ (8003da8 <HAL_GPIO_Init+0x328>)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	220f      	movs	r2, #15
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a58      	ldr	r2, [pc, #352]	@ (8003dac <HAL_GPIO_Init+0x32c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d037      	beq.n	8003cbe <HAL_GPIO_Init+0x23e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a57      	ldr	r2, [pc, #348]	@ (8003db0 <HAL_GPIO_Init+0x330>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d031      	beq.n	8003cba <HAL_GPIO_Init+0x23a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a56      	ldr	r2, [pc, #344]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d02b      	beq.n	8003cb6 <HAL_GPIO_Init+0x236>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a55      	ldr	r2, [pc, #340]	@ (8003db8 <HAL_GPIO_Init+0x338>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d025      	beq.n	8003cb2 <HAL_GPIO_Init+0x232>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a54      	ldr	r2, [pc, #336]	@ (8003dbc <HAL_GPIO_Init+0x33c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01f      	beq.n	8003cae <HAL_GPIO_Init+0x22e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a53      	ldr	r2, [pc, #332]	@ (8003dc0 <HAL_GPIO_Init+0x340>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d019      	beq.n	8003caa <HAL_GPIO_Init+0x22a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a52      	ldr	r2, [pc, #328]	@ (8003dc4 <HAL_GPIO_Init+0x344>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_GPIO_Init+0x226>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a51      	ldr	r2, [pc, #324]	@ (8003dc8 <HAL_GPIO_Init+0x348>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00d      	beq.n	8003ca2 <HAL_GPIO_Init+0x222>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_GPIO_Init+0x34c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <HAL_GPIO_Init+0x21e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd0 <HAL_GPIO_Init+0x350>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_GPIO_Init+0x21a>
 8003c96:	2309      	movs	r3, #9
 8003c98:	e012      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003c9a:	230a      	movs	r3, #10
 8003c9c:	e010      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	e00e      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	e00c      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003ca6:	2306      	movs	r3, #6
 8003ca8:	e00a      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003caa:	2305      	movs	r3, #5
 8003cac:	e008      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cae:	2304      	movs	r3, #4
 8003cb0:	e006      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e004      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e002      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_GPIO_Init+0x240>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f002 0203 	and.w	r2, r2, #3
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	4093      	lsls	r3, r2
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd0:	4935      	ldr	r1, [pc, #212]	@ (8003da8 <HAL_GPIO_Init+0x328>)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cde:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d02:	4a34      	ldr	r2, [pc, #208]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d08:	4b32      	ldr	r3, [pc, #200]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d2c:	4a29      	ldr	r2, [pc, #164]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d32:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d56:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d80:	4a14      	ldr	r2, [pc, #80]	@ (8003dd4 <HAL_GPIO_Init+0x354>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	f67f ae84 	bls.w	8003a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3724      	adds	r7, #36	@ 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40013800 	.word	0x40013800
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40021400 	.word	0x40021400
 8003dc4:	40021800 	.word	0x40021800
 8003dc8:	40021c00 	.word	0x40021c00
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40022400 	.word	0x40022400
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e0d9      	b.n	8003fa8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df4:	2201      	movs	r2, #1
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f040 80c9 	bne.w	8003fa2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e10:	4a6b      	ldr	r2, [pc, #428]	@ (8003fc0 <HAL_GPIO_DeInit+0x1e8>)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	3302      	adds	r3, #2
 8003e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	220f      	movs	r2, #15
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a63      	ldr	r2, [pc, #396]	@ (8003fc4 <HAL_GPIO_DeInit+0x1ec>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d037      	beq.n	8003eaa <HAL_GPIO_DeInit+0xd2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a62      	ldr	r2, [pc, #392]	@ (8003fc8 <HAL_GPIO_DeInit+0x1f0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_GPIO_DeInit+0xce>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a61      	ldr	r2, [pc, #388]	@ (8003fcc <HAL_GPIO_DeInit+0x1f4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02b      	beq.n	8003ea2 <HAL_GPIO_DeInit+0xca>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a60      	ldr	r2, [pc, #384]	@ (8003fd0 <HAL_GPIO_DeInit+0x1f8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d025      	beq.n	8003e9e <HAL_GPIO_DeInit+0xc6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd4 <HAL_GPIO_DeInit+0x1fc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <HAL_GPIO_DeInit+0xc2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fd8 <HAL_GPIO_DeInit+0x200>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_DeInit+0xbe>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a5d      	ldr	r2, [pc, #372]	@ (8003fdc <HAL_GPIO_DeInit+0x204>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_DeInit+0xba>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8003fe0 <HAL_GPIO_DeInit+0x208>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_DeInit+0xb6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a5b      	ldr	r2, [pc, #364]	@ (8003fe4 <HAL_GPIO_DeInit+0x20c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_DeInit+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_DeInit+0xae>
 8003e82:	2309      	movs	r3, #9
 8003e84:	e012      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e86:	230a      	movs	r3, #10
 8003e88:	e010      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	e00e      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e00c      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e92:	2306      	movs	r3, #6
 8003e94:	e00a      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e96:	2305      	movs	r3, #5
 8003e98:	e008      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e004      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e002      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	f002 0203 	and.w	r2, r2, #3
 8003eb2:	0092      	lsls	r2, r2, #2
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d132      	bne.n	8003f22 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4949      	ldr	r1, [pc, #292]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003eca:	4b48      	ldr	r3, [pc, #288]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	4946      	ldr	r1, [pc, #280]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ed8:	4b44      	ldr	r3, [pc, #272]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	4942      	ldr	r1, [pc, #264]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ee6:	4b41      	ldr	r3, [pc, #260]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	493f      	ldr	r1, [pc, #252]	@ (8003fec <HAL_GPIO_DeInit+0x214>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f04:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <HAL_GPIO_DeInit+0x1e8>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	43da      	mvns	r2, r3
 8003f14:	482a      	ldr	r0, [pc, #168]	@ (8003fc0 <HAL_GPIO_DeInit+0x1e8>)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	08da      	lsrs	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	08d2      	lsrs	r2, r2, #3
 8003f58:	4019      	ands	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2103      	movs	r1, #3
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b0f      	cmp	r3, #15
 8003fac:	f67f af22 	bls.w	8003df4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40021400 	.word	0x40021400
 8003fdc:	40021800 	.word	0x40021800
 8003fe0:	40021c00 	.word	0x40021c00
 8003fe4:	40022000 	.word	0x40022000
 8003fe8:	40022400 	.word	0x40022400
 8003fec:	40013c00 	.word	0x40013c00

08003ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004000:	787b      	ldrb	r3, [r7, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800400c:	e003      	b.n	8004016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800400e:	887b      	ldrh	r3, [r7, #2]
 8004010:	041a      	lsls	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	619a      	str	r2, [r3, #24]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e12b      	b.n	800428e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fb84 	bl	8001758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	@ 0x24
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004088:	f001 f91c 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 800408c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4a81      	ldr	r2, [pc, #516]	@ (8004298 <HAL_I2C_Init+0x274>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d807      	bhi.n	80040a8 <HAL_I2C_Init+0x84>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a80      	ldr	r2, [pc, #512]	@ (800429c <HAL_I2C_Init+0x278>)
 800409c:	4293      	cmp	r3, r2
 800409e:	bf94      	ite	ls
 80040a0:	2301      	movls	r3, #1
 80040a2:	2300      	movhi	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e006      	b.n	80040b6 <HAL_I2C_Init+0x92>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a7d      	ldr	r2, [pc, #500]	@ (80042a0 <HAL_I2C_Init+0x27c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0e7      	b.n	800428e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a78      	ldr	r2, [pc, #480]	@ (80042a4 <HAL_I2C_Init+0x280>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0c9b      	lsrs	r3, r3, #18
 80040c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a6a      	ldr	r2, [pc, #424]	@ (8004298 <HAL_I2C_Init+0x274>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d802      	bhi.n	80040f8 <HAL_I2C_Init+0xd4>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	e009      	b.n	800410c <HAL_I2C_Init+0xe8>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a69      	ldr	r2, [pc, #420]	@ (80042a8 <HAL_I2C_Init+0x284>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	3301      	adds	r3, #1
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	430b      	orrs	r3, r1
 8004112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800411e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	495c      	ldr	r1, [pc, #368]	@ (8004298 <HAL_I2C_Init+0x274>)
 8004128:	428b      	cmp	r3, r1
 800412a:	d819      	bhi.n	8004160 <HAL_I2C_Init+0x13c>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e59      	subs	r1, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fbb1 f3f3 	udiv	r3, r1, r3
 800413a:	1c59      	adds	r1, r3, #1
 800413c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004140:	400b      	ands	r3, r1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_I2C_Init+0x138>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1e59      	subs	r1, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fbb1 f3f3 	udiv	r3, r1, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415a:	e051      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 800415c:	2304      	movs	r3, #4
 800415e:	e04f      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d111      	bne.n	800418c <HAL_I2C_Init+0x168>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	440b      	add	r3, r1
 8004176:	fbb0 f3f3 	udiv	r3, r0, r3
 800417a:	3301      	adds	r3, #1
 800417c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e012      	b.n	80041b2 <HAL_I2C_Init+0x18e>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e58      	subs	r0, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	0099      	lsls	r1, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Init+0x196>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e022      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10e      	bne.n	80041e0 <HAL_I2C_Init+0x1bc>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1e58      	subs	r0, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	440b      	add	r3, r1
 80041d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d4:	3301      	adds	r3, #1
 80041d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041de:	e00f      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	0099      	lsls	r1, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	6809      	ldr	r1, [r1, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800422e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6911      	ldr	r1, [r2, #16]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	430b      	orrs	r3, r1
 8004242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	000186a0 	.word	0x000186a0
 800429c:	001e847f 	.word	0x001e847f
 80042a0:	003d08ff 	.word	0x003d08ff
 80042a4:	431bde83 	.word	0x431bde83
 80042a8:	10624dd3 	.word	0x10624dd3

080042ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d129      	bne.n	8004316 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2224      	movs	r2, #36	@ 0x24
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0210 	bic.w	r2, r2, #16
 80042e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b20      	cmp	r3, #32
 800433c:	d12a      	bne.n	8004394 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2224      	movs	r2, #36	@ 0x24
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	f023 030f 	bic.w	r3, r3, #15
 8004364:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b29a      	uxth	r2, r3
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	4313      	orrs	r3, r2
 800436e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	89fa      	ldrh	r2, [r7, #14]
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0bf      	b.n	8004536 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd fa2e 	bl	800182c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80043e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6999      	ldr	r1, [r3, #24]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b4a      	ldr	r3, [pc, #296]	@ (8004540 <HAL_LTDC_Init+0x19c>)
 8004418:	400b      	ands	r3, r1
 800441a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6899      	ldr	r1, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68d9      	ldr	r1, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b3e      	ldr	r3, [pc, #248]	@ (8004540 <HAL_LTDC_Init+0x19c>)
 8004446:	400b      	ands	r3, r1
 8004448:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68d9      	ldr	r1, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6919      	ldr	r1, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b33      	ldr	r3, [pc, #204]	@ (8004540 <HAL_LTDC_Init+0x19c>)
 8004474:	400b      	ands	r3, r1
 8004476:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6919      	ldr	r1, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6959      	ldr	r1, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4b27      	ldr	r3, [pc, #156]	@ (8004540 <HAL_LTDC_Init+0x19c>)
 80044a2:	400b      	ands	r3, r1
 80044a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6959      	ldr	r1, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80044e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0206 	orr.w	r2, r2, #6
 8004512:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	f000f800 	.word	0xf000f800

08004544 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004544:	b5b0      	push	{r4, r5, r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_LTDC_ConfigLayer+0x1a>
 800455a:	2302      	movs	r3, #2
 800455c:	e02c      	b.n	80045b8 <HAL_LTDC_ConfigLayer+0x74>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2134      	movs	r1, #52	@ 0x34
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4614      	mov	r4, r2
 8004582:	461d      	mov	r5, r3
 8004584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800458a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800458c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800458e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f83b 	bl	8004614 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bdb0      	pop	{r4, r5, r7, pc}

080045c0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_LTDC_EnableDither+0x16>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e016      	b.n	8004604 <HAL_LTDC_EnableDither+0x44>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <HAL_LTDC_EnableDither+0x50>)
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	4a09      	ldr	r2, [pc, #36]	@ (8004610 <HAL_LTDC_EnableDither+0x50>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40016800 	.word	0x40016800

08004614 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	@ 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	4413      	add	r3, r2
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	01db      	lsls	r3, r3, #7
 8004640:	4413      	add	r3, r2
 8004642:	3384      	adds	r3, #132	@ 0x84
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	4611      	mov	r1, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	01d2      	lsls	r2, r2, #7
 8004650:	440a      	add	r2, r1
 8004652:	3284      	adds	r2, #132	@ 0x84
 8004654:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004658:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800466a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800466c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4619      	mov	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	01db      	lsls	r3, r3, #7
 8004678:	440b      	add	r3, r1
 800467a:	3384      	adds	r3, #132	@ 0x84
 800467c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004682:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004692:	4413      	add	r3, r2
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	01db      	lsls	r3, r3, #7
 80046a2:	4413      	add	r3, r2
 80046a4:	3384      	adds	r3, #132	@ 0x84
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	4611      	mov	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	01d2      	lsls	r2, r2, #7
 80046b2:	440a      	add	r2, r1
 80046b4:	3284      	adds	r2, #132	@ 0x84
 80046b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80046ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ca:	4413      	add	r3, r2
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4619      	mov	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	01db      	lsls	r3, r3, #7
 80046d8:	440b      	add	r3, r1
 80046da:	3384      	adds	r3, #132	@ 0x84
 80046dc:	4619      	mov	r1, r3
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	01db      	lsls	r3, r3, #7
 80046ee:	4413      	add	r3, r2
 80046f0:	3384      	adds	r3, #132	@ 0x84
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	4611      	mov	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	01d2      	lsls	r2, r2, #7
 80046fe:	440a      	add	r2, r1
 8004700:	3284      	adds	r2, #132	@ 0x84
 8004702:	f023 0307 	bic.w	r3, r3, #7
 8004706:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	01db      	lsls	r3, r3, #7
 8004712:	4413      	add	r3, r2
 8004714:	3384      	adds	r3, #132	@ 0x84
 8004716:	461a      	mov	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	061b      	lsls	r3, r3, #24
 8004738:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	01db      	lsls	r3, r3, #7
 8004744:	4413      	add	r3, r2
 8004746:	3384      	adds	r3, #132	@ 0x84
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	01db      	lsls	r3, r3, #7
 8004754:	4413      	add	r3, r2
 8004756:	3384      	adds	r3, #132	@ 0x84
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004764:	461a      	mov	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	431a      	orrs	r2, r3
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	431a      	orrs	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	01db      	lsls	r3, r3, #7
 8004778:	440b      	add	r3, r1
 800477a:	3384      	adds	r3, #132	@ 0x84
 800477c:	4619      	mov	r1, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	01db      	lsls	r3, r3, #7
 800478e:	4413      	add	r3, r2
 8004790:	3384      	adds	r3, #132	@ 0x84
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	4611      	mov	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	01d2      	lsls	r2, r2, #7
 800479e:	440a      	add	r2, r1
 80047a0:	3284      	adds	r2, #132	@ 0x84
 80047a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	01db      	lsls	r3, r3, #7
 80047b2:	4413      	add	r3, r2
 80047b4:	3384      	adds	r3, #132	@ 0x84
 80047b6:	461a      	mov	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	01db      	lsls	r3, r3, #7
 80047c8:	4413      	add	r3, r2
 80047ca:	3384      	adds	r3, #132	@ 0x84
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	4611      	mov	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	01d2      	lsls	r2, r2, #7
 80047d8:	440a      	add	r2, r1
 80047da:	3284      	adds	r2, #132	@ 0x84
 80047dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80047e0:	f023 0307 	bic.w	r3, r3, #7
 80047e4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	68f9      	ldr	r1, [r7, #12]
 80047f0:	6809      	ldr	r1, [r1, #0]
 80047f2:	4608      	mov	r0, r1
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	01c9      	lsls	r1, r1, #7
 80047f8:	4401      	add	r1, r0
 80047fa:	3184      	adds	r1, #132	@ 0x84
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	01db      	lsls	r3, r3, #7
 800480a:	4413      	add	r3, r2
 800480c:	3384      	adds	r3, #132	@ 0x84
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	01db      	lsls	r3, r3, #7
 800481a:	4413      	add	r3, r2
 800481c:	3384      	adds	r3, #132	@ 0x84
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	01db      	lsls	r3, r3, #7
 800482e:	4413      	add	r3, r2
 8004830:	3384      	adds	r3, #132	@ 0x84
 8004832:	461a      	mov	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004842:	2304      	movs	r3, #4
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	e01b      	b.n	8004880 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d102      	bne.n	8004856 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004850:	2303      	movs	r3, #3
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	e014      	b.n	8004880 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d00b      	beq.n	8004876 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004862:	2b02      	cmp	r3, #2
 8004864:	d007      	beq.n	8004876 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800486a:	2b03      	cmp	r3, #3
 800486c:	d003      	beq.n	8004876 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004872:	2b07      	cmp	r3, #7
 8004874:	d102      	bne.n	800487c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004876:	2302      	movs	r3, #2
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	e001      	b.n	8004880 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800487c:	2301      	movs	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	01db      	lsls	r3, r3, #7
 800488a:	4413      	add	r3, r2
 800488c:	3384      	adds	r3, #132	@ 0x84
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	4611      	mov	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	01d2      	lsls	r2, r2, #7
 800489a:	440a      	add	r2, r1
 800489c:	3284      	adds	r2, #132	@ 0x84
 800489e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80048a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	1acb      	subs	r3, r1, r3
 80048ba:	69f9      	ldr	r1, [r7, #28]
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	6809      	ldr	r1, [r1, #0]
 80048c6:	4608      	mov	r0, r1
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	01c9      	lsls	r1, r1, #7
 80048cc:	4401      	add	r1, r0
 80048ce:	3184      	adds	r1, #132	@ 0x84
 80048d0:	4313      	orrs	r3, r2
 80048d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	01db      	lsls	r3, r3, #7
 80048de:	4413      	add	r3, r2
 80048e0:	3384      	adds	r3, #132	@ 0x84
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	4611      	mov	r1, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	01d2      	lsls	r2, r2, #7
 80048ee:	440a      	add	r2, r1
 80048f0:	3284      	adds	r2, #132	@ 0x84
 80048f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80048f6:	f023 0307 	bic.w	r3, r3, #7
 80048fa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	01db      	lsls	r3, r3, #7
 8004906:	4413      	add	r3, r2
 8004908:	3384      	adds	r3, #132	@ 0x84
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	4413      	add	r3, r2
 800491e:	3384      	adds	r3, #132	@ 0x84
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	4611      	mov	r1, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	01d2      	lsls	r2, r2, #7
 800492c:	440a      	add	r2, r1
 800492e:	3284      	adds	r2, #132	@ 0x84
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6013      	str	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	3724      	adds	r7, #36	@ 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4b20      	ldr	r3, [pc, #128]	@ (80049d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	4a1f      	ldr	r2, [pc, #124]	@ (80049d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800495c:	6413      	str	r3, [r2, #64]	@ 0x40
 800495e:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800496a:	4b1b      	ldr	r3, [pc, #108]	@ (80049d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004970:	f7fe fafa 	bl	8002f68 <HAL_GetTick>
 8004974:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004976:	e009      	b.n	800498c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004978:	f7fe faf6 	bl	8002f68 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004986:	d901      	bls.n	800498c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e01f      	b.n	80049cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800498c:	4b13      	ldr	r3, [pc, #76]	@ (80049dc <HAL_PWREx_EnableOverDrive+0x98>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004998:	d1ee      	bne.n	8004978 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800499a:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a0:	f7fe fae2 	bl	8002f68 <HAL_GetTick>
 80049a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049a6:	e009      	b.n	80049bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049a8:	f7fe fade 	bl	8002f68 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049b6:	d901      	bls.n	80049bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e007      	b.n	80049cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <HAL_PWREx_EnableOverDrive+0x98>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c8:	d1ee      	bne.n	80049a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40023800 	.word	0x40023800
 80049d8:	420e0040 	.word	0x420e0040
 80049dc:	40007000 	.word	0x40007000
 80049e0:	420e0044 	.word	0x420e0044

080049e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e267      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d075      	beq.n	8004aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a02:	4b88      	ldr	r3, [pc, #544]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d00c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0e:	4b85      	ldr	r3, [pc, #532]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d112      	bne.n	8004a40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1a:	4b82      	ldr	r3, [pc, #520]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	4b7e      	ldr	r3, [pc, #504]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05b      	beq.n	8004aec <HAL_RCC_OscConfig+0x108>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d157      	bne.n	8004aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e242      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x74>
 8004a4a:	4b76      	ldr	r3, [pc, #472]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a75      	ldr	r2, [pc, #468]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e01d      	b.n	8004a94 <HAL_RCC_OscConfig+0xb0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x98>
 8004a62:	4b70      	ldr	r3, [pc, #448]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a6f      	ldr	r2, [pc, #444]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a6c      	ldr	r2, [pc, #432]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCC_OscConfig+0xb0>
 8004a7c:	4b69      	ldr	r3, [pc, #420]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a68      	ldr	r2, [pc, #416]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b66      	ldr	r3, [pc, #408]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a65      	ldr	r2, [pc, #404]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d013      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fe fa64 	bl	8002f68 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fe fa60 	bl	8002f68 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	@ 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e207      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0xc0>
 8004ac2:	e014      	b.n	8004aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fe fa50 	bl	8002f68 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fe fa4c 	bl	8002f68 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	@ 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e1f3      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ade:	4b51      	ldr	r3, [pc, #324]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0xe8>
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d063      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004afa:	4b4a      	ldr	r3, [pc, #296]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b06:	4b47      	ldr	r3, [pc, #284]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d11c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b12:	4b44      	ldr	r3, [pc, #272]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d116      	bne.n	8004b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1e:	4b41      	ldr	r3, [pc, #260]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_RCC_OscConfig+0x152>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d001      	beq.n	8004b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e1c7      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b36:	4b3b      	ldr	r3, [pc, #236]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4937      	ldr	r1, [pc, #220]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4a:	e03a      	b.n	8004bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b54:	4b34      	ldr	r3, [pc, #208]	@ (8004c28 <HAL_RCC_OscConfig+0x244>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fe fa05 	bl	8002f68 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fe fa01 	bl	8002f68 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e1a8      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b74:	4b2b      	ldr	r3, [pc, #172]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b80:	4b28      	ldr	r3, [pc, #160]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4925      	ldr	r1, [pc, #148]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]
 8004b94:	e015      	b.n	8004bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b96:	4b24      	ldr	r3, [pc, #144]	@ (8004c28 <HAL_RCC_OscConfig+0x244>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fe f9e4 	bl	8002f68 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba4:	f7fe f9e0 	bl	8002f68 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e187      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d036      	beq.n	8004c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd6:	4b15      	ldr	r3, [pc, #84]	@ (8004c2c <HAL_RCC_OscConfig+0x248>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fe f9c4 	bl	8002f68 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be4:	f7fe f9c0 	bl	8002f68 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e167      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x200>
 8004c02:	e01b      	b.n	8004c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c04:	4b09      	ldr	r3, [pc, #36]	@ (8004c2c <HAL_RCC_OscConfig+0x248>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0a:	f7fe f9ad 	bl	8002f68 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c10:	e00e      	b.n	8004c30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c12:	f7fe f9a9 	bl	8002f68 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d907      	bls.n	8004c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e150      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
 8004c24:	40023800 	.word	0x40023800
 8004c28:	42470000 	.word	0x42470000
 8004c2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c30:	4b88      	ldr	r3, [pc, #544]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ea      	bne.n	8004c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8097 	beq.w	8004d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4e:	4b81      	ldr	r3, [pc, #516]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10f      	bne.n	8004c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	4a7c      	ldr	r2, [pc, #496]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7a:	4b77      	ldr	r3, [pc, #476]	@ (8004e58 <HAL_RCC_OscConfig+0x474>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d118      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c86:	4b74      	ldr	r3, [pc, #464]	@ (8004e58 <HAL_RCC_OscConfig+0x474>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a73      	ldr	r2, [pc, #460]	@ (8004e58 <HAL_RCC_OscConfig+0x474>)
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c92:	f7fe f969 	bl	8002f68 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9a:	f7fe f965 	bl	8002f68 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e10c      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <HAL_RCC_OscConfig+0x474>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x2ea>
 8004cc0:	4b64      	ldr	r3, [pc, #400]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc4:	4a63      	ldr	r2, [pc, #396]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ccc:	e01c      	b.n	8004d08 <HAL_RCC_OscConfig+0x324>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x30c>
 8004cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cda:	4a5e      	ldr	r2, [pc, #376]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cee:	e00b      	b.n	8004d08 <HAL_RCC_OscConfig+0x324>
 8004cf0:	4b58      	ldr	r3, [pc, #352]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf4:	4a57      	ldr	r2, [pc, #348]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfc:	4b55      	ldr	r3, [pc, #340]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d00:	4a54      	ldr	r2, [pc, #336]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d02:	f023 0304 	bic.w	r3, r3, #4
 8004d06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fe f92a 	bl	8002f68 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d16:	e00a      	b.n	8004d2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d18:	f7fe f926 	bl	8002f68 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e0cb      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2e:	4b49      	ldr	r3, [pc, #292]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0ee      	beq.n	8004d18 <HAL_RCC_OscConfig+0x334>
 8004d3a:	e014      	b.n	8004d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7fe f914 	bl	8002f68 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fe f910 	bl	8002f68 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0b5      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ee      	bne.n	8004d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6c:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	4a38      	ldr	r2, [pc, #224]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80a1 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d82:	4b34      	ldr	r3, [pc, #208]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d05c      	beq.n	8004e48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d141      	bne.n	8004e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d96:	4b31      	ldr	r3, [pc, #196]	@ (8004e5c <HAL_RCC_OscConfig+0x478>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fe f8e4 	bl	8002f68 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fe f8e0 	bl	8002f68 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e087      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db6:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	019b      	lsls	r3, r3, #6
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	061b      	lsls	r3, r3, #24
 8004de6:	491b      	ldr	r1, [pc, #108]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dec:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <HAL_RCC_OscConfig+0x478>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fe f8b9 	bl	8002f68 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fe f8b5 	bl	8002f68 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e05c      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0c:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x416>
 8004e18:	e054      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_RCC_OscConfig+0x478>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fe f8a2 	bl	8002f68 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fe f89e 	bl	8002f68 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e045      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3a:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x444>
 8004e46:	e03d      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e038      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ec>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d028      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d121      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d11a      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e90:	4013      	ands	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d111      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800

08004ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0cc      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b68      	ldr	r3, [pc, #416]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d90c      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b65      	ldr	r3, [pc, #404]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b63      	ldr	r3, [pc, #396]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0b8      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f28:	4b59      	ldr	r3, [pc, #356]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	4a58      	ldr	r2, [pc, #352]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f40:	4b53      	ldr	r3, [pc, #332]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a52      	ldr	r2, [pc, #328]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b50      	ldr	r3, [pc, #320]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	494d      	ldr	r1, [pc, #308]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d044      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	4b47      	ldr	r3, [pc, #284]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d119      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d003      	beq.n	8004f92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f92:	4b3f      	ldr	r3, [pc, #252]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e06f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e067      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb2:	4b37      	ldr	r3, [pc, #220]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 0203 	bic.w	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	4934      	ldr	r1, [pc, #208]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc4:	f7fd ffd0 	bl	8002f68 <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fcc:	f7fd ffcc 	bl	8002f68 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e04f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 020c 	and.w	r2, r3, #12
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d1eb      	bne.n	8004fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b25      	ldr	r3, [pc, #148]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d20c      	bcs.n	800501c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b22      	ldr	r3, [pc, #136]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b20      	ldr	r3, [pc, #128]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e032      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005028:	4b19      	ldr	r3, [pc, #100]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4916      	ldr	r1, [pc, #88]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	490e      	ldr	r1, [pc, #56]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800505a:	f000 f821 	bl	80050a0 <HAL_RCC_GetSysClockFreq>
 800505e:	4602      	mov	r2, r0
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	490a      	ldr	r1, [pc, #40]	@ (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	5ccb      	ldrb	r3, [r1, r3]
 800506e:	fa22 f303 	lsr.w	r3, r2, r3
 8005072:	4a09      	ldr	r2, [pc, #36]	@ (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005076:	4b09      	ldr	r3, [pc, #36]	@ (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd ff30 	bl	8002ee0 <HAL_InitTick>

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023c00 	.word	0x40023c00
 8005090:	40023800 	.word	0x40023800
 8005094:	08008ee8 	.word	0x08008ee8
 8005098:	2000001c 	.word	0x2000001c
 800509c:	20000070 	.word	0x20000070

080050a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a4:	b094      	sub	sp, #80	@ 0x50
 80050a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b8:	4b79      	ldr	r3, [pc, #484]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCC_GetSysClockFreq+0x40>
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	f200 80e1 	bhi.w	800528c <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0x34>
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d003      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x3a>
 80050d2:	e0db      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d4:	4b73      	ldr	r3, [pc, #460]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050d8:	e0db      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050da:	4b73      	ldr	r3, [pc, #460]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80050dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050de:	e0d8      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e0:	4b6f      	ldr	r3, [pc, #444]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ea:	4b6d      	ldr	r3, [pc, #436]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d063      	beq.n	80051be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f6:	4b6a      	ldr	r3, [pc, #424]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	099b      	lsrs	r3, r3, #6
 80050fc:	2200      	movs	r2, #0
 80050fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005100:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005108:	633b      	str	r3, [r7, #48]	@ 0x30
 800510a:	2300      	movs	r3, #0
 800510c:	637b      	str	r3, [r7, #52]	@ 0x34
 800510e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005112:	4622      	mov	r2, r4
 8005114:	462b      	mov	r3, r5
 8005116:	f04f 0000 	mov.w	r0, #0
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	0159      	lsls	r1, r3, #5
 8005120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005124:	0150      	lsls	r0, r2, #5
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4621      	mov	r1, r4
 800512c:	1a51      	subs	r1, r2, r1
 800512e:	6139      	str	r1, [r7, #16]
 8005130:	4629      	mov	r1, r5
 8005132:	eb63 0301 	sbc.w	r3, r3, r1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005144:	4659      	mov	r1, fp
 8005146:	018b      	lsls	r3, r1, #6
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800514e:	4651      	mov	r1, sl
 8005150:	018a      	lsls	r2, r1, #6
 8005152:	4651      	mov	r1, sl
 8005154:	ebb2 0801 	subs.w	r8, r2, r1
 8005158:	4659      	mov	r1, fp
 800515a:	eb63 0901 	sbc.w	r9, r3, r1
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800516a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005172:	4690      	mov	r8, r2
 8005174:	4699      	mov	r9, r3
 8005176:	4623      	mov	r3, r4
 8005178:	eb18 0303 	adds.w	r3, r8, r3
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	462b      	mov	r3, r5
 8005180:	eb49 0303 	adc.w	r3, r9, r3
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005192:	4629      	mov	r1, r5
 8005194:	024b      	lsls	r3, r1, #9
 8005196:	4621      	mov	r1, r4
 8005198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800519c:	4621      	mov	r1, r4
 800519e:	024a      	lsls	r2, r1, #9
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a6:	2200      	movs	r2, #0
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051b0:	f7fb fd0a 	bl	8000bc8 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4613      	mov	r3, r2
 80051ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051bc:	e058      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051be:	4b38      	ldr	r3, [pc, #224]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	099b      	lsrs	r3, r3, #6
 80051c4:	2200      	movs	r2, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	4611      	mov	r1, r2
 80051ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	f04f 0000 	mov.w	r0, #0
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	0159      	lsls	r1, r3, #5
 80051e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ea:	0150      	lsls	r0, r2, #5
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4641      	mov	r1, r8
 80051f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051f6:	4649      	mov	r1, r9
 80051f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800520c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005210:	ebb2 040a 	subs.w	r4, r2, sl
 8005214:	eb63 050b 	sbc.w	r5, r3, fp
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	00eb      	lsls	r3, r5, #3
 8005222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005226:	00e2      	lsls	r2, r4, #3
 8005228:	4614      	mov	r4, r2
 800522a:	461d      	mov	r5, r3
 800522c:	4643      	mov	r3, r8
 800522e:	18e3      	adds	r3, r4, r3
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	464b      	mov	r3, r9
 8005234:	eb45 0303 	adc.w	r3, r5, r3
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005246:	4629      	mov	r1, r5
 8005248:	028b      	lsls	r3, r1, #10
 800524a:	4621      	mov	r1, r4
 800524c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005250:	4621      	mov	r1, r4
 8005252:	028a      	lsls	r2, r1, #10
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525a:	2200      	movs	r2, #0
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	61fa      	str	r2, [r7, #28]
 8005260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005264:	f7fb fcb0 	bl	8000bc8 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005270:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	0c1b      	lsrs	r3, r3, #16
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	3301      	adds	r3, #1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800528a:	e002      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800528e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005294:	4618      	mov	r0, r3
 8005296:	3750      	adds	r7, #80	@ 0x50
 8005298:	46bd      	mov	sp, r7
 800529a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800
 80052a4:	00f42400 	.word	0x00f42400
 80052a8:	007a1200 	.word	0x007a1200

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b03      	ldr	r3, [pc, #12]	@ (80052c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	2000001c 	.word	0x2000001c

080052c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c8:	f7ff fff0 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052cc:	4602      	mov	r2, r0
 80052ce:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	0a9b      	lsrs	r3, r3, #10
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	4903      	ldr	r1, [pc, #12]	@ (80052e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052da:	5ccb      	ldrb	r3, [r1, r3]
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40023800 	.word	0x40023800
 80052e8:	08008ef8 	.word	0x08008ef8

080052ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800531c:	2b00      	cmp	r3, #0
 800531e:	d075      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005320:	4b91      	ldr	r3, [pc, #580]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005326:	f7fd fe1f 	bl	8002f68 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800532e:	f7fd fe1b 	bl	8002f68 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e189      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005340:	4b8a      	ldr	r3, [pc, #552]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	019a      	lsls	r2, r3, #6
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	071b      	lsls	r3, r3, #28
 8005364:	4981      	ldr	r1, [pc, #516]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01f      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005378:	4b7c      	ldr	r3, [pc, #496]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537e:	0f1b      	lsrs	r3, r3, #28
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	019a      	lsls	r2, r3, #6
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	061b      	lsls	r3, r3, #24
 8005392:	431a      	orrs	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	071b      	lsls	r3, r3, #28
 8005398:	4974      	ldr	r1, [pc, #464]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053a0:	4b72      	ldr	r3, [pc, #456]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053a6:	f023 021f 	bic.w	r2, r3, #31
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	496e      	ldr	r1, [pc, #440]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	019a      	lsls	r2, r3, #6
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	061b      	lsls	r3, r3, #24
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	071b      	lsls	r3, r3, #28
 80053d8:	4964      	ldr	r1, [pc, #400]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053e0:	4b61      	ldr	r3, [pc, #388]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053e6:	f7fd fdbf 	bl	8002f68 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ee:	f7fd fdbb 	bl	8002f68 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e129      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005400:	4b5a      	ldr	r3, [pc, #360]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005420:	2b00      	cmp	r3, #0
 8005422:	d079      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005424:	4b52      	ldr	r3, [pc, #328]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800542a:	f7fd fd9d 	bl	8002f68 <HAL_GetTick>
 800542e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005432:	f7fd fd99 	bl	8002f68 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e107      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005444:	4b49      	ldr	r3, [pc, #292]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800544c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005450:	d0ef      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d020      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800545e:	4b43      	ldr	r3, [pc, #268]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	0f1b      	lsrs	r3, r3, #28
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	019a      	lsls	r2, r3, #6
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	061b      	lsls	r3, r3, #24
 8005478:	431a      	orrs	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	071b      	lsls	r3, r3, #28
 800547e:	493b      	ldr	r1, [pc, #236]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005486:	4b39      	ldr	r3, [pc, #228]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800548c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	3b01      	subs	r3, #1
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	4934      	ldr	r1, [pc, #208]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01e      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054ac:	4b2f      	ldr	r3, [pc, #188]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b2:	0e1b      	lsrs	r3, r3, #24
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	019a      	lsls	r2, r3, #6
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	071b      	lsls	r3, r3, #28
 80054cc:	4927      	ldr	r1, [pc, #156]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054d4:	4b25      	ldr	r3, [pc, #148]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	4922      	ldr	r1, [pc, #136]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054ea:	4b21      	ldr	r3, [pc, #132]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f0:	f7fd fd3a 	bl	8002f68 <HAL_GetTick>
 80054f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054f8:	f7fd fd36 	bl	8002f68 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e0a4      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800550a:	4b18      	ldr	r3, [pc, #96]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005516:	d1ef      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 808b 	beq.w	800563c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b10      	ldr	r3, [pc, #64]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	4a0f      	ldr	r2, [pc, #60]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005534:	6413      	str	r3, [r2, #64]	@ 0x40
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005542:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0b      	ldr	r2, [pc, #44]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800554c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800554e:	f7fd fd0b 	bl	8002f68 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005554:	e010      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005556:	f7fd fd07 	bl	8002f68 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d909      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e075      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005568:	42470068 	.word	0x42470068
 800556c:	40023800 	.word	0x40023800
 8005570:	42470070 	.word	0x42470070
 8005574:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005578:	4b38      	ldr	r3, [pc, #224]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0e8      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005584:	4b36      	ldr	r3, [pc, #216]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02f      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d028      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055b8:	4a29      	ldr	r2, [pc, #164]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055be:	4b28      	ldr	r3, [pc, #160]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d114      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fd fccd 	bl	8002f68 <HAL_GetTick>
 80055ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d0:	e00a      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fd fcc9 	bl	8002f68 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e035      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0ee      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005600:	d10d      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005602:	4b17      	ldr	r3, [pc, #92]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005616:	4912      	ldr	r1, [pc, #72]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005618:	4313      	orrs	r3, r2
 800561a:	608b      	str	r3, [r1, #8]
 800561c:	e005      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800561e:	4b10      	ldr	r3, [pc, #64]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	4a0f      	ldr	r2, [pc, #60]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005624:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005628:	6093      	str	r3, [r2, #8]
 800562a:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800562c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005636:	490a      	ldr	r1, [pc, #40]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005638:	4313      	orrs	r3, r2
 800563a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800564e:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005650:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40007000 	.word	0x40007000
 8005660:	40023800 	.word	0x40023800
 8005664:	42470e40 	.word	0x42470e40
 8005668:	424711e0 	.word	0x424711e0

0800566c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e025      	b.n	80056cc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fc fae9 	bl	8001c6c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f000 fe75 	bl	800639c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	f000 feca 	bl	8006456 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80056e6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d101      	bne.n	80056f2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
 80056f0:	e021      	b.n	8005736 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <HAL_SDRAM_SendCommand+0x2a>
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d118      	bne.n	8005730 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 ff0a 	bl	8006528 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d104      	bne.n	8005726 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2205      	movs	r2, #5
 8005720:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005724:	e006      	b.n	8005734 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800572e:	e001      	b.n	8005734 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d101      	bne.n	8005758 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
 8005756:	e016      	b.n	8005786 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10f      	bne.n	8005784 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 ff15 	bl	80065a2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e07b      	b.n	8005898 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d108      	bne.n	80057ba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057b0:	d009      	beq.n	80057c6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	61da      	str	r2, [r3, #28]
 80057b8:	e005      	b.n	80057c6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fc f94b 	bl	8001a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584a:	ea42 0103 	orr.w	r1, r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005852:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	0c1b      	lsrs	r3, r3, #16
 8005864:	f003 0104 	and.w	r1, r3, #4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	f003 0210 	and.w	r2, r3, #16
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69da      	ldr	r2, [r3, #28]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005886:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e01a      	b.n	80058e8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fc f91e 	bl	8001b0c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005900:	f7fd fb32 	bl	8002f68 <HAL_GetTick>
 8005904:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	e12a      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Transmit+0x36>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e122      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_SPI_Transmit+0x48>
 8005934:	2302      	movs	r3, #2
 8005936:	e11b      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2203      	movs	r2, #3
 8005944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005986:	d10f      	bne.n	80059a8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005996:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b2:	2b40      	cmp	r3, #64	@ 0x40
 80059b4:	d007      	beq.n	80059c6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ce:	d152      	bne.n	8005a76 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_SPI_Transmit+0xee>
 80059d8:	8b7b      	ldrh	r3, [r7, #26]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d145      	bne.n	8005a6a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a02:	e032      	b.n	8005a6a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d112      	bne.n	8005a38 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a16:	881a      	ldrh	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	1c9a      	adds	r2, r3, #2
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a36:	e018      	b.n	8005a6a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a38:	f7fd fa96 	bl	8002f68 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d803      	bhi.n	8005a50 <HAL_SPI_Transmit+0x160>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d102      	bne.n	8005a56 <HAL_SPI_Transmit+0x166>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e082      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1c7      	bne.n	8005a04 <HAL_SPI_Transmit+0x114>
 8005a74:	e053      	b.n	8005b1e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_SPI_Transmit+0x194>
 8005a7e:	8b7b      	ldrh	r3, [r7, #26]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d147      	bne.n	8005b14 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	7812      	ldrb	r2, [r2, #0]
 8005a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005aaa:	e033      	b.n	8005b14 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d113      	bne.n	8005ae2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	7812      	ldrb	r2, [r2, #0]
 8005ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ae0:	e018      	b.n	8005b14 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae2:	f7fd fa41 	bl	8002f68 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d803      	bhi.n	8005afa <HAL_SPI_Transmit+0x20a>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d102      	bne.n	8005b00 <HAL_SPI_Transmit+0x210>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e02d      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1c6      	bne.n	8005aac <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fbe6 	bl	80062f4 <SPI_EndRxTxTransaction>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d001      	beq.n	8005b98 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
 8005b96:	e104      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba0:	d112      	bne.n	8005bc8 <HAL_SPI_Receive+0x50>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2204      	movs	r2, #4
 8005bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f8f3 	bl	8005daa <HAL_SPI_TransmitReceive>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	e0ec      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc8:	f7fd f9ce 	bl	8002f68 <HAL_GetTick>
 8005bcc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_Receive+0x62>
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e0e1      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_SPI_Receive+0x74>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0da      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c3a:	d10f      	bne.n	8005c5c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c66:	2b40      	cmp	r3, #64	@ 0x40
 8005c68:	d007      	beq.n	8005c7a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d170      	bne.n	8005d64 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c82:	e035      	b.n	8005cf0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d115      	bne.n	8005cbe <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f103 020c 	add.w	r2, r3, #12
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cbc:	e018      	b.n	8005cf0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cbe:	f7fd f953 	bl	8002f68 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d803      	bhi.n	8005cd6 <HAL_SPI_Receive+0x15e>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d102      	bne.n	8005cdc <HAL_SPI_Receive+0x164>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e058      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1c4      	bne.n	8005c84 <HAL_SPI_Receive+0x10c>
 8005cfa:	e038      	b.n	8005d6e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d113      	bne.n	8005d32 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d14:	b292      	uxth	r2, r2
 8005d16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	1c9a      	adds	r2, r3, #2
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d30:	e018      	b.n	8005d64 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d32:	f7fd f919 	bl	8002f68 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d803      	bhi.n	8005d4a <HAL_SPI_Receive+0x1d2>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d102      	bne.n	8005d50 <HAL_SPI_Receive+0x1d8>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e01e      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1c6      	bne.n	8005cfc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fa58 	bl	8006228 <SPI_EndRxTransaction>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b08a      	sub	sp, #40	@ 0x28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005db8:	2301      	movs	r3, #1
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dbc:	f7fd f8d4 	bl	8002f68 <HAL_GetTick>
 8005dc0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dc8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dd4:	7ffb      	ldrb	r3, [r7, #31]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d00c      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x4a>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x46>
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d001      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
 8005df2:	e17f      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x5c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x5c>
 8005e00:	887b      	ldrh	r3, [r7, #2]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e174      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x6e>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e16d      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d003      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2205      	movs	r2, #5
 8005e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	887a      	ldrh	r2, [r7, #2]
 8005e44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	887a      	ldrh	r2, [r7, #2]
 8005e4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	887a      	ldrh	r2, [r7, #2]
 8005e56:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e74:	2b40      	cmp	r3, #64	@ 0x40
 8005e76:	d007      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e90:	d17e      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0xf6>
 8005e9a:	8afb      	ldrh	r3, [r7, #22]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d16c      	bne.n	8005f7a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea4:	881a      	ldrh	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb0:	1c9a      	adds	r2, r3, #2
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec4:	e059      	b.n	8005f7a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d11b      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x162>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d016      	beq.n	8005f0c <HAL_SPI_TransmitReceive+0x162>
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d113      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee8:	881a      	ldrh	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef4:	1c9a      	adds	r2, r3, #2
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d119      	bne.n	8005f4e <HAL_SPI_TransmitReceive+0x1a4>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d014      	beq.n	8005f4e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	b292      	uxth	r2, r2
 8005f30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f36:	1c9a      	adds	r2, r3, #2
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f4e:	f7fd f80b 	bl	8002f68 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d80d      	bhi.n	8005f7a <HAL_SPI_TransmitReceive+0x1d0>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d009      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e0bc      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1a0      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x11c>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d19b      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x11c>
 8005f8e:	e082      	b.n	8006096 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_SPI_TransmitReceive+0x1f4>
 8005f98:	8afb      	ldrh	r3, [r7, #22]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d171      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc4:	e05d      	b.n	8006082 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d11c      	bne.n	800600e <HAL_SPI_TransmitReceive+0x264>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d017      	beq.n	800600e <HAL_SPI_TransmitReceive+0x264>
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d114      	bne.n	800600e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b01      	cmp	r3, #1
 800601a:	d119      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x2a6>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d014      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800604c:	2301      	movs	r3, #1
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006050:	f7fc ff8a 	bl	8002f68 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605c:	429a      	cmp	r2, r3
 800605e:	d803      	bhi.n	8006068 <HAL_SPI_TransmitReceive+0x2be>
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d102      	bne.n	800606e <HAL_SPI_TransmitReceive+0x2c4>
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e038      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d19c      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x21c>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d197      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f92a 	bl	80062f4 <SPI_EndRxTxTransaction>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e01d      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80060f2:	2300      	movs	r3, #0
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3728      	adds	r7, #40	@ 0x28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800610a:	b2db      	uxtb	r3, r3
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006128:	f7fc ff1e 	bl	8002f68 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	4413      	add	r3, r2
 8006136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006138:	f7fc ff16 	bl	8002f68 <HAL_GetTick>
 800613c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800613e:	4b39      	ldr	r3, [pc, #228]	@ (8006224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	015b      	lsls	r3, r3, #5
 8006144:	0d1b      	lsrs	r3, r3, #20
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	fb02 f303 	mul.w	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	e054      	b.n	80061fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d050      	beq.n	80061fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006158:	f7fc ff06 	bl	8002f68 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	429a      	cmp	r2, r3
 8006166:	d902      	bls.n	800616e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d13d      	bne.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800617c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006186:	d111      	bne.n	80061ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006190:	d004      	beq.n	800619c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800619a:	d107      	bne.n	80061ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b4:	d10f      	bne.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e017      	b.n	800621a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4013      	ands	r3, r2
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	429a      	cmp	r2, r3
 8006208:	bf0c      	ite	eq
 800620a:	2301      	moveq	r3, #1
 800620c:	2300      	movne	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	429a      	cmp	r2, r3
 8006216:	d19b      	bne.n	8006150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	2000001c 	.word	0x2000001c

08006228 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800623c:	d111      	bne.n	8006262 <SPI_EndRxTransaction+0x3a>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006246:	d004      	beq.n	8006252 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006250:	d107      	bne.n	8006262 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006260:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800626a:	d12a      	bne.n	80062c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006274:	d012      	beq.n	800629c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2200      	movs	r2, #0
 800627e:	2180      	movs	r1, #128	@ 0x80
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ff49 	bl	8006118 <SPI_WaitFlagStateUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d02d      	beq.n	80062e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e026      	b.n	80062ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2200      	movs	r2, #0
 80062a4:	2101      	movs	r1, #1
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff ff36 	bl	8006118 <SPI_WaitFlagStateUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01a      	beq.n	80062e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	f043 0220 	orr.w	r2, r3, #32
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e013      	b.n	80062ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2200      	movs	r2, #0
 80062ca:	2101      	movs	r1, #1
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff ff23 	bl	8006118 <SPI_WaitFlagStateUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e000      	b.n	80062ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2201      	movs	r2, #1
 8006308:	2102      	movs	r1, #2
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff ff04 	bl	8006118 <SPI_WaitFlagStateUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e032      	b.n	800638c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006326:	4b1b      	ldr	r3, [pc, #108]	@ (8006394 <SPI_EndRxTxTransaction+0xa0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1b      	ldr	r2, [pc, #108]	@ (8006398 <SPI_EndRxTxTransaction+0xa4>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	0d5b      	lsrs	r3, r3, #21
 8006332:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006344:	d112      	bne.n	800636c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2200      	movs	r2, #0
 800634e:	2180      	movs	r1, #128	@ 0x80
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff fee1 	bl	8006118 <SPI_WaitFlagStateUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d016      	beq.n	800638a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006360:	f043 0220 	orr.w	r2, r3, #32
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e00f      	b.n	800638c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	3b01      	subs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006382:	2b80      	cmp	r3, #128	@ 0x80
 8006384:	d0f2      	beq.n	800636c <SPI_EndRxTxTransaction+0x78>
 8006386:	e000      	b.n	800638a <SPI_EndRxTxTransaction+0x96>
        break;
 8006388:	bf00      	nop
  }

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	2000001c 	.word	0x2000001c
 8006398:	165e9f81 	.word	0x165e9f81

0800639c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d123      	bne.n	80063f6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80063b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	6851      	ldr	r1, [r2, #4]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	6892      	ldr	r2, [r2, #8]
 80063c2:	4311      	orrs	r1, r2
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	68d2      	ldr	r2, [r2, #12]
 80063c8:	4311      	orrs	r1, r2
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	6912      	ldr	r2, [r2, #16]
 80063ce:	4311      	orrs	r1, r2
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	6952      	ldr	r2, [r2, #20]
 80063d4:	4311      	orrs	r1, r2
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	6992      	ldr	r2, [r2, #24]
 80063da:	4311      	orrs	r1, r2
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	69d2      	ldr	r2, [r2, #28]
 80063e0:	4311      	orrs	r1, r2
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	6a12      	ldr	r2, [r2, #32]
 80063e6:	4311      	orrs	r1, r2
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063ec:	430a      	orrs	r2, r1
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e028      	b.n	8006448 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	69d9      	ldr	r1, [r3, #28]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	4319      	orrs	r1, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640c:	430b      	orrs	r3, r1
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800641c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	6851      	ldr	r1, [r2, #4]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	6892      	ldr	r2, [r2, #8]
 8006428:	4311      	orrs	r1, r2
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	68d2      	ldr	r2, [r2, #12]
 800642e:	4311      	orrs	r1, r2
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	6912      	ldr	r2, [r2, #16]
 8006434:	4311      	orrs	r1, r2
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	6952      	ldr	r2, [r2, #20]
 800643a:	4311      	orrs	r1, r2
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	6992      	ldr	r2, [r2, #24]
 8006440:	430a      	orrs	r2, r1
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d128      	bne.n	80064ba <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	1e59      	subs	r1, r3, #1
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	3b01      	subs	r3, #1
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	4319      	orrs	r1, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	3b01      	subs	r3, #1
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	4319      	orrs	r1, r3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	3b01      	subs	r3, #1
 8006490:	031b      	lsls	r3, r3, #12
 8006492:	4319      	orrs	r1, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	3b01      	subs	r3, #1
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	4319      	orrs	r1, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	051b      	lsls	r3, r3, #20
 80064a6:	4319      	orrs	r1, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	061b      	lsls	r3, r3, #24
 80064b0:	430b      	orrs	r3, r1
 80064b2:	431a      	orrs	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	609a      	str	r2, [r3, #8]
 80064b8:	e02f      	b.n	800651a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	68d2      	ldr	r2, [r2, #12]
 80064ca:	3a01      	subs	r2, #1
 80064cc:	0311      	lsls	r1, r2, #12
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	6952      	ldr	r2, [r2, #20]
 80064d2:	3a01      	subs	r2, #1
 80064d4:	0512      	lsls	r2, r2, #20
 80064d6:	430a      	orrs	r2, r1
 80064d8:	431a      	orrs	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	1e59      	subs	r1, r3, #1
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	4319      	orrs	r1, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	4319      	orrs	r1, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	3b01      	subs	r3, #1
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	4319      	orrs	r1, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	3b01      	subs	r3, #1
 8006510:	061b      	lsls	r3, r3, #24
 8006512:	430b      	orrs	r3, r1
 8006514:	431a      	orrs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	0d9b      	lsrs	r3, r3, #22
 800653e:	059b      	lsls	r3, r3, #22
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	6811      	ldr	r1, [r2, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	6852      	ldr	r2, [r2, #4]
 8006548:	4311      	orrs	r1, r2
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	6892      	ldr	r2, [r2, #8]
 800654e:	3a01      	subs	r2, #1
 8006550:	0152      	lsls	r2, r2, #5
 8006552:	4311      	orrs	r1, r2
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	68d2      	ldr	r2, [r2, #12]
 8006558:	0252      	lsls	r2, r2, #9
 800655a:	430a      	orrs	r2, r1
 800655c:	431a      	orrs	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006562:	f7fc fd01 	bl	8002f68 <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006568:	e010      	b.n	800658c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006570:	d00c      	beq.n	800658c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <FMC_SDRAM_SendCommand+0x60>
 8006578:	f7fc fcf6 	bl	8002f68 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d201      	bcs.n	800658c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e006      	b.n	800659a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b20      	cmp	r3, #32
 8006596:	d0e8      	beq.n	800656a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80065b4:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	0052      	lsls	r2, r2, #1
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <__cvt>:
 80065d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	ec57 6b10 	vmov	r6, r7, d0
 80065d8:	2f00      	cmp	r7, #0
 80065da:	460c      	mov	r4, r1
 80065dc:	4619      	mov	r1, r3
 80065de:	463b      	mov	r3, r7
 80065e0:	bfbb      	ittet	lt
 80065e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065e6:	461f      	movlt	r7, r3
 80065e8:	2300      	movge	r3, #0
 80065ea:	232d      	movlt	r3, #45	@ 0x2d
 80065ec:	700b      	strb	r3, [r1, #0]
 80065ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065f4:	4691      	mov	r9, r2
 80065f6:	f023 0820 	bic.w	r8, r3, #32
 80065fa:	bfbc      	itt	lt
 80065fc:	4632      	movlt	r2, r6
 80065fe:	4616      	movlt	r6, r2
 8006600:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006604:	d005      	beq.n	8006612 <__cvt+0x42>
 8006606:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800660a:	d100      	bne.n	800660e <__cvt+0x3e>
 800660c:	3401      	adds	r4, #1
 800660e:	2102      	movs	r1, #2
 8006610:	e000      	b.n	8006614 <__cvt+0x44>
 8006612:	2103      	movs	r1, #3
 8006614:	ab03      	add	r3, sp, #12
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	ab02      	add	r3, sp, #8
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	ec47 6b10 	vmov	d0, r6, r7
 8006620:	4653      	mov	r3, sl
 8006622:	4622      	mov	r2, r4
 8006624:	f000 fe3c 	bl	80072a0 <_dtoa_r>
 8006628:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800662c:	4605      	mov	r5, r0
 800662e:	d119      	bne.n	8006664 <__cvt+0x94>
 8006630:	f019 0f01 	tst.w	r9, #1
 8006634:	d00e      	beq.n	8006654 <__cvt+0x84>
 8006636:	eb00 0904 	add.w	r9, r0, r4
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	4630      	mov	r0, r6
 8006640:	4639      	mov	r1, r7
 8006642:	f7fa fa51 	bl	8000ae8 <__aeabi_dcmpeq>
 8006646:	b108      	cbz	r0, 800664c <__cvt+0x7c>
 8006648:	f8cd 900c 	str.w	r9, [sp, #12]
 800664c:	2230      	movs	r2, #48	@ 0x30
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	454b      	cmp	r3, r9
 8006652:	d31e      	bcc.n	8006692 <__cvt+0xc2>
 8006654:	9b03      	ldr	r3, [sp, #12]
 8006656:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006658:	1b5b      	subs	r3, r3, r5
 800665a:	4628      	mov	r0, r5
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	b004      	add	sp, #16
 8006660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006664:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006668:	eb00 0904 	add.w	r9, r0, r4
 800666c:	d1e5      	bne.n	800663a <__cvt+0x6a>
 800666e:	7803      	ldrb	r3, [r0, #0]
 8006670:	2b30      	cmp	r3, #48	@ 0x30
 8006672:	d10a      	bne.n	800668a <__cvt+0xba>
 8006674:	2200      	movs	r2, #0
 8006676:	2300      	movs	r3, #0
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7fa fa34 	bl	8000ae8 <__aeabi_dcmpeq>
 8006680:	b918      	cbnz	r0, 800668a <__cvt+0xba>
 8006682:	f1c4 0401 	rsb	r4, r4, #1
 8006686:	f8ca 4000 	str.w	r4, [sl]
 800668a:	f8da 3000 	ldr.w	r3, [sl]
 800668e:	4499      	add	r9, r3
 8006690:	e7d3      	b.n	800663a <__cvt+0x6a>
 8006692:	1c59      	adds	r1, r3, #1
 8006694:	9103      	str	r1, [sp, #12]
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e7d9      	b.n	800664e <__cvt+0x7e>

0800669a <__exponent>:
 800669a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800669c:	2900      	cmp	r1, #0
 800669e:	bfba      	itte	lt
 80066a0:	4249      	neglt	r1, r1
 80066a2:	232d      	movlt	r3, #45	@ 0x2d
 80066a4:	232b      	movge	r3, #43	@ 0x2b
 80066a6:	2909      	cmp	r1, #9
 80066a8:	7002      	strb	r2, [r0, #0]
 80066aa:	7043      	strb	r3, [r0, #1]
 80066ac:	dd29      	ble.n	8006702 <__exponent+0x68>
 80066ae:	f10d 0307 	add.w	r3, sp, #7
 80066b2:	461d      	mov	r5, r3
 80066b4:	270a      	movs	r7, #10
 80066b6:	461a      	mov	r2, r3
 80066b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80066bc:	fb07 1416 	mls	r4, r7, r6, r1
 80066c0:	3430      	adds	r4, #48	@ 0x30
 80066c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066c6:	460c      	mov	r4, r1
 80066c8:	2c63      	cmp	r4, #99	@ 0x63
 80066ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80066ce:	4631      	mov	r1, r6
 80066d0:	dcf1      	bgt.n	80066b6 <__exponent+0x1c>
 80066d2:	3130      	adds	r1, #48	@ 0x30
 80066d4:	1e94      	subs	r4, r2, #2
 80066d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066da:	1c41      	adds	r1, r0, #1
 80066dc:	4623      	mov	r3, r4
 80066de:	42ab      	cmp	r3, r5
 80066e0:	d30a      	bcc.n	80066f8 <__exponent+0x5e>
 80066e2:	f10d 0309 	add.w	r3, sp, #9
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	42ac      	cmp	r4, r5
 80066ea:	bf88      	it	hi
 80066ec:	2300      	movhi	r3, #0
 80066ee:	3302      	adds	r3, #2
 80066f0:	4403      	add	r3, r0
 80066f2:	1a18      	subs	r0, r3, r0
 80066f4:	b003      	add	sp, #12
 80066f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006700:	e7ed      	b.n	80066de <__exponent+0x44>
 8006702:	2330      	movs	r3, #48	@ 0x30
 8006704:	3130      	adds	r1, #48	@ 0x30
 8006706:	7083      	strb	r3, [r0, #2]
 8006708:	70c1      	strb	r1, [r0, #3]
 800670a:	1d03      	adds	r3, r0, #4
 800670c:	e7f1      	b.n	80066f2 <__exponent+0x58>
	...

08006710 <_printf_float>:
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	b08d      	sub	sp, #52	@ 0x34
 8006716:	460c      	mov	r4, r1
 8006718:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800671c:	4616      	mov	r6, r2
 800671e:	461f      	mov	r7, r3
 8006720:	4605      	mov	r5, r0
 8006722:	f000 fcbb 	bl	800709c <_localeconv_r>
 8006726:	6803      	ldr	r3, [r0, #0]
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	4618      	mov	r0, r3
 800672c:	f7f9 fdb0 	bl	8000290 <strlen>
 8006730:	2300      	movs	r3, #0
 8006732:	930a      	str	r3, [sp, #40]	@ 0x28
 8006734:	f8d8 3000 	ldr.w	r3, [r8]
 8006738:	9005      	str	r0, [sp, #20]
 800673a:	3307      	adds	r3, #7
 800673c:	f023 0307 	bic.w	r3, r3, #7
 8006740:	f103 0208 	add.w	r2, r3, #8
 8006744:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006748:	f8d4 b000 	ldr.w	fp, [r4]
 800674c:	f8c8 2000 	str.w	r2, [r8]
 8006750:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006754:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006758:	9307      	str	r3, [sp, #28]
 800675a:	f8cd 8018 	str.w	r8, [sp, #24]
 800675e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006766:	4b9c      	ldr	r3, [pc, #624]	@ (80069d8 <_printf_float+0x2c8>)
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	f7fa f9ee 	bl	8000b4c <__aeabi_dcmpun>
 8006770:	bb70      	cbnz	r0, 80067d0 <_printf_float+0xc0>
 8006772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006776:	4b98      	ldr	r3, [pc, #608]	@ (80069d8 <_printf_float+0x2c8>)
 8006778:	f04f 32ff 	mov.w	r2, #4294967295
 800677c:	f7fa f9c8 	bl	8000b10 <__aeabi_dcmple>
 8006780:	bb30      	cbnz	r0, 80067d0 <_printf_float+0xc0>
 8006782:	2200      	movs	r2, #0
 8006784:	2300      	movs	r3, #0
 8006786:	4640      	mov	r0, r8
 8006788:	4649      	mov	r1, r9
 800678a:	f7fa f9b7 	bl	8000afc <__aeabi_dcmplt>
 800678e:	b110      	cbz	r0, 8006796 <_printf_float+0x86>
 8006790:	232d      	movs	r3, #45	@ 0x2d
 8006792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006796:	4a91      	ldr	r2, [pc, #580]	@ (80069dc <_printf_float+0x2cc>)
 8006798:	4b91      	ldr	r3, [pc, #580]	@ (80069e0 <_printf_float+0x2d0>)
 800679a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800679e:	bf94      	ite	ls
 80067a0:	4690      	movls	r8, r2
 80067a2:	4698      	movhi	r8, r3
 80067a4:	2303      	movs	r3, #3
 80067a6:	6123      	str	r3, [r4, #16]
 80067a8:	f02b 0304 	bic.w	r3, fp, #4
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	f04f 0900 	mov.w	r9, #0
 80067b2:	9700      	str	r7, [sp, #0]
 80067b4:	4633      	mov	r3, r6
 80067b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067b8:	4621      	mov	r1, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f9d2 	bl	8006b64 <_printf_common>
 80067c0:	3001      	adds	r0, #1
 80067c2:	f040 808d 	bne.w	80068e0 <_printf_float+0x1d0>
 80067c6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ca:	b00d      	add	sp, #52	@ 0x34
 80067cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	4649      	mov	r1, r9
 80067d8:	f7fa f9b8 	bl	8000b4c <__aeabi_dcmpun>
 80067dc:	b140      	cbz	r0, 80067f0 <_printf_float+0xe0>
 80067de:	464b      	mov	r3, r9
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bfbc      	itt	lt
 80067e4:	232d      	movlt	r3, #45	@ 0x2d
 80067e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067ea:	4a7e      	ldr	r2, [pc, #504]	@ (80069e4 <_printf_float+0x2d4>)
 80067ec:	4b7e      	ldr	r3, [pc, #504]	@ (80069e8 <_printf_float+0x2d8>)
 80067ee:	e7d4      	b.n	800679a <_printf_float+0x8a>
 80067f0:	6863      	ldr	r3, [r4, #4]
 80067f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067f6:	9206      	str	r2, [sp, #24]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	d13b      	bne.n	8006874 <_printf_float+0x164>
 80067fc:	2306      	movs	r3, #6
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006804:	2300      	movs	r3, #0
 8006806:	6022      	str	r2, [r4, #0]
 8006808:	9303      	str	r3, [sp, #12]
 800680a:	ab0a      	add	r3, sp, #40	@ 0x28
 800680c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006810:	ab09      	add	r3, sp, #36	@ 0x24
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	6861      	ldr	r1, [r4, #4]
 8006816:	ec49 8b10 	vmov	d0, r8, r9
 800681a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800681e:	4628      	mov	r0, r5
 8006820:	f7ff fed6 	bl	80065d0 <__cvt>
 8006824:	9b06      	ldr	r3, [sp, #24]
 8006826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006828:	2b47      	cmp	r3, #71	@ 0x47
 800682a:	4680      	mov	r8, r0
 800682c:	d129      	bne.n	8006882 <_printf_float+0x172>
 800682e:	1cc8      	adds	r0, r1, #3
 8006830:	db02      	blt.n	8006838 <_printf_float+0x128>
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	4299      	cmp	r1, r3
 8006836:	dd41      	ble.n	80068bc <_printf_float+0x1ac>
 8006838:	f1aa 0a02 	sub.w	sl, sl, #2
 800683c:	fa5f fa8a 	uxtb.w	sl, sl
 8006840:	3901      	subs	r1, #1
 8006842:	4652      	mov	r2, sl
 8006844:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006848:	9109      	str	r1, [sp, #36]	@ 0x24
 800684a:	f7ff ff26 	bl	800669a <__exponent>
 800684e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006850:	1813      	adds	r3, r2, r0
 8006852:	2a01      	cmp	r2, #1
 8006854:	4681      	mov	r9, r0
 8006856:	6123      	str	r3, [r4, #16]
 8006858:	dc02      	bgt.n	8006860 <_printf_float+0x150>
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	07d2      	lsls	r2, r2, #31
 800685e:	d501      	bpl.n	8006864 <_printf_float+0x154>
 8006860:	3301      	adds	r3, #1
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0a2      	beq.n	80067b2 <_printf_float+0xa2>
 800686c:	232d      	movs	r3, #45	@ 0x2d
 800686e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006872:	e79e      	b.n	80067b2 <_printf_float+0xa2>
 8006874:	9a06      	ldr	r2, [sp, #24]
 8006876:	2a47      	cmp	r2, #71	@ 0x47
 8006878:	d1c2      	bne.n	8006800 <_printf_float+0xf0>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1c0      	bne.n	8006800 <_printf_float+0xf0>
 800687e:	2301      	movs	r3, #1
 8006880:	e7bd      	b.n	80067fe <_printf_float+0xee>
 8006882:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006886:	d9db      	bls.n	8006840 <_printf_float+0x130>
 8006888:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800688c:	d118      	bne.n	80068c0 <_printf_float+0x1b0>
 800688e:	2900      	cmp	r1, #0
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	dd0b      	ble.n	80068ac <_printf_float+0x19c>
 8006894:	6121      	str	r1, [r4, #16]
 8006896:	b913      	cbnz	r3, 800689e <_printf_float+0x18e>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	07d0      	lsls	r0, r2, #31
 800689c:	d502      	bpl.n	80068a4 <_printf_float+0x194>
 800689e:	3301      	adds	r3, #1
 80068a0:	440b      	add	r3, r1
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068a6:	f04f 0900 	mov.w	r9, #0
 80068aa:	e7db      	b.n	8006864 <_printf_float+0x154>
 80068ac:	b913      	cbnz	r3, 80068b4 <_printf_float+0x1a4>
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	07d2      	lsls	r2, r2, #31
 80068b2:	d501      	bpl.n	80068b8 <_printf_float+0x1a8>
 80068b4:	3302      	adds	r3, #2
 80068b6:	e7f4      	b.n	80068a2 <_printf_float+0x192>
 80068b8:	2301      	movs	r3, #1
 80068ba:	e7f2      	b.n	80068a2 <_printf_float+0x192>
 80068bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068c2:	4299      	cmp	r1, r3
 80068c4:	db05      	blt.n	80068d2 <_printf_float+0x1c2>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6121      	str	r1, [r4, #16]
 80068ca:	07d8      	lsls	r0, r3, #31
 80068cc:	d5ea      	bpl.n	80068a4 <_printf_float+0x194>
 80068ce:	1c4b      	adds	r3, r1, #1
 80068d0:	e7e7      	b.n	80068a2 <_printf_float+0x192>
 80068d2:	2900      	cmp	r1, #0
 80068d4:	bfd4      	ite	le
 80068d6:	f1c1 0202 	rsble	r2, r1, #2
 80068da:	2201      	movgt	r2, #1
 80068dc:	4413      	add	r3, r2
 80068de:	e7e0      	b.n	80068a2 <_printf_float+0x192>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	055a      	lsls	r2, r3, #21
 80068e4:	d407      	bmi.n	80068f6 <_printf_float+0x1e6>
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	4642      	mov	r2, r8
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	d12b      	bne.n	800694c <_printf_float+0x23c>
 80068f4:	e767      	b.n	80067c6 <_printf_float+0xb6>
 80068f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068fa:	f240 80dd 	bls.w	8006ab8 <_printf_float+0x3a8>
 80068fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006902:	2200      	movs	r2, #0
 8006904:	2300      	movs	r3, #0
 8006906:	f7fa f8ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800690a:	2800      	cmp	r0, #0
 800690c:	d033      	beq.n	8006976 <_printf_float+0x266>
 800690e:	4a37      	ldr	r2, [pc, #220]	@ (80069ec <_printf_float+0x2dc>)
 8006910:	2301      	movs	r3, #1
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	f43f af54 	beq.w	80067c6 <_printf_float+0xb6>
 800691e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006922:	4543      	cmp	r3, r8
 8006924:	db02      	blt.n	800692c <_printf_float+0x21c>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	07d8      	lsls	r0, r3, #31
 800692a:	d50f      	bpl.n	800694c <_printf_float+0x23c>
 800692c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006930:	4631      	mov	r1, r6
 8006932:	4628      	mov	r0, r5
 8006934:	47b8      	blx	r7
 8006936:	3001      	adds	r0, #1
 8006938:	f43f af45 	beq.w	80067c6 <_printf_float+0xb6>
 800693c:	f04f 0900 	mov.w	r9, #0
 8006940:	f108 38ff 	add.w	r8, r8, #4294967295
 8006944:	f104 0a1a 	add.w	sl, r4, #26
 8006948:	45c8      	cmp	r8, r9
 800694a:	dc09      	bgt.n	8006960 <_printf_float+0x250>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	079b      	lsls	r3, r3, #30
 8006950:	f100 8103 	bmi.w	8006b5a <_printf_float+0x44a>
 8006954:	68e0      	ldr	r0, [r4, #12]
 8006956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006958:	4298      	cmp	r0, r3
 800695a:	bfb8      	it	lt
 800695c:	4618      	movlt	r0, r3
 800695e:	e734      	b.n	80067ca <_printf_float+0xba>
 8006960:	2301      	movs	r3, #1
 8006962:	4652      	mov	r2, sl
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f af2b 	beq.w	80067c6 <_printf_float+0xb6>
 8006970:	f109 0901 	add.w	r9, r9, #1
 8006974:	e7e8      	b.n	8006948 <_printf_float+0x238>
 8006976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	dc39      	bgt.n	80069f0 <_printf_float+0x2e0>
 800697c:	4a1b      	ldr	r2, [pc, #108]	@ (80069ec <_printf_float+0x2dc>)
 800697e:	2301      	movs	r3, #1
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	f43f af1d 	beq.w	80067c6 <_printf_float+0xb6>
 800698c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006990:	ea59 0303 	orrs.w	r3, r9, r3
 8006994:	d102      	bne.n	800699c <_printf_float+0x28c>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	07d9      	lsls	r1, r3, #31
 800699a:	d5d7      	bpl.n	800694c <_printf_float+0x23c>
 800699c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f af0d 	beq.w	80067c6 <_printf_float+0xb6>
 80069ac:	f04f 0a00 	mov.w	sl, #0
 80069b0:	f104 0b1a 	add.w	fp, r4, #26
 80069b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b6:	425b      	negs	r3, r3
 80069b8:	4553      	cmp	r3, sl
 80069ba:	dc01      	bgt.n	80069c0 <_printf_float+0x2b0>
 80069bc:	464b      	mov	r3, r9
 80069be:	e793      	b.n	80068e8 <_printf_float+0x1d8>
 80069c0:	2301      	movs	r3, #1
 80069c2:	465a      	mov	r2, fp
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f aefb 	beq.w	80067c6 <_printf_float+0xb6>
 80069d0:	f10a 0a01 	add.w	sl, sl, #1
 80069d4:	e7ee      	b.n	80069b4 <_printf_float+0x2a4>
 80069d6:	bf00      	nop
 80069d8:	7fefffff 	.word	0x7fefffff
 80069dc:	0800b5a0 	.word	0x0800b5a0
 80069e0:	0800b5a4 	.word	0x0800b5a4
 80069e4:	0800b5a8 	.word	0x0800b5a8
 80069e8:	0800b5ac 	.word	0x0800b5ac
 80069ec:	0800b5b0 	.word	0x0800b5b0
 80069f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069f6:	4553      	cmp	r3, sl
 80069f8:	bfa8      	it	ge
 80069fa:	4653      	movge	r3, sl
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	4699      	mov	r9, r3
 8006a00:	dc36      	bgt.n	8006a70 <_printf_float+0x360>
 8006a02:	f04f 0b00 	mov.w	fp, #0
 8006a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a0a:	f104 021a 	add.w	r2, r4, #26
 8006a0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a10:	9306      	str	r3, [sp, #24]
 8006a12:	eba3 0309 	sub.w	r3, r3, r9
 8006a16:	455b      	cmp	r3, fp
 8006a18:	dc31      	bgt.n	8006a7e <_printf_float+0x36e>
 8006a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1c:	459a      	cmp	sl, r3
 8006a1e:	dc3a      	bgt.n	8006a96 <_printf_float+0x386>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	07da      	lsls	r2, r3, #31
 8006a24:	d437      	bmi.n	8006a96 <_printf_float+0x386>
 8006a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a28:	ebaa 0903 	sub.w	r9, sl, r3
 8006a2c:	9b06      	ldr	r3, [sp, #24]
 8006a2e:	ebaa 0303 	sub.w	r3, sl, r3
 8006a32:	4599      	cmp	r9, r3
 8006a34:	bfa8      	it	ge
 8006a36:	4699      	movge	r9, r3
 8006a38:	f1b9 0f00 	cmp.w	r9, #0
 8006a3c:	dc33      	bgt.n	8006aa6 <_printf_float+0x396>
 8006a3e:	f04f 0800 	mov.w	r8, #0
 8006a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a46:	f104 0b1a 	add.w	fp, r4, #26
 8006a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a4c:	ebaa 0303 	sub.w	r3, sl, r3
 8006a50:	eba3 0309 	sub.w	r3, r3, r9
 8006a54:	4543      	cmp	r3, r8
 8006a56:	f77f af79 	ble.w	800694c <_printf_float+0x23c>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	465a      	mov	r2, fp
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f aeae 	beq.w	80067c6 <_printf_float+0xb6>
 8006a6a:	f108 0801 	add.w	r8, r8, #1
 8006a6e:	e7ec      	b.n	8006a4a <_printf_float+0x33a>
 8006a70:	4642      	mov	r2, r8
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d1c2      	bne.n	8006a02 <_printf_float+0x2f2>
 8006a7c:	e6a3      	b.n	80067c6 <_printf_float+0xb6>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	9206      	str	r2, [sp, #24]
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f ae9c 	beq.w	80067c6 <_printf_float+0xb6>
 8006a8e:	9a06      	ldr	r2, [sp, #24]
 8006a90:	f10b 0b01 	add.w	fp, fp, #1
 8006a94:	e7bb      	b.n	8006a0e <_printf_float+0x2fe>
 8006a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d1c0      	bne.n	8006a26 <_printf_float+0x316>
 8006aa4:	e68f      	b.n	80067c6 <_printf_float+0xb6>
 8006aa6:	9a06      	ldr	r2, [sp, #24]
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	4442      	add	r2, r8
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b8      	blx	r7
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d1c3      	bne.n	8006a3e <_printf_float+0x32e>
 8006ab6:	e686      	b.n	80067c6 <_printf_float+0xb6>
 8006ab8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006abc:	f1ba 0f01 	cmp.w	sl, #1
 8006ac0:	dc01      	bgt.n	8006ac6 <_printf_float+0x3b6>
 8006ac2:	07db      	lsls	r3, r3, #31
 8006ac4:	d536      	bpl.n	8006b34 <_printf_float+0x424>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4642      	mov	r2, r8
 8006aca:	4631      	mov	r1, r6
 8006acc:	4628      	mov	r0, r5
 8006ace:	47b8      	blx	r7
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	f43f ae78 	beq.w	80067c6 <_printf_float+0xb6>
 8006ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f43f ae70 	beq.w	80067c6 <_printf_float+0xb6>
 8006ae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aea:	2200      	movs	r2, #0
 8006aec:	2300      	movs	r3, #0
 8006aee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006af2:	f7f9 fff9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006af6:	b9c0      	cbnz	r0, 8006b2a <_printf_float+0x41a>
 8006af8:	4653      	mov	r3, sl
 8006afa:	f108 0201 	add.w	r2, r8, #1
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b8      	blx	r7
 8006b04:	3001      	adds	r0, #1
 8006b06:	d10c      	bne.n	8006b22 <_printf_float+0x412>
 8006b08:	e65d      	b.n	80067c6 <_printf_float+0xb6>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	465a      	mov	r2, fp
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	f43f ae56 	beq.w	80067c6 <_printf_float+0xb6>
 8006b1a:	f108 0801 	add.w	r8, r8, #1
 8006b1e:	45d0      	cmp	r8, sl
 8006b20:	dbf3      	blt.n	8006b0a <_printf_float+0x3fa>
 8006b22:	464b      	mov	r3, r9
 8006b24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b28:	e6df      	b.n	80068ea <_printf_float+0x1da>
 8006b2a:	f04f 0800 	mov.w	r8, #0
 8006b2e:	f104 0b1a 	add.w	fp, r4, #26
 8006b32:	e7f4      	b.n	8006b1e <_printf_float+0x40e>
 8006b34:	2301      	movs	r3, #1
 8006b36:	4642      	mov	r2, r8
 8006b38:	e7e1      	b.n	8006afe <_printf_float+0x3ee>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	464a      	mov	r2, r9
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	f43f ae3e 	beq.w	80067c6 <_printf_float+0xb6>
 8006b4a:	f108 0801 	add.w	r8, r8, #1
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b52:	1a5b      	subs	r3, r3, r1
 8006b54:	4543      	cmp	r3, r8
 8006b56:	dcf0      	bgt.n	8006b3a <_printf_float+0x42a>
 8006b58:	e6fc      	b.n	8006954 <_printf_float+0x244>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	f104 0919 	add.w	r9, r4, #25
 8006b62:	e7f4      	b.n	8006b4e <_printf_float+0x43e>

08006b64 <_printf_common>:
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	4616      	mov	r6, r2
 8006b6a:	4698      	mov	r8, r3
 8006b6c:	688a      	ldr	r2, [r1, #8]
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	bfb8      	it	lt
 8006b78:	4613      	movlt	r3, r2
 8006b7a:	6033      	str	r3, [r6, #0]
 8006b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b80:	4607      	mov	r7, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	b10a      	cbz	r2, 8006b8a <_printf_common+0x26>
 8006b86:	3301      	adds	r3, #1
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	0699      	lsls	r1, r3, #26
 8006b8e:	bf42      	ittt	mi
 8006b90:	6833      	ldrmi	r3, [r6, #0]
 8006b92:	3302      	addmi	r3, #2
 8006b94:	6033      	strmi	r3, [r6, #0]
 8006b96:	6825      	ldr	r5, [r4, #0]
 8006b98:	f015 0506 	ands.w	r5, r5, #6
 8006b9c:	d106      	bne.n	8006bac <_printf_common+0x48>
 8006b9e:	f104 0a19 	add.w	sl, r4, #25
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	6832      	ldr	r2, [r6, #0]
 8006ba6:	1a9b      	subs	r3, r3, r2
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dc26      	bgt.n	8006bfa <_printf_common+0x96>
 8006bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	3b00      	subs	r3, #0
 8006bb4:	bf18      	it	ne
 8006bb6:	2301      	movne	r3, #1
 8006bb8:	0692      	lsls	r2, r2, #26
 8006bba:	d42b      	bmi.n	8006c14 <_printf_common+0xb0>
 8006bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c8      	blx	r9
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d01e      	beq.n	8006c08 <_printf_common+0xa4>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	6922      	ldr	r2, [r4, #16]
 8006bce:	f003 0306 	and.w	r3, r3, #6
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	bf02      	ittt	eq
 8006bd6:	68e5      	ldreq	r5, [r4, #12]
 8006bd8:	6833      	ldreq	r3, [r6, #0]
 8006bda:	1aed      	subeq	r5, r5, r3
 8006bdc:	68a3      	ldr	r3, [r4, #8]
 8006bde:	bf0c      	ite	eq
 8006be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be4:	2500      	movne	r5, #0
 8006be6:	4293      	cmp	r3, r2
 8006be8:	bfc4      	itt	gt
 8006bea:	1a9b      	subgt	r3, r3, r2
 8006bec:	18ed      	addgt	r5, r5, r3
 8006bee:	2600      	movs	r6, #0
 8006bf0:	341a      	adds	r4, #26
 8006bf2:	42b5      	cmp	r5, r6
 8006bf4:	d11a      	bne.n	8006c2c <_printf_common+0xc8>
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e008      	b.n	8006c0c <_printf_common+0xa8>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4641      	mov	r1, r8
 8006c00:	4638      	mov	r0, r7
 8006c02:	47c8      	blx	r9
 8006c04:	3001      	adds	r0, #1
 8006c06:	d103      	bne.n	8006c10 <_printf_common+0xac>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	3501      	adds	r5, #1
 8006c12:	e7c6      	b.n	8006ba2 <_printf_common+0x3e>
 8006c14:	18e1      	adds	r1, r4, r3
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	2030      	movs	r0, #48	@ 0x30
 8006c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c1e:	4422      	add	r2, r4
 8006c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c28:	3302      	adds	r3, #2
 8006c2a:	e7c7      	b.n	8006bbc <_printf_common+0x58>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4641      	mov	r1, r8
 8006c32:	4638      	mov	r0, r7
 8006c34:	47c8      	blx	r9
 8006c36:	3001      	adds	r0, #1
 8006c38:	d0e6      	beq.n	8006c08 <_printf_common+0xa4>
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7d9      	b.n	8006bf2 <_printf_common+0x8e>
	...

08006c40 <_printf_i>:
 8006c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	7e0f      	ldrb	r7, [r1, #24]
 8006c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c48:	2f78      	cmp	r7, #120	@ 0x78
 8006c4a:	4691      	mov	r9, r2
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	469a      	mov	sl, r3
 8006c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c56:	d807      	bhi.n	8006c68 <_printf_i+0x28>
 8006c58:	2f62      	cmp	r7, #98	@ 0x62
 8006c5a:	d80a      	bhi.n	8006c72 <_printf_i+0x32>
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	f000 80d2 	beq.w	8006e06 <_printf_i+0x1c6>
 8006c62:	2f58      	cmp	r7, #88	@ 0x58
 8006c64:	f000 80b9 	beq.w	8006dda <_printf_i+0x19a>
 8006c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c70:	e03a      	b.n	8006ce8 <_printf_i+0xa8>
 8006c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c76:	2b15      	cmp	r3, #21
 8006c78:	d8f6      	bhi.n	8006c68 <_printf_i+0x28>
 8006c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c80 <_printf_i+0x40>)
 8006c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c80:	08006cd9 	.word	0x08006cd9
 8006c84:	08006ced 	.word	0x08006ced
 8006c88:	08006c69 	.word	0x08006c69
 8006c8c:	08006c69 	.word	0x08006c69
 8006c90:	08006c69 	.word	0x08006c69
 8006c94:	08006c69 	.word	0x08006c69
 8006c98:	08006ced 	.word	0x08006ced
 8006c9c:	08006c69 	.word	0x08006c69
 8006ca0:	08006c69 	.word	0x08006c69
 8006ca4:	08006c69 	.word	0x08006c69
 8006ca8:	08006c69 	.word	0x08006c69
 8006cac:	08006ded 	.word	0x08006ded
 8006cb0:	08006d17 	.word	0x08006d17
 8006cb4:	08006da7 	.word	0x08006da7
 8006cb8:	08006c69 	.word	0x08006c69
 8006cbc:	08006c69 	.word	0x08006c69
 8006cc0:	08006e0f 	.word	0x08006e0f
 8006cc4:	08006c69 	.word	0x08006c69
 8006cc8:	08006d17 	.word	0x08006d17
 8006ccc:	08006c69 	.word	0x08006c69
 8006cd0:	08006c69 	.word	0x08006c69
 8006cd4:	08006daf 	.word	0x08006daf
 8006cd8:	6833      	ldr	r3, [r6, #0]
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6032      	str	r2, [r6, #0]
 8006ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e09d      	b.n	8006e28 <_printf_i+0x1e8>
 8006cec:	6833      	ldr	r3, [r6, #0]
 8006cee:	6820      	ldr	r0, [r4, #0]
 8006cf0:	1d19      	adds	r1, r3, #4
 8006cf2:	6031      	str	r1, [r6, #0]
 8006cf4:	0606      	lsls	r6, r0, #24
 8006cf6:	d501      	bpl.n	8006cfc <_printf_i+0xbc>
 8006cf8:	681d      	ldr	r5, [r3, #0]
 8006cfa:	e003      	b.n	8006d04 <_printf_i+0xc4>
 8006cfc:	0645      	lsls	r5, r0, #25
 8006cfe:	d5fb      	bpl.n	8006cf8 <_printf_i+0xb8>
 8006d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	da03      	bge.n	8006d10 <_printf_i+0xd0>
 8006d08:	232d      	movs	r3, #45	@ 0x2d
 8006d0a:	426d      	negs	r5, r5
 8006d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d10:	4859      	ldr	r0, [pc, #356]	@ (8006e78 <_printf_i+0x238>)
 8006d12:	230a      	movs	r3, #10
 8006d14:	e011      	b.n	8006d3a <_printf_i+0xfa>
 8006d16:	6821      	ldr	r1, [r4, #0]
 8006d18:	6833      	ldr	r3, [r6, #0]
 8006d1a:	0608      	lsls	r0, r1, #24
 8006d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d20:	d402      	bmi.n	8006d28 <_printf_i+0xe8>
 8006d22:	0649      	lsls	r1, r1, #25
 8006d24:	bf48      	it	mi
 8006d26:	b2ad      	uxthmi	r5, r5
 8006d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d2a:	4853      	ldr	r0, [pc, #332]	@ (8006e78 <_printf_i+0x238>)
 8006d2c:	6033      	str	r3, [r6, #0]
 8006d2e:	bf14      	ite	ne
 8006d30:	230a      	movne	r3, #10
 8006d32:	2308      	moveq	r3, #8
 8006d34:	2100      	movs	r1, #0
 8006d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d3a:	6866      	ldr	r6, [r4, #4]
 8006d3c:	60a6      	str	r6, [r4, #8]
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	bfa2      	ittt	ge
 8006d42:	6821      	ldrge	r1, [r4, #0]
 8006d44:	f021 0104 	bicge.w	r1, r1, #4
 8006d48:	6021      	strge	r1, [r4, #0]
 8006d4a:	b90d      	cbnz	r5, 8006d50 <_printf_i+0x110>
 8006d4c:	2e00      	cmp	r6, #0
 8006d4e:	d04b      	beq.n	8006de8 <_printf_i+0x1a8>
 8006d50:	4616      	mov	r6, r2
 8006d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d56:	fb03 5711 	mls	r7, r3, r1, r5
 8006d5a:	5dc7      	ldrb	r7, [r0, r7]
 8006d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d60:	462f      	mov	r7, r5
 8006d62:	42bb      	cmp	r3, r7
 8006d64:	460d      	mov	r5, r1
 8006d66:	d9f4      	bls.n	8006d52 <_printf_i+0x112>
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d10b      	bne.n	8006d84 <_printf_i+0x144>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	07df      	lsls	r7, r3, #31
 8006d70:	d508      	bpl.n	8006d84 <_printf_i+0x144>
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	6861      	ldr	r1, [r4, #4]
 8006d76:	4299      	cmp	r1, r3
 8006d78:	bfde      	ittt	le
 8006d7a:	2330      	movle	r3, #48	@ 0x30
 8006d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d84:	1b92      	subs	r2, r2, r6
 8006d86:	6122      	str	r2, [r4, #16]
 8006d88:	f8cd a000 	str.w	sl, [sp]
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	aa03      	add	r2, sp, #12
 8006d90:	4621      	mov	r1, r4
 8006d92:	4640      	mov	r0, r8
 8006d94:	f7ff fee6 	bl	8006b64 <_printf_common>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d14a      	bne.n	8006e32 <_printf_i+0x1f2>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	b004      	add	sp, #16
 8006da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	f043 0320 	orr.w	r3, r3, #32
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	4833      	ldr	r0, [pc, #204]	@ (8006e7c <_printf_i+0x23c>)
 8006db0:	2778      	movs	r7, #120	@ 0x78
 8006db2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	6831      	ldr	r1, [r6, #0]
 8006dba:	061f      	lsls	r7, r3, #24
 8006dbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dc0:	d402      	bmi.n	8006dc8 <_printf_i+0x188>
 8006dc2:	065f      	lsls	r7, r3, #25
 8006dc4:	bf48      	it	mi
 8006dc6:	b2ad      	uxthmi	r5, r5
 8006dc8:	6031      	str	r1, [r6, #0]
 8006dca:	07d9      	lsls	r1, r3, #31
 8006dcc:	bf44      	itt	mi
 8006dce:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd2:	6023      	strmi	r3, [r4, #0]
 8006dd4:	b11d      	cbz	r5, 8006dde <_printf_i+0x19e>
 8006dd6:	2310      	movs	r3, #16
 8006dd8:	e7ac      	b.n	8006d34 <_printf_i+0xf4>
 8006dda:	4827      	ldr	r0, [pc, #156]	@ (8006e78 <_printf_i+0x238>)
 8006ddc:	e7e9      	b.n	8006db2 <_printf_i+0x172>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	f023 0320 	bic.w	r3, r3, #32
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	e7f6      	b.n	8006dd6 <_printf_i+0x196>
 8006de8:	4616      	mov	r6, r2
 8006dea:	e7bd      	b.n	8006d68 <_printf_i+0x128>
 8006dec:	6833      	ldr	r3, [r6, #0]
 8006dee:	6825      	ldr	r5, [r4, #0]
 8006df0:	6961      	ldr	r1, [r4, #20]
 8006df2:	1d18      	adds	r0, r3, #4
 8006df4:	6030      	str	r0, [r6, #0]
 8006df6:	062e      	lsls	r6, r5, #24
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	d501      	bpl.n	8006e00 <_printf_i+0x1c0>
 8006dfc:	6019      	str	r1, [r3, #0]
 8006dfe:	e002      	b.n	8006e06 <_printf_i+0x1c6>
 8006e00:	0668      	lsls	r0, r5, #25
 8006e02:	d5fb      	bpl.n	8006dfc <_printf_i+0x1bc>
 8006e04:	8019      	strh	r1, [r3, #0]
 8006e06:	2300      	movs	r3, #0
 8006e08:	6123      	str	r3, [r4, #16]
 8006e0a:	4616      	mov	r6, r2
 8006e0c:	e7bc      	b.n	8006d88 <_printf_i+0x148>
 8006e0e:	6833      	ldr	r3, [r6, #0]
 8006e10:	1d1a      	adds	r2, r3, #4
 8006e12:	6032      	str	r2, [r6, #0]
 8006e14:	681e      	ldr	r6, [r3, #0]
 8006e16:	6862      	ldr	r2, [r4, #4]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7f9 f9e8 	bl	80001f0 <memchr>
 8006e20:	b108      	cbz	r0, 8006e26 <_printf_i+0x1e6>
 8006e22:	1b80      	subs	r0, r0, r6
 8006e24:	6060      	str	r0, [r4, #4]
 8006e26:	6863      	ldr	r3, [r4, #4]
 8006e28:	6123      	str	r3, [r4, #16]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e30:	e7aa      	b.n	8006d88 <_printf_i+0x148>
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	4632      	mov	r2, r6
 8006e36:	4649      	mov	r1, r9
 8006e38:	4640      	mov	r0, r8
 8006e3a:	47d0      	blx	sl
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d0ad      	beq.n	8006d9c <_printf_i+0x15c>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	079b      	lsls	r3, r3, #30
 8006e44:	d413      	bmi.n	8006e6e <_printf_i+0x22e>
 8006e46:	68e0      	ldr	r0, [r4, #12]
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	4298      	cmp	r0, r3
 8006e4c:	bfb8      	it	lt
 8006e4e:	4618      	movlt	r0, r3
 8006e50:	e7a6      	b.n	8006da0 <_printf_i+0x160>
 8006e52:	2301      	movs	r3, #1
 8006e54:	4632      	mov	r2, r6
 8006e56:	4649      	mov	r1, r9
 8006e58:	4640      	mov	r0, r8
 8006e5a:	47d0      	blx	sl
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d09d      	beq.n	8006d9c <_printf_i+0x15c>
 8006e60:	3501      	adds	r5, #1
 8006e62:	68e3      	ldr	r3, [r4, #12]
 8006e64:	9903      	ldr	r1, [sp, #12]
 8006e66:	1a5b      	subs	r3, r3, r1
 8006e68:	42ab      	cmp	r3, r5
 8006e6a:	dcf2      	bgt.n	8006e52 <_printf_i+0x212>
 8006e6c:	e7eb      	b.n	8006e46 <_printf_i+0x206>
 8006e6e:	2500      	movs	r5, #0
 8006e70:	f104 0619 	add.w	r6, r4, #25
 8006e74:	e7f5      	b.n	8006e62 <_printf_i+0x222>
 8006e76:	bf00      	nop
 8006e78:	0800b5b2 	.word	0x0800b5b2
 8006e7c:	0800b5c3 	.word	0x0800b5c3

08006e80 <std>:
 8006e80:	2300      	movs	r3, #0
 8006e82:	b510      	push	{r4, lr}
 8006e84:	4604      	mov	r4, r0
 8006e86:	e9c0 3300 	strd	r3, r3, [r0]
 8006e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e8e:	6083      	str	r3, [r0, #8]
 8006e90:	8181      	strh	r1, [r0, #12]
 8006e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e94:	81c2      	strh	r2, [r0, #14]
 8006e96:	6183      	str	r3, [r0, #24]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	305c      	adds	r0, #92	@ 0x5c
 8006e9e:	f000 f8f4 	bl	800708a <memset>
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <std+0x58>)
 8006ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <std+0x5c>)
 8006ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <std+0x60>)
 8006eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006eae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <std+0x64>)
 8006eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <std+0x68>)
 8006eb4:	6224      	str	r4, [r4, #32]
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d006      	beq.n	8006ec8 <std+0x48>
 8006eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ebe:	4294      	cmp	r4, r2
 8006ec0:	d002      	beq.n	8006ec8 <std+0x48>
 8006ec2:	33d0      	adds	r3, #208	@ 0xd0
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d105      	bne.n	8006ed4 <std+0x54>
 8006ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f000 b958 	b.w	8007184 <__retarget_lock_init_recursive>
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	bf00      	nop
 8006ed8:	08007005 	.word	0x08007005
 8006edc:	08007027 	.word	0x08007027
 8006ee0:	0800705f 	.word	0x0800705f
 8006ee4:	08007083 	.word	0x08007083
 8006ee8:	20000688 	.word	0x20000688

08006eec <stdio_exit_handler>:
 8006eec:	4a02      	ldr	r2, [pc, #8]	@ (8006ef8 <stdio_exit_handler+0xc>)
 8006eee:	4903      	ldr	r1, [pc, #12]	@ (8006efc <stdio_exit_handler+0x10>)
 8006ef0:	4803      	ldr	r0, [pc, #12]	@ (8006f00 <stdio_exit_handler+0x14>)
 8006ef2:	f000 b869 	b.w	8006fc8 <_fwalk_sglue>
 8006ef6:	bf00      	nop
 8006ef8:	20000078 	.word	0x20000078
 8006efc:	08008835 	.word	0x08008835
 8006f00:	20000088 	.word	0x20000088

08006f04 <cleanup_stdio>:
 8006f04:	6841      	ldr	r1, [r0, #4]
 8006f06:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <cleanup_stdio+0x34>)
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	d001      	beq.n	8006f14 <cleanup_stdio+0x10>
 8006f10:	f001 fc90 	bl	8008834 <_fflush_r>
 8006f14:	68a1      	ldr	r1, [r4, #8]
 8006f16:	4b09      	ldr	r3, [pc, #36]	@ (8006f3c <cleanup_stdio+0x38>)
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <cleanup_stdio+0x1e>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f001 fc89 	bl	8008834 <_fflush_r>
 8006f22:	68e1      	ldr	r1, [r4, #12]
 8006f24:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <cleanup_stdio+0x3c>)
 8006f26:	4299      	cmp	r1, r3
 8006f28:	d004      	beq.n	8006f34 <cleanup_stdio+0x30>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f30:	f001 bc80 	b.w	8008834 <_fflush_r>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop
 8006f38:	20000688 	.word	0x20000688
 8006f3c:	200006f0 	.word	0x200006f0
 8006f40:	20000758 	.word	0x20000758

08006f44 <global_stdio_init.part.0>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <global_stdio_init.part.0+0x30>)
 8006f48:	4c0b      	ldr	r4, [pc, #44]	@ (8006f78 <global_stdio_init.part.0+0x34>)
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f7c <global_stdio_init.part.0+0x38>)
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	2200      	movs	r2, #0
 8006f52:	2104      	movs	r1, #4
 8006f54:	f7ff ff94 	bl	8006e80 <std>
 8006f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	2109      	movs	r1, #9
 8006f60:	f7ff ff8e 	bl	8006e80 <std>
 8006f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f68:	2202      	movs	r2, #2
 8006f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6e:	2112      	movs	r1, #18
 8006f70:	f7ff bf86 	b.w	8006e80 <std>
 8006f74:	200007c0 	.word	0x200007c0
 8006f78:	20000688 	.word	0x20000688
 8006f7c:	08006eed 	.word	0x08006eed

08006f80 <__sfp_lock_acquire>:
 8006f80:	4801      	ldr	r0, [pc, #4]	@ (8006f88 <__sfp_lock_acquire+0x8>)
 8006f82:	f000 b900 	b.w	8007186 <__retarget_lock_acquire_recursive>
 8006f86:	bf00      	nop
 8006f88:	200007c9 	.word	0x200007c9

08006f8c <__sfp_lock_release>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	@ (8006f94 <__sfp_lock_release+0x8>)
 8006f8e:	f000 b8fb 	b.w	8007188 <__retarget_lock_release_recursive>
 8006f92:	bf00      	nop
 8006f94:	200007c9 	.word	0x200007c9

08006f98 <__sinit>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	f7ff fff0 	bl	8006f80 <__sfp_lock_acquire>
 8006fa0:	6a23      	ldr	r3, [r4, #32]
 8006fa2:	b11b      	cbz	r3, 8006fac <__sinit+0x14>
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa8:	f7ff bff0 	b.w	8006f8c <__sfp_lock_release>
 8006fac:	4b04      	ldr	r3, [pc, #16]	@ (8006fc0 <__sinit+0x28>)
 8006fae:	6223      	str	r3, [r4, #32]
 8006fb0:	4b04      	ldr	r3, [pc, #16]	@ (8006fc4 <__sinit+0x2c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f5      	bne.n	8006fa4 <__sinit+0xc>
 8006fb8:	f7ff ffc4 	bl	8006f44 <global_stdio_init.part.0>
 8006fbc:	e7f2      	b.n	8006fa4 <__sinit+0xc>
 8006fbe:	bf00      	nop
 8006fc0:	08006f05 	.word	0x08006f05
 8006fc4:	200007c0 	.word	0x200007c0

08006fc8 <_fwalk_sglue>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4607      	mov	r7, r0
 8006fce:	4688      	mov	r8, r1
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006fdc:	d505      	bpl.n	8006fea <_fwalk_sglue+0x22>
 8006fde:	6824      	ldr	r4, [r4, #0]
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	d1f7      	bne.n	8006fd4 <_fwalk_sglue+0xc>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d907      	bls.n	8007000 <_fwalk_sglue+0x38>
 8006ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	d003      	beq.n	8007000 <_fwalk_sglue+0x38>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	47c0      	blx	r8
 8006ffe:	4306      	orrs	r6, r0
 8007000:	3568      	adds	r5, #104	@ 0x68
 8007002:	e7e9      	b.n	8006fd8 <_fwalk_sglue+0x10>

08007004 <__sread>:
 8007004:	b510      	push	{r4, lr}
 8007006:	460c      	mov	r4, r1
 8007008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700c:	f000 f86c 	bl	80070e8 <_read_r>
 8007010:	2800      	cmp	r0, #0
 8007012:	bfab      	itete	ge
 8007014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007016:	89a3      	ldrhlt	r3, [r4, #12]
 8007018:	181b      	addge	r3, r3, r0
 800701a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800701e:	bfac      	ite	ge
 8007020:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007022:	81a3      	strhlt	r3, [r4, #12]
 8007024:	bd10      	pop	{r4, pc}

08007026 <__swrite>:
 8007026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702a:	461f      	mov	r7, r3
 800702c:	898b      	ldrh	r3, [r1, #12]
 800702e:	05db      	lsls	r3, r3, #23
 8007030:	4605      	mov	r5, r0
 8007032:	460c      	mov	r4, r1
 8007034:	4616      	mov	r6, r2
 8007036:	d505      	bpl.n	8007044 <__swrite+0x1e>
 8007038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703c:	2302      	movs	r3, #2
 800703e:	2200      	movs	r2, #0
 8007040:	f000 f840 	bl	80070c4 <_lseek_r>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800704a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800704e:	81a3      	strh	r3, [r4, #12]
 8007050:	4632      	mov	r2, r6
 8007052:	463b      	mov	r3, r7
 8007054:	4628      	mov	r0, r5
 8007056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800705a:	f000 b857 	b.w	800710c <_write_r>

0800705e <__sseek>:
 800705e:	b510      	push	{r4, lr}
 8007060:	460c      	mov	r4, r1
 8007062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007066:	f000 f82d 	bl	80070c4 <_lseek_r>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	bf15      	itete	ne
 8007070:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800707a:	81a3      	strheq	r3, [r4, #12]
 800707c:	bf18      	it	ne
 800707e:	81a3      	strhne	r3, [r4, #12]
 8007080:	bd10      	pop	{r4, pc}

08007082 <__sclose>:
 8007082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007086:	f000 b80d 	b.w	80070a4 <_close_r>

0800708a <memset>:
 800708a:	4402      	add	r2, r0
 800708c:	4603      	mov	r3, r0
 800708e:	4293      	cmp	r3, r2
 8007090:	d100      	bne.n	8007094 <memset+0xa>
 8007092:	4770      	bx	lr
 8007094:	f803 1b01 	strb.w	r1, [r3], #1
 8007098:	e7f9      	b.n	800708e <memset+0x4>
	...

0800709c <_localeconv_r>:
 800709c:	4800      	ldr	r0, [pc, #0]	@ (80070a0 <_localeconv_r+0x4>)
 800709e:	4770      	bx	lr
 80070a0:	200001c4 	.word	0x200001c4

080070a4 <_close_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d06      	ldr	r5, [pc, #24]	@ (80070c0 <_close_r+0x1c>)
 80070a8:	2300      	movs	r3, #0
 80070aa:	4604      	mov	r4, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	602b      	str	r3, [r5, #0]
 80070b0:	f7fa fe71 	bl	8001d96 <_close>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_close_r+0x1a>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_close_r+0x1a>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	200007c4 	.word	0x200007c4

080070c4 <_lseek_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d07      	ldr	r5, [pc, #28]	@ (80070e4 <_lseek_r+0x20>)
 80070c8:	4604      	mov	r4, r0
 80070ca:	4608      	mov	r0, r1
 80070cc:	4611      	mov	r1, r2
 80070ce:	2200      	movs	r2, #0
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f7fa fe86 	bl	8001de4 <_lseek>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_lseek_r+0x1e>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_lseek_r+0x1e>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	200007c4 	.word	0x200007c4

080070e8 <_read_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	@ (8007108 <_read_r+0x20>)
 80070ec:	4604      	mov	r4, r0
 80070ee:	4608      	mov	r0, r1
 80070f0:	4611      	mov	r1, r2
 80070f2:	2200      	movs	r2, #0
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f7fa fe14 	bl	8001d24 <_read>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_read_r+0x1e>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_read_r+0x1e>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	200007c4 	.word	0x200007c4

0800710c <_write_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	@ (800712c <_write_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f7fa fe1f 	bl	8001d5e <_write>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_write_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_write_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	200007c4 	.word	0x200007c4

08007130 <__errno>:
 8007130:	4b01      	ldr	r3, [pc, #4]	@ (8007138 <__errno+0x8>)
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000084 	.word	0x20000084

0800713c <__libc_init_array>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4d0d      	ldr	r5, [pc, #52]	@ (8007174 <__libc_init_array+0x38>)
 8007140:	4c0d      	ldr	r4, [pc, #52]	@ (8007178 <__libc_init_array+0x3c>)
 8007142:	1b64      	subs	r4, r4, r5
 8007144:	10a4      	asrs	r4, r4, #2
 8007146:	2600      	movs	r6, #0
 8007148:	42a6      	cmp	r6, r4
 800714a:	d109      	bne.n	8007160 <__libc_init_array+0x24>
 800714c:	4d0b      	ldr	r5, [pc, #44]	@ (800717c <__libc_init_array+0x40>)
 800714e:	4c0c      	ldr	r4, [pc, #48]	@ (8007180 <__libc_init_array+0x44>)
 8007150:	f001 febe 	bl	8008ed0 <_init>
 8007154:	1b64      	subs	r4, r4, r5
 8007156:	10a4      	asrs	r4, r4, #2
 8007158:	2600      	movs	r6, #0
 800715a:	42a6      	cmp	r6, r4
 800715c:	d105      	bne.n	800716a <__libc_init_array+0x2e>
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	f855 3b04 	ldr.w	r3, [r5], #4
 8007164:	4798      	blx	r3
 8007166:	3601      	adds	r6, #1
 8007168:	e7ee      	b.n	8007148 <__libc_init_array+0xc>
 800716a:	f855 3b04 	ldr.w	r3, [r5], #4
 800716e:	4798      	blx	r3
 8007170:	3601      	adds	r6, #1
 8007172:	e7f2      	b.n	800715a <__libc_init_array+0x1e>
 8007174:	0800b918 	.word	0x0800b918
 8007178:	0800b918 	.word	0x0800b918
 800717c:	0800b918 	.word	0x0800b918
 8007180:	0800b91c 	.word	0x0800b91c

08007184 <__retarget_lock_init_recursive>:
 8007184:	4770      	bx	lr

08007186 <__retarget_lock_acquire_recursive>:
 8007186:	4770      	bx	lr

08007188 <__retarget_lock_release_recursive>:
 8007188:	4770      	bx	lr

0800718a <quorem>:
 800718a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718e:	6903      	ldr	r3, [r0, #16]
 8007190:	690c      	ldr	r4, [r1, #16]
 8007192:	42a3      	cmp	r3, r4
 8007194:	4607      	mov	r7, r0
 8007196:	db7e      	blt.n	8007296 <quorem+0x10c>
 8007198:	3c01      	subs	r4, #1
 800719a:	f101 0814 	add.w	r8, r1, #20
 800719e:	00a3      	lsls	r3, r4, #2
 80071a0:	f100 0514 	add.w	r5, r0, #20
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071b4:	3301      	adds	r3, #1
 80071b6:	429a      	cmp	r2, r3
 80071b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80071c0:	d32e      	bcc.n	8007220 <quorem+0x96>
 80071c2:	f04f 0a00 	mov.w	sl, #0
 80071c6:	46c4      	mov	ip, r8
 80071c8:	46ae      	mov	lr, r5
 80071ca:	46d3      	mov	fp, sl
 80071cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071d0:	b298      	uxth	r0, r3
 80071d2:	fb06 a000 	mla	r0, r6, r0, sl
 80071d6:	0c02      	lsrs	r2, r0, #16
 80071d8:	0c1b      	lsrs	r3, r3, #16
 80071da:	fb06 2303 	mla	r3, r6, r3, r2
 80071de:	f8de 2000 	ldr.w	r2, [lr]
 80071e2:	b280      	uxth	r0, r0
 80071e4:	b292      	uxth	r2, r2
 80071e6:	1a12      	subs	r2, r2, r0
 80071e8:	445a      	add	r2, fp
 80071ea:	f8de 0000 	ldr.w	r0, [lr]
 80071ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071fc:	b292      	uxth	r2, r2
 80071fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007202:	45e1      	cmp	r9, ip
 8007204:	f84e 2b04 	str.w	r2, [lr], #4
 8007208:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800720c:	d2de      	bcs.n	80071cc <quorem+0x42>
 800720e:	9b00      	ldr	r3, [sp, #0]
 8007210:	58eb      	ldr	r3, [r5, r3]
 8007212:	b92b      	cbnz	r3, 8007220 <quorem+0x96>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	3b04      	subs	r3, #4
 8007218:	429d      	cmp	r5, r3
 800721a:	461a      	mov	r2, r3
 800721c:	d32f      	bcc.n	800727e <quorem+0xf4>
 800721e:	613c      	str	r4, [r7, #16]
 8007220:	4638      	mov	r0, r7
 8007222:	f001 f97b 	bl	800851c <__mcmp>
 8007226:	2800      	cmp	r0, #0
 8007228:	db25      	blt.n	8007276 <quorem+0xec>
 800722a:	4629      	mov	r1, r5
 800722c:	2000      	movs	r0, #0
 800722e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007232:	f8d1 c000 	ldr.w	ip, [r1]
 8007236:	fa1f fe82 	uxth.w	lr, r2
 800723a:	fa1f f38c 	uxth.w	r3, ip
 800723e:	eba3 030e 	sub.w	r3, r3, lr
 8007242:	4403      	add	r3, r0
 8007244:	0c12      	lsrs	r2, r2, #16
 8007246:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800724a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800724e:	b29b      	uxth	r3, r3
 8007250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007254:	45c1      	cmp	r9, r8
 8007256:	f841 3b04 	str.w	r3, [r1], #4
 800725a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800725e:	d2e6      	bcs.n	800722e <quorem+0xa4>
 8007260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007264:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007268:	b922      	cbnz	r2, 8007274 <quorem+0xea>
 800726a:	3b04      	subs	r3, #4
 800726c:	429d      	cmp	r5, r3
 800726e:	461a      	mov	r2, r3
 8007270:	d30b      	bcc.n	800728a <quorem+0x100>
 8007272:	613c      	str	r4, [r7, #16]
 8007274:	3601      	adds	r6, #1
 8007276:	4630      	mov	r0, r6
 8007278:	b003      	add	sp, #12
 800727a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	3b04      	subs	r3, #4
 8007282:	2a00      	cmp	r2, #0
 8007284:	d1cb      	bne.n	800721e <quorem+0x94>
 8007286:	3c01      	subs	r4, #1
 8007288:	e7c6      	b.n	8007218 <quorem+0x8e>
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	3b04      	subs	r3, #4
 800728e:	2a00      	cmp	r2, #0
 8007290:	d1ef      	bne.n	8007272 <quorem+0xe8>
 8007292:	3c01      	subs	r4, #1
 8007294:	e7ea      	b.n	800726c <quorem+0xe2>
 8007296:	2000      	movs	r0, #0
 8007298:	e7ee      	b.n	8007278 <quorem+0xee>
 800729a:	0000      	movs	r0, r0
 800729c:	0000      	movs	r0, r0
	...

080072a0 <_dtoa_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	69c7      	ldr	r7, [r0, #28]
 80072a6:	b099      	sub	sp, #100	@ 0x64
 80072a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80072ac:	ec55 4b10 	vmov	r4, r5, d0
 80072b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80072b4:	4683      	mov	fp, r0
 80072b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80072b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072ba:	b97f      	cbnz	r7, 80072dc <_dtoa_r+0x3c>
 80072bc:	2010      	movs	r0, #16
 80072be:	f000 fdfd 	bl	8007ebc <malloc>
 80072c2:	4602      	mov	r2, r0
 80072c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80072c8:	b920      	cbnz	r0, 80072d4 <_dtoa_r+0x34>
 80072ca:	4ba7      	ldr	r3, [pc, #668]	@ (8007568 <_dtoa_r+0x2c8>)
 80072cc:	21ef      	movs	r1, #239	@ 0xef
 80072ce:	48a7      	ldr	r0, [pc, #668]	@ (800756c <_dtoa_r+0x2cc>)
 80072d0:	f001 faf6 	bl	80088c0 <__assert_func>
 80072d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072d8:	6007      	str	r7, [r0, #0]
 80072da:	60c7      	str	r7, [r0, #12]
 80072dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072e0:	6819      	ldr	r1, [r3, #0]
 80072e2:	b159      	cbz	r1, 80072fc <_dtoa_r+0x5c>
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	604a      	str	r2, [r1, #4]
 80072e8:	2301      	movs	r3, #1
 80072ea:	4093      	lsls	r3, r2
 80072ec:	608b      	str	r3, [r1, #8]
 80072ee:	4658      	mov	r0, fp
 80072f0:	f000 feda 	bl	80080a8 <_Bfree>
 80072f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	1e2b      	subs	r3, r5, #0
 80072fe:	bfb9      	ittee	lt
 8007300:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007304:	9303      	strlt	r3, [sp, #12]
 8007306:	2300      	movge	r3, #0
 8007308:	6033      	strge	r3, [r6, #0]
 800730a:	9f03      	ldr	r7, [sp, #12]
 800730c:	4b98      	ldr	r3, [pc, #608]	@ (8007570 <_dtoa_r+0x2d0>)
 800730e:	bfbc      	itt	lt
 8007310:	2201      	movlt	r2, #1
 8007312:	6032      	strlt	r2, [r6, #0]
 8007314:	43bb      	bics	r3, r7
 8007316:	d112      	bne.n	800733e <_dtoa_r+0x9e>
 8007318:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800731a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007324:	4323      	orrs	r3, r4
 8007326:	f000 854d 	beq.w	8007dc4 <_dtoa_r+0xb24>
 800732a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800732c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007584 <_dtoa_r+0x2e4>
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 854f 	beq.w	8007dd4 <_dtoa_r+0xb34>
 8007336:	f10a 0303 	add.w	r3, sl, #3
 800733a:	f000 bd49 	b.w	8007dd0 <_dtoa_r+0xb30>
 800733e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007342:	2200      	movs	r2, #0
 8007344:	ec51 0b17 	vmov	r0, r1, d7
 8007348:	2300      	movs	r3, #0
 800734a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800734e:	f7f9 fbcb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007352:	4680      	mov	r8, r0
 8007354:	b158      	cbz	r0, 800736e <_dtoa_r+0xce>
 8007356:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007358:	2301      	movs	r3, #1
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800735e:	b113      	cbz	r3, 8007366 <_dtoa_r+0xc6>
 8007360:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007362:	4b84      	ldr	r3, [pc, #528]	@ (8007574 <_dtoa_r+0x2d4>)
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007588 <_dtoa_r+0x2e8>
 800736a:	f000 bd33 	b.w	8007dd4 <_dtoa_r+0xb34>
 800736e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007372:	aa16      	add	r2, sp, #88	@ 0x58
 8007374:	a917      	add	r1, sp, #92	@ 0x5c
 8007376:	4658      	mov	r0, fp
 8007378:	f001 f980 	bl	800867c <__d2b>
 800737c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007380:	4681      	mov	r9, r0
 8007382:	2e00      	cmp	r6, #0
 8007384:	d077      	beq.n	8007476 <_dtoa_r+0x1d6>
 8007386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007388:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800738c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007394:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007398:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800739c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073a0:	4619      	mov	r1, r3
 80073a2:	2200      	movs	r2, #0
 80073a4:	4b74      	ldr	r3, [pc, #464]	@ (8007578 <_dtoa_r+0x2d8>)
 80073a6:	f7f8 ff7f 	bl	80002a8 <__aeabi_dsub>
 80073aa:	a369      	add	r3, pc, #420	@ (adr r3, 8007550 <_dtoa_r+0x2b0>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f9 f932 	bl	8000618 <__aeabi_dmul>
 80073b4:	a368      	add	r3, pc, #416	@ (adr r3, 8007558 <_dtoa_r+0x2b8>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f7f8 ff77 	bl	80002ac <__adddf3>
 80073be:	4604      	mov	r4, r0
 80073c0:	4630      	mov	r0, r6
 80073c2:	460d      	mov	r5, r1
 80073c4:	f7f9 f8be 	bl	8000544 <__aeabi_i2d>
 80073c8:	a365      	add	r3, pc, #404	@ (adr r3, 8007560 <_dtoa_r+0x2c0>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f9 f923 	bl	8000618 <__aeabi_dmul>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	f7f8 ff67 	bl	80002ac <__adddf3>
 80073de:	4604      	mov	r4, r0
 80073e0:	460d      	mov	r5, r1
 80073e2:	f7f9 fbc9 	bl	8000b78 <__aeabi_d2iz>
 80073e6:	2200      	movs	r2, #0
 80073e8:	4607      	mov	r7, r0
 80073ea:	2300      	movs	r3, #0
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	f7f9 fb84 	bl	8000afc <__aeabi_dcmplt>
 80073f4:	b140      	cbz	r0, 8007408 <_dtoa_r+0x168>
 80073f6:	4638      	mov	r0, r7
 80073f8:	f7f9 f8a4 	bl	8000544 <__aeabi_i2d>
 80073fc:	4622      	mov	r2, r4
 80073fe:	462b      	mov	r3, r5
 8007400:	f7f9 fb72 	bl	8000ae8 <__aeabi_dcmpeq>
 8007404:	b900      	cbnz	r0, 8007408 <_dtoa_r+0x168>
 8007406:	3f01      	subs	r7, #1
 8007408:	2f16      	cmp	r7, #22
 800740a:	d851      	bhi.n	80074b0 <_dtoa_r+0x210>
 800740c:	4b5b      	ldr	r3, [pc, #364]	@ (800757c <_dtoa_r+0x2dc>)
 800740e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800741a:	f7f9 fb6f 	bl	8000afc <__aeabi_dcmplt>
 800741e:	2800      	cmp	r0, #0
 8007420:	d048      	beq.n	80074b4 <_dtoa_r+0x214>
 8007422:	3f01      	subs	r7, #1
 8007424:	2300      	movs	r3, #0
 8007426:	9312      	str	r3, [sp, #72]	@ 0x48
 8007428:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800742a:	1b9b      	subs	r3, r3, r6
 800742c:	1e5a      	subs	r2, r3, #1
 800742e:	bf44      	itt	mi
 8007430:	f1c3 0801 	rsbmi	r8, r3, #1
 8007434:	2300      	movmi	r3, #0
 8007436:	9208      	str	r2, [sp, #32]
 8007438:	bf54      	ite	pl
 800743a:	f04f 0800 	movpl.w	r8, #0
 800743e:	9308      	strmi	r3, [sp, #32]
 8007440:	2f00      	cmp	r7, #0
 8007442:	db39      	blt.n	80074b8 <_dtoa_r+0x218>
 8007444:	9b08      	ldr	r3, [sp, #32]
 8007446:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007448:	443b      	add	r3, r7
 800744a:	9308      	str	r3, [sp, #32]
 800744c:	2300      	movs	r3, #0
 800744e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007452:	2b09      	cmp	r3, #9
 8007454:	d864      	bhi.n	8007520 <_dtoa_r+0x280>
 8007456:	2b05      	cmp	r3, #5
 8007458:	bfc4      	itt	gt
 800745a:	3b04      	subgt	r3, #4
 800745c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007460:	f1a3 0302 	sub.w	r3, r3, #2
 8007464:	bfcc      	ite	gt
 8007466:	2400      	movgt	r4, #0
 8007468:	2401      	movle	r4, #1
 800746a:	2b03      	cmp	r3, #3
 800746c:	d863      	bhi.n	8007536 <_dtoa_r+0x296>
 800746e:	e8df f003 	tbb	[pc, r3]
 8007472:	372a      	.short	0x372a
 8007474:	5535      	.short	0x5535
 8007476:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800747a:	441e      	add	r6, r3
 800747c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007480:	2b20      	cmp	r3, #32
 8007482:	bfc1      	itttt	gt
 8007484:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007488:	409f      	lslgt	r7, r3
 800748a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800748e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007492:	bfd6      	itet	le
 8007494:	f1c3 0320 	rsble	r3, r3, #32
 8007498:	ea47 0003 	orrgt.w	r0, r7, r3
 800749c:	fa04 f003 	lslle.w	r0, r4, r3
 80074a0:	f7f9 f840 	bl	8000524 <__aeabi_ui2d>
 80074a4:	2201      	movs	r2, #1
 80074a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074aa:	3e01      	subs	r6, #1
 80074ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80074ae:	e777      	b.n	80073a0 <_dtoa_r+0x100>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e7b8      	b.n	8007426 <_dtoa_r+0x186>
 80074b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80074b6:	e7b7      	b.n	8007428 <_dtoa_r+0x188>
 80074b8:	427b      	negs	r3, r7
 80074ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80074bc:	2300      	movs	r3, #0
 80074be:	eba8 0807 	sub.w	r8, r8, r7
 80074c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074c4:	e7c4      	b.n	8007450 <_dtoa_r+0x1b0>
 80074c6:	2300      	movs	r3, #0
 80074c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dc35      	bgt.n	800753c <_dtoa_r+0x29c>
 80074d0:	2301      	movs	r3, #1
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	9307      	str	r3, [sp, #28]
 80074d6:	461a      	mov	r2, r3
 80074d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074da:	e00b      	b.n	80074f4 <_dtoa_r+0x254>
 80074dc:	2301      	movs	r3, #1
 80074de:	e7f3      	b.n	80074c8 <_dtoa_r+0x228>
 80074e0:	2300      	movs	r3, #0
 80074e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074e6:	18fb      	adds	r3, r7, r3
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	3301      	adds	r3, #1
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	bfb8      	it	lt
 80074f2:	2301      	movlt	r3, #1
 80074f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074f8:	2100      	movs	r1, #0
 80074fa:	2204      	movs	r2, #4
 80074fc:	f102 0514 	add.w	r5, r2, #20
 8007500:	429d      	cmp	r5, r3
 8007502:	d91f      	bls.n	8007544 <_dtoa_r+0x2a4>
 8007504:	6041      	str	r1, [r0, #4]
 8007506:	4658      	mov	r0, fp
 8007508:	f000 fd8e 	bl	8008028 <_Balloc>
 800750c:	4682      	mov	sl, r0
 800750e:	2800      	cmp	r0, #0
 8007510:	d13c      	bne.n	800758c <_dtoa_r+0x2ec>
 8007512:	4b1b      	ldr	r3, [pc, #108]	@ (8007580 <_dtoa_r+0x2e0>)
 8007514:	4602      	mov	r2, r0
 8007516:	f240 11af 	movw	r1, #431	@ 0x1af
 800751a:	e6d8      	b.n	80072ce <_dtoa_r+0x2e>
 800751c:	2301      	movs	r3, #1
 800751e:	e7e0      	b.n	80074e2 <_dtoa_r+0x242>
 8007520:	2401      	movs	r4, #1
 8007522:	2300      	movs	r3, #0
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007528:	f04f 33ff 	mov.w	r3, #4294967295
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	9307      	str	r3, [sp, #28]
 8007530:	2200      	movs	r2, #0
 8007532:	2312      	movs	r3, #18
 8007534:	e7d0      	b.n	80074d8 <_dtoa_r+0x238>
 8007536:	2301      	movs	r3, #1
 8007538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800753a:	e7f5      	b.n	8007528 <_dtoa_r+0x288>
 800753c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	9307      	str	r3, [sp, #28]
 8007542:	e7d7      	b.n	80074f4 <_dtoa_r+0x254>
 8007544:	3101      	adds	r1, #1
 8007546:	0052      	lsls	r2, r2, #1
 8007548:	e7d8      	b.n	80074fc <_dtoa_r+0x25c>
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w
 8007550:	636f4361 	.word	0x636f4361
 8007554:	3fd287a7 	.word	0x3fd287a7
 8007558:	8b60c8b3 	.word	0x8b60c8b3
 800755c:	3fc68a28 	.word	0x3fc68a28
 8007560:	509f79fb 	.word	0x509f79fb
 8007564:	3fd34413 	.word	0x3fd34413
 8007568:	0800b5e1 	.word	0x0800b5e1
 800756c:	0800b5f8 	.word	0x0800b5f8
 8007570:	7ff00000 	.word	0x7ff00000
 8007574:	0800b5b1 	.word	0x0800b5b1
 8007578:	3ff80000 	.word	0x3ff80000
 800757c:	0800b6f0 	.word	0x0800b6f0
 8007580:	0800b650 	.word	0x0800b650
 8007584:	0800b5dd 	.word	0x0800b5dd
 8007588:	0800b5b0 	.word	0x0800b5b0
 800758c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007590:	6018      	str	r0, [r3, #0]
 8007592:	9b07      	ldr	r3, [sp, #28]
 8007594:	2b0e      	cmp	r3, #14
 8007596:	f200 80a4 	bhi.w	80076e2 <_dtoa_r+0x442>
 800759a:	2c00      	cmp	r4, #0
 800759c:	f000 80a1 	beq.w	80076e2 <_dtoa_r+0x442>
 80075a0:	2f00      	cmp	r7, #0
 80075a2:	dd33      	ble.n	800760c <_dtoa_r+0x36c>
 80075a4:	4bad      	ldr	r3, [pc, #692]	@ (800785c <_dtoa_r+0x5bc>)
 80075a6:	f007 020f 	and.w	r2, r7, #15
 80075aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ae:	ed93 7b00 	vldr	d7, [r3]
 80075b2:	05f8      	lsls	r0, r7, #23
 80075b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075bc:	d516      	bpl.n	80075ec <_dtoa_r+0x34c>
 80075be:	4ba8      	ldr	r3, [pc, #672]	@ (8007860 <_dtoa_r+0x5c0>)
 80075c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075c8:	f7f9 f950 	bl	800086c <__aeabi_ddiv>
 80075cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d0:	f004 040f 	and.w	r4, r4, #15
 80075d4:	2603      	movs	r6, #3
 80075d6:	4da2      	ldr	r5, [pc, #648]	@ (8007860 <_dtoa_r+0x5c0>)
 80075d8:	b954      	cbnz	r4, 80075f0 <_dtoa_r+0x350>
 80075da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e2:	f7f9 f943 	bl	800086c <__aeabi_ddiv>
 80075e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ea:	e028      	b.n	800763e <_dtoa_r+0x39e>
 80075ec:	2602      	movs	r6, #2
 80075ee:	e7f2      	b.n	80075d6 <_dtoa_r+0x336>
 80075f0:	07e1      	lsls	r1, r4, #31
 80075f2:	d508      	bpl.n	8007606 <_dtoa_r+0x366>
 80075f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075fc:	f7f9 f80c 	bl	8000618 <__aeabi_dmul>
 8007600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007604:	3601      	adds	r6, #1
 8007606:	1064      	asrs	r4, r4, #1
 8007608:	3508      	adds	r5, #8
 800760a:	e7e5      	b.n	80075d8 <_dtoa_r+0x338>
 800760c:	f000 80d2 	beq.w	80077b4 <_dtoa_r+0x514>
 8007610:	427c      	negs	r4, r7
 8007612:	4b92      	ldr	r3, [pc, #584]	@ (800785c <_dtoa_r+0x5bc>)
 8007614:	4d92      	ldr	r5, [pc, #584]	@ (8007860 <_dtoa_r+0x5c0>)
 8007616:	f004 020f 	and.w	r2, r4, #15
 800761a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007626:	f7f8 fff7 	bl	8000618 <__aeabi_dmul>
 800762a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800762e:	1124      	asrs	r4, r4, #4
 8007630:	2300      	movs	r3, #0
 8007632:	2602      	movs	r6, #2
 8007634:	2c00      	cmp	r4, #0
 8007636:	f040 80b2 	bne.w	800779e <_dtoa_r+0x4fe>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1d3      	bne.n	80075e6 <_dtoa_r+0x346>
 800763e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007640:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 80b7 	beq.w	80077b8 <_dtoa_r+0x518>
 800764a:	4b86      	ldr	r3, [pc, #536]	@ (8007864 <_dtoa_r+0x5c4>)
 800764c:	2200      	movs	r2, #0
 800764e:	4620      	mov	r0, r4
 8007650:	4629      	mov	r1, r5
 8007652:	f7f9 fa53 	bl	8000afc <__aeabi_dcmplt>
 8007656:	2800      	cmp	r0, #0
 8007658:	f000 80ae 	beq.w	80077b8 <_dtoa_r+0x518>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 80aa 	beq.w	80077b8 <_dtoa_r+0x518>
 8007664:	9b00      	ldr	r3, [sp, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	dd37      	ble.n	80076da <_dtoa_r+0x43a>
 800766a:	1e7b      	subs	r3, r7, #1
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	4620      	mov	r0, r4
 8007670:	4b7d      	ldr	r3, [pc, #500]	@ (8007868 <_dtoa_r+0x5c8>)
 8007672:	2200      	movs	r2, #0
 8007674:	4629      	mov	r1, r5
 8007676:	f7f8 ffcf 	bl	8000618 <__aeabi_dmul>
 800767a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800767e:	9c00      	ldr	r4, [sp, #0]
 8007680:	3601      	adds	r6, #1
 8007682:	4630      	mov	r0, r6
 8007684:	f7f8 ff5e 	bl	8000544 <__aeabi_i2d>
 8007688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800768c:	f7f8 ffc4 	bl	8000618 <__aeabi_dmul>
 8007690:	4b76      	ldr	r3, [pc, #472]	@ (800786c <_dtoa_r+0x5cc>)
 8007692:	2200      	movs	r2, #0
 8007694:	f7f8 fe0a 	bl	80002ac <__adddf3>
 8007698:	4605      	mov	r5, r0
 800769a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800769e:	2c00      	cmp	r4, #0
 80076a0:	f040 808d 	bne.w	80077be <_dtoa_r+0x51e>
 80076a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a8:	4b71      	ldr	r3, [pc, #452]	@ (8007870 <_dtoa_r+0x5d0>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	f7f8 fdfc 	bl	80002a8 <__aeabi_dsub>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076b8:	462a      	mov	r2, r5
 80076ba:	4633      	mov	r3, r6
 80076bc:	f7f9 fa3c 	bl	8000b38 <__aeabi_dcmpgt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f040 828b 	bne.w	8007bdc <_dtoa_r+0x93c>
 80076c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ca:	462a      	mov	r2, r5
 80076cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076d0:	f7f9 fa14 	bl	8000afc <__aeabi_dcmplt>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f040 8128 	bne.w	800792a <_dtoa_r+0x68a>
 80076da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f2c0 815a 	blt.w	800799e <_dtoa_r+0x6fe>
 80076ea:	2f0e      	cmp	r7, #14
 80076ec:	f300 8157 	bgt.w	800799e <_dtoa_r+0x6fe>
 80076f0:	4b5a      	ldr	r3, [pc, #360]	@ (800785c <_dtoa_r+0x5bc>)
 80076f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076f6:	ed93 7b00 	vldr	d7, [r3]
 80076fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	ed8d 7b00 	vstr	d7, [sp]
 8007702:	da03      	bge.n	800770c <_dtoa_r+0x46c>
 8007704:	9b07      	ldr	r3, [sp, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	f340 8101 	ble.w	800790e <_dtoa_r+0x66e>
 800770c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007710:	4656      	mov	r6, sl
 8007712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	f7f9 f8a7 	bl	800086c <__aeabi_ddiv>
 800771e:	f7f9 fa2b 	bl	8000b78 <__aeabi_d2iz>
 8007722:	4680      	mov	r8, r0
 8007724:	f7f8 ff0e 	bl	8000544 <__aeabi_i2d>
 8007728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800772c:	f7f8 ff74 	bl	8000618 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4620      	mov	r0, r4
 8007736:	4629      	mov	r1, r5
 8007738:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800773c:	f7f8 fdb4 	bl	80002a8 <__aeabi_dsub>
 8007740:	f806 4b01 	strb.w	r4, [r6], #1
 8007744:	9d07      	ldr	r5, [sp, #28]
 8007746:	eba6 040a 	sub.w	r4, r6, sl
 800774a:	42a5      	cmp	r5, r4
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	f040 8117 	bne.w	8007982 <_dtoa_r+0x6e2>
 8007754:	f7f8 fdaa 	bl	80002ac <__adddf3>
 8007758:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	f7f9 f9ea 	bl	8000b38 <__aeabi_dcmpgt>
 8007764:	2800      	cmp	r0, #0
 8007766:	f040 80f9 	bne.w	800795c <_dtoa_r+0x6bc>
 800776a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	f7f9 f9b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007776:	b118      	cbz	r0, 8007780 <_dtoa_r+0x4e0>
 8007778:	f018 0f01 	tst.w	r8, #1
 800777c:	f040 80ee 	bne.w	800795c <_dtoa_r+0x6bc>
 8007780:	4649      	mov	r1, r9
 8007782:	4658      	mov	r0, fp
 8007784:	f000 fc90 	bl	80080a8 <_Bfree>
 8007788:	2300      	movs	r3, #0
 800778a:	7033      	strb	r3, [r6, #0]
 800778c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800778e:	3701      	adds	r7, #1
 8007790:	601f      	str	r7, [r3, #0]
 8007792:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 831d 	beq.w	8007dd4 <_dtoa_r+0xb34>
 800779a:	601e      	str	r6, [r3, #0]
 800779c:	e31a      	b.n	8007dd4 <_dtoa_r+0xb34>
 800779e:	07e2      	lsls	r2, r4, #31
 80077a0:	d505      	bpl.n	80077ae <_dtoa_r+0x50e>
 80077a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077a6:	f7f8 ff37 	bl	8000618 <__aeabi_dmul>
 80077aa:	3601      	adds	r6, #1
 80077ac:	2301      	movs	r3, #1
 80077ae:	1064      	asrs	r4, r4, #1
 80077b0:	3508      	adds	r5, #8
 80077b2:	e73f      	b.n	8007634 <_dtoa_r+0x394>
 80077b4:	2602      	movs	r6, #2
 80077b6:	e742      	b.n	800763e <_dtoa_r+0x39e>
 80077b8:	9c07      	ldr	r4, [sp, #28]
 80077ba:	9704      	str	r7, [sp, #16]
 80077bc:	e761      	b.n	8007682 <_dtoa_r+0x3e2>
 80077be:	4b27      	ldr	r3, [pc, #156]	@ (800785c <_dtoa_r+0x5bc>)
 80077c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077ca:	4454      	add	r4, sl
 80077cc:	2900      	cmp	r1, #0
 80077ce:	d053      	beq.n	8007878 <_dtoa_r+0x5d8>
 80077d0:	4928      	ldr	r1, [pc, #160]	@ (8007874 <_dtoa_r+0x5d4>)
 80077d2:	2000      	movs	r0, #0
 80077d4:	f7f9 f84a 	bl	800086c <__aeabi_ddiv>
 80077d8:	4633      	mov	r3, r6
 80077da:	462a      	mov	r2, r5
 80077dc:	f7f8 fd64 	bl	80002a8 <__aeabi_dsub>
 80077e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077e4:	4656      	mov	r6, sl
 80077e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ea:	f7f9 f9c5 	bl	8000b78 <__aeabi_d2iz>
 80077ee:	4605      	mov	r5, r0
 80077f0:	f7f8 fea8 	bl	8000544 <__aeabi_i2d>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fc:	f7f8 fd54 	bl	80002a8 <__aeabi_dsub>
 8007800:	3530      	adds	r5, #48	@ 0x30
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800780a:	f806 5b01 	strb.w	r5, [r6], #1
 800780e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007812:	f7f9 f973 	bl	8000afc <__aeabi_dcmplt>
 8007816:	2800      	cmp	r0, #0
 8007818:	d171      	bne.n	80078fe <_dtoa_r+0x65e>
 800781a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800781e:	4911      	ldr	r1, [pc, #68]	@ (8007864 <_dtoa_r+0x5c4>)
 8007820:	2000      	movs	r0, #0
 8007822:	f7f8 fd41 	bl	80002a8 <__aeabi_dsub>
 8007826:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800782a:	f7f9 f967 	bl	8000afc <__aeabi_dcmplt>
 800782e:	2800      	cmp	r0, #0
 8007830:	f040 8095 	bne.w	800795e <_dtoa_r+0x6be>
 8007834:	42a6      	cmp	r6, r4
 8007836:	f43f af50 	beq.w	80076da <_dtoa_r+0x43a>
 800783a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800783e:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <_dtoa_r+0x5c8>)
 8007840:	2200      	movs	r2, #0
 8007842:	f7f8 fee9 	bl	8000618 <__aeabi_dmul>
 8007846:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <_dtoa_r+0x5c8>)
 8007848:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800784c:	2200      	movs	r2, #0
 800784e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007852:	f7f8 fee1 	bl	8000618 <__aeabi_dmul>
 8007856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800785a:	e7c4      	b.n	80077e6 <_dtoa_r+0x546>
 800785c:	0800b6f0 	.word	0x0800b6f0
 8007860:	0800b6c8 	.word	0x0800b6c8
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	40240000 	.word	0x40240000
 800786c:	401c0000 	.word	0x401c0000
 8007870:	40140000 	.word	0x40140000
 8007874:	3fe00000 	.word	0x3fe00000
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	f7f8 fecc 	bl	8000618 <__aeabi_dmul>
 8007880:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007884:	9415      	str	r4, [sp, #84]	@ 0x54
 8007886:	4656      	mov	r6, sl
 8007888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788c:	f7f9 f974 	bl	8000b78 <__aeabi_d2iz>
 8007890:	4605      	mov	r5, r0
 8007892:	f7f8 fe57 	bl	8000544 <__aeabi_i2d>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800789e:	f7f8 fd03 	bl	80002a8 <__aeabi_dsub>
 80078a2:	3530      	adds	r5, #48	@ 0x30
 80078a4:	f806 5b01 	strb.w	r5, [r6], #1
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	42a6      	cmp	r6, r4
 80078ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078b2:	f04f 0200 	mov.w	r2, #0
 80078b6:	d124      	bne.n	8007902 <_dtoa_r+0x662>
 80078b8:	4bac      	ldr	r3, [pc, #688]	@ (8007b6c <_dtoa_r+0x8cc>)
 80078ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078be:	f7f8 fcf5 	bl	80002ac <__adddf3>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ca:	f7f9 f935 	bl	8000b38 <__aeabi_dcmpgt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d145      	bne.n	800795e <_dtoa_r+0x6be>
 80078d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078d6:	49a5      	ldr	r1, [pc, #660]	@ (8007b6c <_dtoa_r+0x8cc>)
 80078d8:	2000      	movs	r0, #0
 80078da:	f7f8 fce5 	bl	80002a8 <__aeabi_dsub>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e6:	f7f9 f909 	bl	8000afc <__aeabi_dcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f43f aef5 	beq.w	80076da <_dtoa_r+0x43a>
 80078f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078f2:	1e73      	subs	r3, r6, #1
 80078f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80078f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078fa:	2b30      	cmp	r3, #48	@ 0x30
 80078fc:	d0f8      	beq.n	80078f0 <_dtoa_r+0x650>
 80078fe:	9f04      	ldr	r7, [sp, #16]
 8007900:	e73e      	b.n	8007780 <_dtoa_r+0x4e0>
 8007902:	4b9b      	ldr	r3, [pc, #620]	@ (8007b70 <_dtoa_r+0x8d0>)
 8007904:	f7f8 fe88 	bl	8000618 <__aeabi_dmul>
 8007908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800790c:	e7bc      	b.n	8007888 <_dtoa_r+0x5e8>
 800790e:	d10c      	bne.n	800792a <_dtoa_r+0x68a>
 8007910:	4b98      	ldr	r3, [pc, #608]	@ (8007b74 <_dtoa_r+0x8d4>)
 8007912:	2200      	movs	r2, #0
 8007914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007918:	f7f8 fe7e 	bl	8000618 <__aeabi_dmul>
 800791c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007920:	f7f9 f900 	bl	8000b24 <__aeabi_dcmpge>
 8007924:	2800      	cmp	r0, #0
 8007926:	f000 8157 	beq.w	8007bd8 <_dtoa_r+0x938>
 800792a:	2400      	movs	r4, #0
 800792c:	4625      	mov	r5, r4
 800792e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007930:	43db      	mvns	r3, r3
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	4656      	mov	r6, sl
 8007936:	2700      	movs	r7, #0
 8007938:	4621      	mov	r1, r4
 800793a:	4658      	mov	r0, fp
 800793c:	f000 fbb4 	bl	80080a8 <_Bfree>
 8007940:	2d00      	cmp	r5, #0
 8007942:	d0dc      	beq.n	80078fe <_dtoa_r+0x65e>
 8007944:	b12f      	cbz	r7, 8007952 <_dtoa_r+0x6b2>
 8007946:	42af      	cmp	r7, r5
 8007948:	d003      	beq.n	8007952 <_dtoa_r+0x6b2>
 800794a:	4639      	mov	r1, r7
 800794c:	4658      	mov	r0, fp
 800794e:	f000 fbab 	bl	80080a8 <_Bfree>
 8007952:	4629      	mov	r1, r5
 8007954:	4658      	mov	r0, fp
 8007956:	f000 fba7 	bl	80080a8 <_Bfree>
 800795a:	e7d0      	b.n	80078fe <_dtoa_r+0x65e>
 800795c:	9704      	str	r7, [sp, #16]
 800795e:	4633      	mov	r3, r6
 8007960:	461e      	mov	r6, r3
 8007962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007966:	2a39      	cmp	r2, #57	@ 0x39
 8007968:	d107      	bne.n	800797a <_dtoa_r+0x6da>
 800796a:	459a      	cmp	sl, r3
 800796c:	d1f8      	bne.n	8007960 <_dtoa_r+0x6c0>
 800796e:	9a04      	ldr	r2, [sp, #16]
 8007970:	3201      	adds	r2, #1
 8007972:	9204      	str	r2, [sp, #16]
 8007974:	2230      	movs	r2, #48	@ 0x30
 8007976:	f88a 2000 	strb.w	r2, [sl]
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	3201      	adds	r2, #1
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	e7bd      	b.n	80078fe <_dtoa_r+0x65e>
 8007982:	4b7b      	ldr	r3, [pc, #492]	@ (8007b70 <_dtoa_r+0x8d0>)
 8007984:	2200      	movs	r2, #0
 8007986:	f7f8 fe47 	bl	8000618 <__aeabi_dmul>
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	460d      	mov	r5, r1
 8007992:	f7f9 f8a9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f aebb 	beq.w	8007712 <_dtoa_r+0x472>
 800799c:	e6f0      	b.n	8007780 <_dtoa_r+0x4e0>
 800799e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	f000 80db 	beq.w	8007b5c <_dtoa_r+0x8bc>
 80079a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079a8:	2a01      	cmp	r2, #1
 80079aa:	f300 80bf 	bgt.w	8007b2c <_dtoa_r+0x88c>
 80079ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	f000 80b7 	beq.w	8007b24 <_dtoa_r+0x884>
 80079b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079bc:	4646      	mov	r6, r8
 80079be:	9a08      	ldr	r2, [sp, #32]
 80079c0:	2101      	movs	r1, #1
 80079c2:	441a      	add	r2, r3
 80079c4:	4658      	mov	r0, fp
 80079c6:	4498      	add	r8, r3
 80079c8:	9208      	str	r2, [sp, #32]
 80079ca:	f000 fc21 	bl	8008210 <__i2b>
 80079ce:	4605      	mov	r5, r0
 80079d0:	b15e      	cbz	r6, 80079ea <_dtoa_r+0x74a>
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dd08      	ble.n	80079ea <_dtoa_r+0x74a>
 80079d8:	42b3      	cmp	r3, r6
 80079da:	9a08      	ldr	r2, [sp, #32]
 80079dc:	bfa8      	it	ge
 80079de:	4633      	movge	r3, r6
 80079e0:	eba8 0803 	sub.w	r8, r8, r3
 80079e4:	1af6      	subs	r6, r6, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	9308      	str	r3, [sp, #32]
 80079ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ec:	b1f3      	cbz	r3, 8007a2c <_dtoa_r+0x78c>
 80079ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80b7 	beq.w	8007b64 <_dtoa_r+0x8c4>
 80079f6:	b18c      	cbz	r4, 8007a1c <_dtoa_r+0x77c>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4622      	mov	r2, r4
 80079fc:	4658      	mov	r0, fp
 80079fe:	f000 fcc7 	bl	8008390 <__pow5mult>
 8007a02:	464a      	mov	r2, r9
 8007a04:	4601      	mov	r1, r0
 8007a06:	4605      	mov	r5, r0
 8007a08:	4658      	mov	r0, fp
 8007a0a:	f000 fc17 	bl	800823c <__multiply>
 8007a0e:	4649      	mov	r1, r9
 8007a10:	9004      	str	r0, [sp, #16]
 8007a12:	4658      	mov	r0, fp
 8007a14:	f000 fb48 	bl	80080a8 <_Bfree>
 8007a18:	9b04      	ldr	r3, [sp, #16]
 8007a1a:	4699      	mov	r9, r3
 8007a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a1e:	1b1a      	subs	r2, r3, r4
 8007a20:	d004      	beq.n	8007a2c <_dtoa_r+0x78c>
 8007a22:	4649      	mov	r1, r9
 8007a24:	4658      	mov	r0, fp
 8007a26:	f000 fcb3 	bl	8008390 <__pow5mult>
 8007a2a:	4681      	mov	r9, r0
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4658      	mov	r0, fp
 8007a30:	f000 fbee 	bl	8008210 <__i2b>
 8007a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a36:	4604      	mov	r4, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 81cf 	beq.w	8007ddc <_dtoa_r+0xb3c>
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4601      	mov	r1, r0
 8007a42:	4658      	mov	r0, fp
 8007a44:	f000 fca4 	bl	8008390 <__pow5mult>
 8007a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	f300 8095 	bgt.w	8007b7c <_dtoa_r+0x8dc>
 8007a52:	9b02      	ldr	r3, [sp, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f040 8087 	bne.w	8007b68 <_dtoa_r+0x8c8>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 8089 	bne.w	8007b78 <_dtoa_r+0x8d8>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a6c:	0d1b      	lsrs	r3, r3, #20
 8007a6e:	051b      	lsls	r3, r3, #20
 8007a70:	b12b      	cbz	r3, 8007a7e <_dtoa_r+0x7de>
 8007a72:	9b08      	ldr	r3, [sp, #32]
 8007a74:	3301      	adds	r3, #1
 8007a76:	9308      	str	r3, [sp, #32]
 8007a78:	f108 0801 	add.w	r8, r8, #1
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 81b0 	beq.w	8007de8 <_dtoa_r+0xb48>
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a8e:	6918      	ldr	r0, [r3, #16]
 8007a90:	f000 fb72 	bl	8008178 <__hi0bits>
 8007a94:	f1c0 0020 	rsb	r0, r0, #32
 8007a98:	9b08      	ldr	r3, [sp, #32]
 8007a9a:	4418      	add	r0, r3
 8007a9c:	f010 001f 	ands.w	r0, r0, #31
 8007aa0:	d077      	beq.n	8007b92 <_dtoa_r+0x8f2>
 8007aa2:	f1c0 0320 	rsb	r3, r0, #32
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	dd6b      	ble.n	8007b82 <_dtoa_r+0x8e2>
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	f1c0 001c 	rsb	r0, r0, #28
 8007ab0:	4403      	add	r3, r0
 8007ab2:	4480      	add	r8, r0
 8007ab4:	4406      	add	r6, r0
 8007ab6:	9308      	str	r3, [sp, #32]
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	dd05      	ble.n	8007aca <_dtoa_r+0x82a>
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f000 fcbe 	bl	8008444 <__lshift>
 8007ac8:	4681      	mov	r9, r0
 8007aca:	9b08      	ldr	r3, [sp, #32]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dd05      	ble.n	8007adc <_dtoa_r+0x83c>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f000 fcb5 	bl	8008444 <__lshift>
 8007ada:	4604      	mov	r4, r0
 8007adc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d059      	beq.n	8007b96 <_dtoa_r+0x8f6>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4648      	mov	r0, r9
 8007ae6:	f000 fd19 	bl	800851c <__mcmp>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	da53      	bge.n	8007b96 <_dtoa_r+0x8f6>
 8007aee:	1e7b      	subs	r3, r7, #1
 8007af0:	9304      	str	r3, [sp, #16]
 8007af2:	4649      	mov	r1, r9
 8007af4:	2300      	movs	r3, #0
 8007af6:	220a      	movs	r2, #10
 8007af8:	4658      	mov	r0, fp
 8007afa:	f000 faf7 	bl	80080ec <__multadd>
 8007afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b00:	4681      	mov	r9, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8172 	beq.w	8007dec <_dtoa_r+0xb4c>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	220a      	movs	r2, #10
 8007b0e:	4658      	mov	r0, fp
 8007b10:	f000 faec 	bl	80080ec <__multadd>
 8007b14:	9b00      	ldr	r3, [sp, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	4605      	mov	r5, r0
 8007b1a:	dc67      	bgt.n	8007bec <_dtoa_r+0x94c>
 8007b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	dc41      	bgt.n	8007ba6 <_dtoa_r+0x906>
 8007b22:	e063      	b.n	8007bec <_dtoa_r+0x94c>
 8007b24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b2a:	e746      	b.n	80079ba <_dtoa_r+0x71a>
 8007b2c:	9b07      	ldr	r3, [sp, #28]
 8007b2e:	1e5c      	subs	r4, r3, #1
 8007b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b32:	42a3      	cmp	r3, r4
 8007b34:	bfbf      	itttt	lt
 8007b36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b3c:	1ae3      	sublt	r3, r4, r3
 8007b3e:	bfb4      	ite	lt
 8007b40:	18d2      	addlt	r2, r2, r3
 8007b42:	1b1c      	subge	r4, r3, r4
 8007b44:	9b07      	ldr	r3, [sp, #28]
 8007b46:	bfbc      	itt	lt
 8007b48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b4a:	2400      	movlt	r4, #0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bfb5      	itete	lt
 8007b50:	eba8 0603 	sublt.w	r6, r8, r3
 8007b54:	9b07      	ldrge	r3, [sp, #28]
 8007b56:	2300      	movlt	r3, #0
 8007b58:	4646      	movge	r6, r8
 8007b5a:	e730      	b.n	80079be <_dtoa_r+0x71e>
 8007b5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b60:	4646      	mov	r6, r8
 8007b62:	e735      	b.n	80079d0 <_dtoa_r+0x730>
 8007b64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b66:	e75c      	b.n	8007a22 <_dtoa_r+0x782>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e788      	b.n	8007a7e <_dtoa_r+0x7de>
 8007b6c:	3fe00000 	.word	0x3fe00000
 8007b70:	40240000 	.word	0x40240000
 8007b74:	40140000 	.word	0x40140000
 8007b78:	9b02      	ldr	r3, [sp, #8]
 8007b7a:	e780      	b.n	8007a7e <_dtoa_r+0x7de>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b80:	e782      	b.n	8007a88 <_dtoa_r+0x7e8>
 8007b82:	d099      	beq.n	8007ab8 <_dtoa_r+0x818>
 8007b84:	9a08      	ldr	r2, [sp, #32]
 8007b86:	331c      	adds	r3, #28
 8007b88:	441a      	add	r2, r3
 8007b8a:	4498      	add	r8, r3
 8007b8c:	441e      	add	r6, r3
 8007b8e:	9208      	str	r2, [sp, #32]
 8007b90:	e792      	b.n	8007ab8 <_dtoa_r+0x818>
 8007b92:	4603      	mov	r3, r0
 8007b94:	e7f6      	b.n	8007b84 <_dtoa_r+0x8e4>
 8007b96:	9b07      	ldr	r3, [sp, #28]
 8007b98:	9704      	str	r7, [sp, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dc20      	bgt.n	8007be0 <_dtoa_r+0x940>
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	dd1e      	ble.n	8007be4 <_dtoa_r+0x944>
 8007ba6:	9b00      	ldr	r3, [sp, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f47f aec0 	bne.w	800792e <_dtoa_r+0x68e>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f000 fa9a 	bl	80080ec <__multadd>
 8007bb8:	4601      	mov	r1, r0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f000 fcad 	bl	800851c <__mcmp>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f77f aeb3 	ble.w	800792e <_dtoa_r+0x68e>
 8007bc8:	4656      	mov	r6, sl
 8007bca:	2331      	movs	r3, #49	@ 0x31
 8007bcc:	f806 3b01 	strb.w	r3, [r6], #1
 8007bd0:	9b04      	ldr	r3, [sp, #16]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	e6ae      	b.n	8007936 <_dtoa_r+0x696>
 8007bd8:	9c07      	ldr	r4, [sp, #28]
 8007bda:	9704      	str	r7, [sp, #16]
 8007bdc:	4625      	mov	r5, r4
 8007bde:	e7f3      	b.n	8007bc8 <_dtoa_r+0x928>
 8007be0:	9b07      	ldr	r3, [sp, #28]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8104 	beq.w	8007df4 <_dtoa_r+0xb54>
 8007bec:	2e00      	cmp	r6, #0
 8007bee:	dd05      	ble.n	8007bfc <_dtoa_r+0x95c>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	4658      	mov	r0, fp
 8007bf6:	f000 fc25 	bl	8008444 <__lshift>
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d05a      	beq.n	8007cb8 <_dtoa_r+0xa18>
 8007c02:	6869      	ldr	r1, [r5, #4]
 8007c04:	4658      	mov	r0, fp
 8007c06:	f000 fa0f 	bl	8008028 <_Balloc>
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	b928      	cbnz	r0, 8007c1a <_dtoa_r+0x97a>
 8007c0e:	4b84      	ldr	r3, [pc, #528]	@ (8007e20 <_dtoa_r+0xb80>)
 8007c10:	4602      	mov	r2, r0
 8007c12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c16:	f7ff bb5a 	b.w	80072ce <_dtoa_r+0x2e>
 8007c1a:	692a      	ldr	r2, [r5, #16]
 8007c1c:	3202      	adds	r2, #2
 8007c1e:	0092      	lsls	r2, r2, #2
 8007c20:	f105 010c 	add.w	r1, r5, #12
 8007c24:	300c      	adds	r0, #12
 8007c26:	f000 fe3d 	bl	80088a4 <memcpy>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4658      	mov	r0, fp
 8007c30:	f000 fc08 	bl	8008444 <__lshift>
 8007c34:	f10a 0301 	add.w	r3, sl, #1
 8007c38:	9307      	str	r3, [sp, #28]
 8007c3a:	9b00      	ldr	r3, [sp, #0]
 8007c3c:	4453      	add	r3, sl
 8007c3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	462f      	mov	r7, r5
 8007c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	3b01      	subs	r3, #1
 8007c52:	4648      	mov	r0, r9
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	f7ff fa98 	bl	800718a <quorem>
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	9002      	str	r0, [sp, #8]
 8007c5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c62:	4648      	mov	r0, r9
 8007c64:	f000 fc5a 	bl	800851c <__mcmp>
 8007c68:	462a      	mov	r2, r5
 8007c6a:	9008      	str	r0, [sp, #32]
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4658      	mov	r0, fp
 8007c70:	f000 fc70 	bl	8008554 <__mdiff>
 8007c74:	68c2      	ldr	r2, [r0, #12]
 8007c76:	4606      	mov	r6, r0
 8007c78:	bb02      	cbnz	r2, 8007cbc <_dtoa_r+0xa1c>
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4648      	mov	r0, r9
 8007c7e:	f000 fc4d 	bl	800851c <__mcmp>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4631      	mov	r1, r6
 8007c86:	4658      	mov	r0, fp
 8007c88:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c8a:	f000 fa0d 	bl	80080a8 <_Bfree>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c92:	9e07      	ldr	r6, [sp, #28]
 8007c94:	ea43 0102 	orr.w	r1, r3, r2
 8007c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c9a:	4319      	orrs	r1, r3
 8007c9c:	d110      	bne.n	8007cc0 <_dtoa_r+0xa20>
 8007c9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ca2:	d029      	beq.n	8007cf8 <_dtoa_r+0xa58>
 8007ca4:	9b08      	ldr	r3, [sp, #32]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dd02      	ble.n	8007cb0 <_dtoa_r+0xa10>
 8007caa:	9b02      	ldr	r3, [sp, #8]
 8007cac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007cb0:	9b00      	ldr	r3, [sp, #0]
 8007cb2:	f883 8000 	strb.w	r8, [r3]
 8007cb6:	e63f      	b.n	8007938 <_dtoa_r+0x698>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e7bb      	b.n	8007c34 <_dtoa_r+0x994>
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	e7e1      	b.n	8007c84 <_dtoa_r+0x9e4>
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	db04      	blt.n	8007cd0 <_dtoa_r+0xa30>
 8007cc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	d120      	bne.n	8007d12 <_dtoa_r+0xa72>
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	dded      	ble.n	8007cb0 <_dtoa_r+0xa10>
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4658      	mov	r0, fp
 8007cda:	f000 fbb3 	bl	8008444 <__lshift>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4681      	mov	r9, r0
 8007ce2:	f000 fc1b 	bl	800851c <__mcmp>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	dc03      	bgt.n	8007cf2 <_dtoa_r+0xa52>
 8007cea:	d1e1      	bne.n	8007cb0 <_dtoa_r+0xa10>
 8007cec:	f018 0f01 	tst.w	r8, #1
 8007cf0:	d0de      	beq.n	8007cb0 <_dtoa_r+0xa10>
 8007cf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cf6:	d1d8      	bne.n	8007caa <_dtoa_r+0xa0a>
 8007cf8:	9a00      	ldr	r2, [sp, #0]
 8007cfa:	2339      	movs	r3, #57	@ 0x39
 8007cfc:	7013      	strb	r3, [r2, #0]
 8007cfe:	4633      	mov	r3, r6
 8007d00:	461e      	mov	r6, r3
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d08:	2a39      	cmp	r2, #57	@ 0x39
 8007d0a:	d052      	beq.n	8007db2 <_dtoa_r+0xb12>
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	e612      	b.n	8007938 <_dtoa_r+0x698>
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	dd07      	ble.n	8007d26 <_dtoa_r+0xa86>
 8007d16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d1a:	d0ed      	beq.n	8007cf8 <_dtoa_r+0xa58>
 8007d1c:	9a00      	ldr	r2, [sp, #0]
 8007d1e:	f108 0301 	add.w	r3, r8, #1
 8007d22:	7013      	strb	r3, [r2, #0]
 8007d24:	e608      	b.n	8007938 <_dtoa_r+0x698>
 8007d26:	9b07      	ldr	r3, [sp, #28]
 8007d28:	9a07      	ldr	r2, [sp, #28]
 8007d2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d028      	beq.n	8007d86 <_dtoa_r+0xae6>
 8007d34:	4649      	mov	r1, r9
 8007d36:	2300      	movs	r3, #0
 8007d38:	220a      	movs	r2, #10
 8007d3a:	4658      	mov	r0, fp
 8007d3c:	f000 f9d6 	bl	80080ec <__multadd>
 8007d40:	42af      	cmp	r7, r5
 8007d42:	4681      	mov	r9, r0
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	f04f 020a 	mov.w	r2, #10
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	4658      	mov	r0, fp
 8007d50:	d107      	bne.n	8007d62 <_dtoa_r+0xac2>
 8007d52:	f000 f9cb 	bl	80080ec <__multadd>
 8007d56:	4607      	mov	r7, r0
 8007d58:	4605      	mov	r5, r0
 8007d5a:	9b07      	ldr	r3, [sp, #28]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	e774      	b.n	8007c4c <_dtoa_r+0x9ac>
 8007d62:	f000 f9c3 	bl	80080ec <__multadd>
 8007d66:	4629      	mov	r1, r5
 8007d68:	4607      	mov	r7, r0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4658      	mov	r0, fp
 8007d70:	f000 f9bc 	bl	80080ec <__multadd>
 8007d74:	4605      	mov	r5, r0
 8007d76:	e7f0      	b.n	8007d5a <_dtoa_r+0xaba>
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bfcc      	ite	gt
 8007d7e:	461e      	movgt	r6, r3
 8007d80:	2601      	movle	r6, #1
 8007d82:	4456      	add	r6, sl
 8007d84:	2700      	movs	r7, #0
 8007d86:	4649      	mov	r1, r9
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4658      	mov	r0, fp
 8007d8c:	f000 fb5a 	bl	8008444 <__lshift>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4681      	mov	r9, r0
 8007d94:	f000 fbc2 	bl	800851c <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	dcb0      	bgt.n	8007cfe <_dtoa_r+0xa5e>
 8007d9c:	d102      	bne.n	8007da4 <_dtoa_r+0xb04>
 8007d9e:	f018 0f01 	tst.w	r8, #1
 8007da2:	d1ac      	bne.n	8007cfe <_dtoa_r+0xa5e>
 8007da4:	4633      	mov	r3, r6
 8007da6:	461e      	mov	r6, r3
 8007da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dac:	2a30      	cmp	r2, #48	@ 0x30
 8007dae:	d0fa      	beq.n	8007da6 <_dtoa_r+0xb06>
 8007db0:	e5c2      	b.n	8007938 <_dtoa_r+0x698>
 8007db2:	459a      	cmp	sl, r3
 8007db4:	d1a4      	bne.n	8007d00 <_dtoa_r+0xa60>
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	3301      	adds	r3, #1
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	2331      	movs	r3, #49	@ 0x31
 8007dbe:	f88a 3000 	strb.w	r3, [sl]
 8007dc2:	e5b9      	b.n	8007938 <_dtoa_r+0x698>
 8007dc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e24 <_dtoa_r+0xb84>
 8007dca:	b11b      	cbz	r3, 8007dd4 <_dtoa_r+0xb34>
 8007dcc:	f10a 0308 	add.w	r3, sl, #8
 8007dd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	b019      	add	sp, #100	@ 0x64
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	f77f ae37 	ble.w	8007a52 <_dtoa_r+0x7b2>
 8007de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007de8:	2001      	movs	r0, #1
 8007dea:	e655      	b.n	8007a98 <_dtoa_r+0x7f8>
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f77f aed6 	ble.w	8007ba0 <_dtoa_r+0x900>
 8007df4:	4656      	mov	r6, sl
 8007df6:	4621      	mov	r1, r4
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f7ff f9c6 	bl	800718a <quorem>
 8007dfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e02:	f806 8b01 	strb.w	r8, [r6], #1
 8007e06:	9b00      	ldr	r3, [sp, #0]
 8007e08:	eba6 020a 	sub.w	r2, r6, sl
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	ddb3      	ble.n	8007d78 <_dtoa_r+0xad8>
 8007e10:	4649      	mov	r1, r9
 8007e12:	2300      	movs	r3, #0
 8007e14:	220a      	movs	r2, #10
 8007e16:	4658      	mov	r0, fp
 8007e18:	f000 f968 	bl	80080ec <__multadd>
 8007e1c:	4681      	mov	r9, r0
 8007e1e:	e7ea      	b.n	8007df6 <_dtoa_r+0xb56>
 8007e20:	0800b650 	.word	0x0800b650
 8007e24:	0800b5d4 	.word	0x0800b5d4

08007e28 <_free_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	d041      	beq.n	8007eb4 <_free_r+0x8c>
 8007e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e34:	1f0c      	subs	r4, r1, #4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfb8      	it	lt
 8007e3a:	18e4      	addlt	r4, r4, r3
 8007e3c:	f000 f8e8 	bl	8008010 <__malloc_lock>
 8007e40:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb8 <_free_r+0x90>)
 8007e42:	6813      	ldr	r3, [r2, #0]
 8007e44:	b933      	cbnz	r3, 8007e54 <_free_r+0x2c>
 8007e46:	6063      	str	r3, [r4, #4]
 8007e48:	6014      	str	r4, [r2, #0]
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e50:	f000 b8e4 	b.w	800801c <__malloc_unlock>
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	d908      	bls.n	8007e6a <_free_r+0x42>
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	1821      	adds	r1, r4, r0
 8007e5c:	428b      	cmp	r3, r1
 8007e5e:	bf01      	itttt	eq
 8007e60:	6819      	ldreq	r1, [r3, #0]
 8007e62:	685b      	ldreq	r3, [r3, #4]
 8007e64:	1809      	addeq	r1, r1, r0
 8007e66:	6021      	streq	r1, [r4, #0]
 8007e68:	e7ed      	b.n	8007e46 <_free_r+0x1e>
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	b10b      	cbz	r3, 8007e74 <_free_r+0x4c>
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	d9fa      	bls.n	8007e6a <_free_r+0x42>
 8007e74:	6811      	ldr	r1, [r2, #0]
 8007e76:	1850      	adds	r0, r2, r1
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d10b      	bne.n	8007e94 <_free_r+0x6c>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	4401      	add	r1, r0
 8007e80:	1850      	adds	r0, r2, r1
 8007e82:	4283      	cmp	r3, r0
 8007e84:	6011      	str	r1, [r2, #0]
 8007e86:	d1e0      	bne.n	8007e4a <_free_r+0x22>
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	6053      	str	r3, [r2, #4]
 8007e8e:	4408      	add	r0, r1
 8007e90:	6010      	str	r0, [r2, #0]
 8007e92:	e7da      	b.n	8007e4a <_free_r+0x22>
 8007e94:	d902      	bls.n	8007e9c <_free_r+0x74>
 8007e96:	230c      	movs	r3, #12
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	e7d6      	b.n	8007e4a <_free_r+0x22>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	1821      	adds	r1, r4, r0
 8007ea0:	428b      	cmp	r3, r1
 8007ea2:	bf04      	itt	eq
 8007ea4:	6819      	ldreq	r1, [r3, #0]
 8007ea6:	685b      	ldreq	r3, [r3, #4]
 8007ea8:	6063      	str	r3, [r4, #4]
 8007eaa:	bf04      	itt	eq
 8007eac:	1809      	addeq	r1, r1, r0
 8007eae:	6021      	streq	r1, [r4, #0]
 8007eb0:	6054      	str	r4, [r2, #4]
 8007eb2:	e7ca      	b.n	8007e4a <_free_r+0x22>
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
 8007eb6:	bf00      	nop
 8007eb8:	200007d0 	.word	0x200007d0

08007ebc <malloc>:
 8007ebc:	4b02      	ldr	r3, [pc, #8]	@ (8007ec8 <malloc+0xc>)
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	f000 b825 	b.w	8007f10 <_malloc_r>
 8007ec6:	bf00      	nop
 8007ec8:	20000084 	.word	0x20000084

08007ecc <sbrk_aligned>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4e0f      	ldr	r6, [pc, #60]	@ (8007f0c <sbrk_aligned+0x40>)
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	6831      	ldr	r1, [r6, #0]
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	b911      	cbnz	r1, 8007ede <sbrk_aligned+0x12>
 8007ed8:	f000 fcd4 	bl	8008884 <_sbrk_r>
 8007edc:	6030      	str	r0, [r6, #0]
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f000 fccf 	bl	8008884 <_sbrk_r>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d103      	bne.n	8007ef2 <sbrk_aligned+0x26>
 8007eea:	f04f 34ff 	mov.w	r4, #4294967295
 8007eee:	4620      	mov	r0, r4
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	1cc4      	adds	r4, r0, #3
 8007ef4:	f024 0403 	bic.w	r4, r4, #3
 8007ef8:	42a0      	cmp	r0, r4
 8007efa:	d0f8      	beq.n	8007eee <sbrk_aligned+0x22>
 8007efc:	1a21      	subs	r1, r4, r0
 8007efe:	4628      	mov	r0, r5
 8007f00:	f000 fcc0 	bl	8008884 <_sbrk_r>
 8007f04:	3001      	adds	r0, #1
 8007f06:	d1f2      	bne.n	8007eee <sbrk_aligned+0x22>
 8007f08:	e7ef      	b.n	8007eea <sbrk_aligned+0x1e>
 8007f0a:	bf00      	nop
 8007f0c:	200007cc 	.word	0x200007cc

08007f10 <_malloc_r>:
 8007f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f14:	1ccd      	adds	r5, r1, #3
 8007f16:	f025 0503 	bic.w	r5, r5, #3
 8007f1a:	3508      	adds	r5, #8
 8007f1c:	2d0c      	cmp	r5, #12
 8007f1e:	bf38      	it	cc
 8007f20:	250c      	movcc	r5, #12
 8007f22:	2d00      	cmp	r5, #0
 8007f24:	4606      	mov	r6, r0
 8007f26:	db01      	blt.n	8007f2c <_malloc_r+0x1c>
 8007f28:	42a9      	cmp	r1, r5
 8007f2a:	d904      	bls.n	8007f36 <_malloc_r+0x26>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	6033      	str	r3, [r6, #0]
 8007f30:	2000      	movs	r0, #0
 8007f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800800c <_malloc_r+0xfc>
 8007f3a:	f000 f869 	bl	8008010 <__malloc_lock>
 8007f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f42:	461c      	mov	r4, r3
 8007f44:	bb44      	cbnz	r4, 8007f98 <_malloc_r+0x88>
 8007f46:	4629      	mov	r1, r5
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7ff ffbf 	bl	8007ecc <sbrk_aligned>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	4604      	mov	r4, r0
 8007f52:	d158      	bne.n	8008006 <_malloc_r+0xf6>
 8007f54:	f8d8 4000 	ldr.w	r4, [r8]
 8007f58:	4627      	mov	r7, r4
 8007f5a:	2f00      	cmp	r7, #0
 8007f5c:	d143      	bne.n	8007fe6 <_malloc_r+0xd6>
 8007f5e:	2c00      	cmp	r4, #0
 8007f60:	d04b      	beq.n	8007ffa <_malloc_r+0xea>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	4639      	mov	r1, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	eb04 0903 	add.w	r9, r4, r3
 8007f6c:	f000 fc8a 	bl	8008884 <_sbrk_r>
 8007f70:	4581      	cmp	r9, r0
 8007f72:	d142      	bne.n	8007ffa <_malloc_r+0xea>
 8007f74:	6821      	ldr	r1, [r4, #0]
 8007f76:	1a6d      	subs	r5, r5, r1
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7ff ffa6 	bl	8007ecc <sbrk_aligned>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d03a      	beq.n	8007ffa <_malloc_r+0xea>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	442b      	add	r3, r5
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	bb62      	cbnz	r2, 8007fec <_malloc_r+0xdc>
 8007f92:	f8c8 7000 	str.w	r7, [r8]
 8007f96:	e00f      	b.n	8007fb8 <_malloc_r+0xa8>
 8007f98:	6822      	ldr	r2, [r4, #0]
 8007f9a:	1b52      	subs	r2, r2, r5
 8007f9c:	d420      	bmi.n	8007fe0 <_malloc_r+0xd0>
 8007f9e:	2a0b      	cmp	r2, #11
 8007fa0:	d917      	bls.n	8007fd2 <_malloc_r+0xc2>
 8007fa2:	1961      	adds	r1, r4, r5
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	6025      	str	r5, [r4, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	6059      	strne	r1, [r3, #4]
 8007fac:	6863      	ldr	r3, [r4, #4]
 8007fae:	bf08      	it	eq
 8007fb0:	f8c8 1000 	streq.w	r1, [r8]
 8007fb4:	5162      	str	r2, [r4, r5]
 8007fb6:	604b      	str	r3, [r1, #4]
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f000 f82f 	bl	800801c <__malloc_unlock>
 8007fbe:	f104 000b 	add.w	r0, r4, #11
 8007fc2:	1d23      	adds	r3, r4, #4
 8007fc4:	f020 0007 	bic.w	r0, r0, #7
 8007fc8:	1ac2      	subs	r2, r0, r3
 8007fca:	bf1c      	itt	ne
 8007fcc:	1a1b      	subne	r3, r3, r0
 8007fce:	50a3      	strne	r3, [r4, r2]
 8007fd0:	e7af      	b.n	8007f32 <_malloc_r+0x22>
 8007fd2:	6862      	ldr	r2, [r4, #4]
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	bf0c      	ite	eq
 8007fd8:	f8c8 2000 	streq.w	r2, [r8]
 8007fdc:	605a      	strne	r2, [r3, #4]
 8007fde:	e7eb      	b.n	8007fb8 <_malloc_r+0xa8>
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	6864      	ldr	r4, [r4, #4]
 8007fe4:	e7ae      	b.n	8007f44 <_malloc_r+0x34>
 8007fe6:	463c      	mov	r4, r7
 8007fe8:	687f      	ldr	r7, [r7, #4]
 8007fea:	e7b6      	b.n	8007f5a <_malloc_r+0x4a>
 8007fec:	461a      	mov	r2, r3
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d1fb      	bne.n	8007fec <_malloc_r+0xdc>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	6053      	str	r3, [r2, #4]
 8007ff8:	e7de      	b.n	8007fb8 <_malloc_r+0xa8>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	6033      	str	r3, [r6, #0]
 8007ffe:	4630      	mov	r0, r6
 8008000:	f000 f80c 	bl	800801c <__malloc_unlock>
 8008004:	e794      	b.n	8007f30 <_malloc_r+0x20>
 8008006:	6005      	str	r5, [r0, #0]
 8008008:	e7d6      	b.n	8007fb8 <_malloc_r+0xa8>
 800800a:	bf00      	nop
 800800c:	200007d0 	.word	0x200007d0

08008010 <__malloc_lock>:
 8008010:	4801      	ldr	r0, [pc, #4]	@ (8008018 <__malloc_lock+0x8>)
 8008012:	f7ff b8b8 	b.w	8007186 <__retarget_lock_acquire_recursive>
 8008016:	bf00      	nop
 8008018:	200007c8 	.word	0x200007c8

0800801c <__malloc_unlock>:
 800801c:	4801      	ldr	r0, [pc, #4]	@ (8008024 <__malloc_unlock+0x8>)
 800801e:	f7ff b8b3 	b.w	8007188 <__retarget_lock_release_recursive>
 8008022:	bf00      	nop
 8008024:	200007c8 	.word	0x200007c8

08008028 <_Balloc>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	69c6      	ldr	r6, [r0, #28]
 800802c:	4604      	mov	r4, r0
 800802e:	460d      	mov	r5, r1
 8008030:	b976      	cbnz	r6, 8008050 <_Balloc+0x28>
 8008032:	2010      	movs	r0, #16
 8008034:	f7ff ff42 	bl	8007ebc <malloc>
 8008038:	4602      	mov	r2, r0
 800803a:	61e0      	str	r0, [r4, #28]
 800803c:	b920      	cbnz	r0, 8008048 <_Balloc+0x20>
 800803e:	4b18      	ldr	r3, [pc, #96]	@ (80080a0 <_Balloc+0x78>)
 8008040:	4818      	ldr	r0, [pc, #96]	@ (80080a4 <_Balloc+0x7c>)
 8008042:	216b      	movs	r1, #107	@ 0x6b
 8008044:	f000 fc3c 	bl	80088c0 <__assert_func>
 8008048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800804c:	6006      	str	r6, [r0, #0]
 800804e:	60c6      	str	r6, [r0, #12]
 8008050:	69e6      	ldr	r6, [r4, #28]
 8008052:	68f3      	ldr	r3, [r6, #12]
 8008054:	b183      	cbz	r3, 8008078 <_Balloc+0x50>
 8008056:	69e3      	ldr	r3, [r4, #28]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800805e:	b9b8      	cbnz	r0, 8008090 <_Balloc+0x68>
 8008060:	2101      	movs	r1, #1
 8008062:	fa01 f605 	lsl.w	r6, r1, r5
 8008066:	1d72      	adds	r2, r6, #5
 8008068:	0092      	lsls	r2, r2, #2
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fc46 	bl	80088fc <_calloc_r>
 8008070:	b160      	cbz	r0, 800808c <_Balloc+0x64>
 8008072:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008076:	e00e      	b.n	8008096 <_Balloc+0x6e>
 8008078:	2221      	movs	r2, #33	@ 0x21
 800807a:	2104      	movs	r1, #4
 800807c:	4620      	mov	r0, r4
 800807e:	f000 fc3d 	bl	80088fc <_calloc_r>
 8008082:	69e3      	ldr	r3, [r4, #28]
 8008084:	60f0      	str	r0, [r6, #12]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e4      	bne.n	8008056 <_Balloc+0x2e>
 800808c:	2000      	movs	r0, #0
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	6802      	ldr	r2, [r0, #0]
 8008092:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008096:	2300      	movs	r3, #0
 8008098:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800809c:	e7f7      	b.n	800808e <_Balloc+0x66>
 800809e:	bf00      	nop
 80080a0:	0800b5e1 	.word	0x0800b5e1
 80080a4:	0800b661 	.word	0x0800b661

080080a8 <_Bfree>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	69c6      	ldr	r6, [r0, #28]
 80080ac:	4605      	mov	r5, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b976      	cbnz	r6, 80080d0 <_Bfree+0x28>
 80080b2:	2010      	movs	r0, #16
 80080b4:	f7ff ff02 	bl	8007ebc <malloc>
 80080b8:	4602      	mov	r2, r0
 80080ba:	61e8      	str	r0, [r5, #28]
 80080bc:	b920      	cbnz	r0, 80080c8 <_Bfree+0x20>
 80080be:	4b09      	ldr	r3, [pc, #36]	@ (80080e4 <_Bfree+0x3c>)
 80080c0:	4809      	ldr	r0, [pc, #36]	@ (80080e8 <_Bfree+0x40>)
 80080c2:	218f      	movs	r1, #143	@ 0x8f
 80080c4:	f000 fbfc 	bl	80088c0 <__assert_func>
 80080c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080cc:	6006      	str	r6, [r0, #0]
 80080ce:	60c6      	str	r6, [r0, #12]
 80080d0:	b13c      	cbz	r4, 80080e2 <_Bfree+0x3a>
 80080d2:	69eb      	ldr	r3, [r5, #28]
 80080d4:	6862      	ldr	r2, [r4, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080dc:	6021      	str	r1, [r4, #0]
 80080de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	0800b5e1 	.word	0x0800b5e1
 80080e8:	0800b661 	.word	0x0800b661

080080ec <__multadd>:
 80080ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f0:	690d      	ldr	r5, [r1, #16]
 80080f2:	4607      	mov	r7, r0
 80080f4:	460c      	mov	r4, r1
 80080f6:	461e      	mov	r6, r3
 80080f8:	f101 0c14 	add.w	ip, r1, #20
 80080fc:	2000      	movs	r0, #0
 80080fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008102:	b299      	uxth	r1, r3
 8008104:	fb02 6101 	mla	r1, r2, r1, r6
 8008108:	0c1e      	lsrs	r6, r3, #16
 800810a:	0c0b      	lsrs	r3, r1, #16
 800810c:	fb02 3306 	mla	r3, r2, r6, r3
 8008110:	b289      	uxth	r1, r1
 8008112:	3001      	adds	r0, #1
 8008114:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008118:	4285      	cmp	r5, r0
 800811a:	f84c 1b04 	str.w	r1, [ip], #4
 800811e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008122:	dcec      	bgt.n	80080fe <__multadd+0x12>
 8008124:	b30e      	cbz	r6, 800816a <__multadd+0x7e>
 8008126:	68a3      	ldr	r3, [r4, #8]
 8008128:	42ab      	cmp	r3, r5
 800812a:	dc19      	bgt.n	8008160 <__multadd+0x74>
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	4638      	mov	r0, r7
 8008130:	3101      	adds	r1, #1
 8008132:	f7ff ff79 	bl	8008028 <_Balloc>
 8008136:	4680      	mov	r8, r0
 8008138:	b928      	cbnz	r0, 8008146 <__multadd+0x5a>
 800813a:	4602      	mov	r2, r0
 800813c:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <__multadd+0x84>)
 800813e:	480d      	ldr	r0, [pc, #52]	@ (8008174 <__multadd+0x88>)
 8008140:	21ba      	movs	r1, #186	@ 0xba
 8008142:	f000 fbbd 	bl	80088c0 <__assert_func>
 8008146:	6922      	ldr	r2, [r4, #16]
 8008148:	3202      	adds	r2, #2
 800814a:	f104 010c 	add.w	r1, r4, #12
 800814e:	0092      	lsls	r2, r2, #2
 8008150:	300c      	adds	r0, #12
 8008152:	f000 fba7 	bl	80088a4 <memcpy>
 8008156:	4621      	mov	r1, r4
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ffa5 	bl	80080a8 <_Bfree>
 800815e:	4644      	mov	r4, r8
 8008160:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008164:	3501      	adds	r5, #1
 8008166:	615e      	str	r6, [r3, #20]
 8008168:	6125      	str	r5, [r4, #16]
 800816a:	4620      	mov	r0, r4
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008170:	0800b650 	.word	0x0800b650
 8008174:	0800b661 	.word	0x0800b661

08008178 <__hi0bits>:
 8008178:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800817c:	4603      	mov	r3, r0
 800817e:	bf36      	itet	cc
 8008180:	0403      	lslcc	r3, r0, #16
 8008182:	2000      	movcs	r0, #0
 8008184:	2010      	movcc	r0, #16
 8008186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800818a:	bf3c      	itt	cc
 800818c:	021b      	lslcc	r3, r3, #8
 800818e:	3008      	addcc	r0, #8
 8008190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008194:	bf3c      	itt	cc
 8008196:	011b      	lslcc	r3, r3, #4
 8008198:	3004      	addcc	r0, #4
 800819a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800819e:	bf3c      	itt	cc
 80081a0:	009b      	lslcc	r3, r3, #2
 80081a2:	3002      	addcc	r0, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db05      	blt.n	80081b4 <__hi0bits+0x3c>
 80081a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081ac:	f100 0001 	add.w	r0, r0, #1
 80081b0:	bf08      	it	eq
 80081b2:	2020      	moveq	r0, #32
 80081b4:	4770      	bx	lr

080081b6 <__lo0bits>:
 80081b6:	6803      	ldr	r3, [r0, #0]
 80081b8:	4602      	mov	r2, r0
 80081ba:	f013 0007 	ands.w	r0, r3, #7
 80081be:	d00b      	beq.n	80081d8 <__lo0bits+0x22>
 80081c0:	07d9      	lsls	r1, r3, #31
 80081c2:	d421      	bmi.n	8008208 <__lo0bits+0x52>
 80081c4:	0798      	lsls	r0, r3, #30
 80081c6:	bf49      	itett	mi
 80081c8:	085b      	lsrmi	r3, r3, #1
 80081ca:	089b      	lsrpl	r3, r3, #2
 80081cc:	2001      	movmi	r0, #1
 80081ce:	6013      	strmi	r3, [r2, #0]
 80081d0:	bf5c      	itt	pl
 80081d2:	6013      	strpl	r3, [r2, #0]
 80081d4:	2002      	movpl	r0, #2
 80081d6:	4770      	bx	lr
 80081d8:	b299      	uxth	r1, r3
 80081da:	b909      	cbnz	r1, 80081e0 <__lo0bits+0x2a>
 80081dc:	0c1b      	lsrs	r3, r3, #16
 80081de:	2010      	movs	r0, #16
 80081e0:	b2d9      	uxtb	r1, r3
 80081e2:	b909      	cbnz	r1, 80081e8 <__lo0bits+0x32>
 80081e4:	3008      	adds	r0, #8
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	0719      	lsls	r1, r3, #28
 80081ea:	bf04      	itt	eq
 80081ec:	091b      	lsreq	r3, r3, #4
 80081ee:	3004      	addeq	r0, #4
 80081f0:	0799      	lsls	r1, r3, #30
 80081f2:	bf04      	itt	eq
 80081f4:	089b      	lsreq	r3, r3, #2
 80081f6:	3002      	addeq	r0, #2
 80081f8:	07d9      	lsls	r1, r3, #31
 80081fa:	d403      	bmi.n	8008204 <__lo0bits+0x4e>
 80081fc:	085b      	lsrs	r3, r3, #1
 80081fe:	f100 0001 	add.w	r0, r0, #1
 8008202:	d003      	beq.n	800820c <__lo0bits+0x56>
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	4770      	bx	lr
 8008208:	2000      	movs	r0, #0
 800820a:	4770      	bx	lr
 800820c:	2020      	movs	r0, #32
 800820e:	4770      	bx	lr

08008210 <__i2b>:
 8008210:	b510      	push	{r4, lr}
 8008212:	460c      	mov	r4, r1
 8008214:	2101      	movs	r1, #1
 8008216:	f7ff ff07 	bl	8008028 <_Balloc>
 800821a:	4602      	mov	r2, r0
 800821c:	b928      	cbnz	r0, 800822a <__i2b+0x1a>
 800821e:	4b05      	ldr	r3, [pc, #20]	@ (8008234 <__i2b+0x24>)
 8008220:	4805      	ldr	r0, [pc, #20]	@ (8008238 <__i2b+0x28>)
 8008222:	f240 1145 	movw	r1, #325	@ 0x145
 8008226:	f000 fb4b 	bl	80088c0 <__assert_func>
 800822a:	2301      	movs	r3, #1
 800822c:	6144      	str	r4, [r0, #20]
 800822e:	6103      	str	r3, [r0, #16]
 8008230:	bd10      	pop	{r4, pc}
 8008232:	bf00      	nop
 8008234:	0800b650 	.word	0x0800b650
 8008238:	0800b661 	.word	0x0800b661

0800823c <__multiply>:
 800823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008240:	4614      	mov	r4, r2
 8008242:	690a      	ldr	r2, [r1, #16]
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	429a      	cmp	r2, r3
 8008248:	bfa8      	it	ge
 800824a:	4623      	movge	r3, r4
 800824c:	460f      	mov	r7, r1
 800824e:	bfa4      	itt	ge
 8008250:	460c      	movge	r4, r1
 8008252:	461f      	movge	r7, r3
 8008254:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008258:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800825c:	68a3      	ldr	r3, [r4, #8]
 800825e:	6861      	ldr	r1, [r4, #4]
 8008260:	eb0a 0609 	add.w	r6, sl, r9
 8008264:	42b3      	cmp	r3, r6
 8008266:	b085      	sub	sp, #20
 8008268:	bfb8      	it	lt
 800826a:	3101      	addlt	r1, #1
 800826c:	f7ff fedc 	bl	8008028 <_Balloc>
 8008270:	b930      	cbnz	r0, 8008280 <__multiply+0x44>
 8008272:	4602      	mov	r2, r0
 8008274:	4b44      	ldr	r3, [pc, #272]	@ (8008388 <__multiply+0x14c>)
 8008276:	4845      	ldr	r0, [pc, #276]	@ (800838c <__multiply+0x150>)
 8008278:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800827c:	f000 fb20 	bl	80088c0 <__assert_func>
 8008280:	f100 0514 	add.w	r5, r0, #20
 8008284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008288:	462b      	mov	r3, r5
 800828a:	2200      	movs	r2, #0
 800828c:	4543      	cmp	r3, r8
 800828e:	d321      	bcc.n	80082d4 <__multiply+0x98>
 8008290:	f107 0114 	add.w	r1, r7, #20
 8008294:	f104 0214 	add.w	r2, r4, #20
 8008298:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800829c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	1b13      	subs	r3, r2, r4
 80082a4:	3b15      	subs	r3, #21
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	3304      	adds	r3, #4
 80082ac:	f104 0715 	add.w	r7, r4, #21
 80082b0:	42ba      	cmp	r2, r7
 80082b2:	bf38      	it	cc
 80082b4:	2304      	movcc	r3, #4
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	9b02      	ldr	r3, [sp, #8]
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	428b      	cmp	r3, r1
 80082be:	d80c      	bhi.n	80082da <__multiply+0x9e>
 80082c0:	2e00      	cmp	r6, #0
 80082c2:	dd03      	ble.n	80082cc <__multiply+0x90>
 80082c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d05b      	beq.n	8008384 <__multiply+0x148>
 80082cc:	6106      	str	r6, [r0, #16]
 80082ce:	b005      	add	sp, #20
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d4:	f843 2b04 	str.w	r2, [r3], #4
 80082d8:	e7d8      	b.n	800828c <__multiply+0x50>
 80082da:	f8b1 a000 	ldrh.w	sl, [r1]
 80082de:	f1ba 0f00 	cmp.w	sl, #0
 80082e2:	d024      	beq.n	800832e <__multiply+0xf2>
 80082e4:	f104 0e14 	add.w	lr, r4, #20
 80082e8:	46a9      	mov	r9, r5
 80082ea:	f04f 0c00 	mov.w	ip, #0
 80082ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082f2:	f8d9 3000 	ldr.w	r3, [r9]
 80082f6:	fa1f fb87 	uxth.w	fp, r7
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008300:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008304:	f8d9 7000 	ldr.w	r7, [r9]
 8008308:	4463      	add	r3, ip
 800830a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800830e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008312:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800831c:	4572      	cmp	r2, lr
 800831e:	f849 3b04 	str.w	r3, [r9], #4
 8008322:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008326:	d8e2      	bhi.n	80082ee <__multiply+0xb2>
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	f845 c003 	str.w	ip, [r5, r3]
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008334:	3104      	adds	r1, #4
 8008336:	f1b9 0f00 	cmp.w	r9, #0
 800833a:	d021      	beq.n	8008380 <__multiply+0x144>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	f104 0c14 	add.w	ip, r4, #20
 8008342:	46ae      	mov	lr, r5
 8008344:	f04f 0a00 	mov.w	sl, #0
 8008348:	f8bc b000 	ldrh.w	fp, [ip]
 800834c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008350:	fb09 770b 	mla	r7, r9, fp, r7
 8008354:	4457      	add	r7, sl
 8008356:	b29b      	uxth	r3, r3
 8008358:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800835c:	f84e 3b04 	str.w	r3, [lr], #4
 8008360:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008364:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008368:	f8be 3000 	ldrh.w	r3, [lr]
 800836c:	fb09 330a 	mla	r3, r9, sl, r3
 8008370:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008374:	4562      	cmp	r2, ip
 8008376:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800837a:	d8e5      	bhi.n	8008348 <__multiply+0x10c>
 800837c:	9f01      	ldr	r7, [sp, #4]
 800837e:	51eb      	str	r3, [r5, r7]
 8008380:	3504      	adds	r5, #4
 8008382:	e799      	b.n	80082b8 <__multiply+0x7c>
 8008384:	3e01      	subs	r6, #1
 8008386:	e79b      	b.n	80082c0 <__multiply+0x84>
 8008388:	0800b650 	.word	0x0800b650
 800838c:	0800b661 	.word	0x0800b661

08008390 <__pow5mult>:
 8008390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008394:	4615      	mov	r5, r2
 8008396:	f012 0203 	ands.w	r2, r2, #3
 800839a:	4607      	mov	r7, r0
 800839c:	460e      	mov	r6, r1
 800839e:	d007      	beq.n	80083b0 <__pow5mult+0x20>
 80083a0:	4c25      	ldr	r4, [pc, #148]	@ (8008438 <__pow5mult+0xa8>)
 80083a2:	3a01      	subs	r2, #1
 80083a4:	2300      	movs	r3, #0
 80083a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083aa:	f7ff fe9f 	bl	80080ec <__multadd>
 80083ae:	4606      	mov	r6, r0
 80083b0:	10ad      	asrs	r5, r5, #2
 80083b2:	d03d      	beq.n	8008430 <__pow5mult+0xa0>
 80083b4:	69fc      	ldr	r4, [r7, #28]
 80083b6:	b97c      	cbnz	r4, 80083d8 <__pow5mult+0x48>
 80083b8:	2010      	movs	r0, #16
 80083ba:	f7ff fd7f 	bl	8007ebc <malloc>
 80083be:	4602      	mov	r2, r0
 80083c0:	61f8      	str	r0, [r7, #28]
 80083c2:	b928      	cbnz	r0, 80083d0 <__pow5mult+0x40>
 80083c4:	4b1d      	ldr	r3, [pc, #116]	@ (800843c <__pow5mult+0xac>)
 80083c6:	481e      	ldr	r0, [pc, #120]	@ (8008440 <__pow5mult+0xb0>)
 80083c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083cc:	f000 fa78 	bl	80088c0 <__assert_func>
 80083d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d4:	6004      	str	r4, [r0, #0]
 80083d6:	60c4      	str	r4, [r0, #12]
 80083d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083e0:	b94c      	cbnz	r4, 80083f6 <__pow5mult+0x66>
 80083e2:	f240 2171 	movw	r1, #625	@ 0x271
 80083e6:	4638      	mov	r0, r7
 80083e8:	f7ff ff12 	bl	8008210 <__i2b>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80083f2:	4604      	mov	r4, r0
 80083f4:	6003      	str	r3, [r0, #0]
 80083f6:	f04f 0900 	mov.w	r9, #0
 80083fa:	07eb      	lsls	r3, r5, #31
 80083fc:	d50a      	bpl.n	8008414 <__pow5mult+0x84>
 80083fe:	4631      	mov	r1, r6
 8008400:	4622      	mov	r2, r4
 8008402:	4638      	mov	r0, r7
 8008404:	f7ff ff1a 	bl	800823c <__multiply>
 8008408:	4631      	mov	r1, r6
 800840a:	4680      	mov	r8, r0
 800840c:	4638      	mov	r0, r7
 800840e:	f7ff fe4b 	bl	80080a8 <_Bfree>
 8008412:	4646      	mov	r6, r8
 8008414:	106d      	asrs	r5, r5, #1
 8008416:	d00b      	beq.n	8008430 <__pow5mult+0xa0>
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	b938      	cbnz	r0, 800842c <__pow5mult+0x9c>
 800841c:	4622      	mov	r2, r4
 800841e:	4621      	mov	r1, r4
 8008420:	4638      	mov	r0, r7
 8008422:	f7ff ff0b 	bl	800823c <__multiply>
 8008426:	6020      	str	r0, [r4, #0]
 8008428:	f8c0 9000 	str.w	r9, [r0]
 800842c:	4604      	mov	r4, r0
 800842e:	e7e4      	b.n	80083fa <__pow5mult+0x6a>
 8008430:	4630      	mov	r0, r6
 8008432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008436:	bf00      	nop
 8008438:	0800b6bc 	.word	0x0800b6bc
 800843c:	0800b5e1 	.word	0x0800b5e1
 8008440:	0800b661 	.word	0x0800b661

08008444 <__lshift>:
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	460c      	mov	r4, r1
 800844a:	6849      	ldr	r1, [r1, #4]
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008452:	68a3      	ldr	r3, [r4, #8]
 8008454:	4607      	mov	r7, r0
 8008456:	4691      	mov	r9, r2
 8008458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800845c:	f108 0601 	add.w	r6, r8, #1
 8008460:	42b3      	cmp	r3, r6
 8008462:	db0b      	blt.n	800847c <__lshift+0x38>
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff fddf 	bl	8008028 <_Balloc>
 800846a:	4605      	mov	r5, r0
 800846c:	b948      	cbnz	r0, 8008482 <__lshift+0x3e>
 800846e:	4602      	mov	r2, r0
 8008470:	4b28      	ldr	r3, [pc, #160]	@ (8008514 <__lshift+0xd0>)
 8008472:	4829      	ldr	r0, [pc, #164]	@ (8008518 <__lshift+0xd4>)
 8008474:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008478:	f000 fa22 	bl	80088c0 <__assert_func>
 800847c:	3101      	adds	r1, #1
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	e7ee      	b.n	8008460 <__lshift+0x1c>
 8008482:	2300      	movs	r3, #0
 8008484:	f100 0114 	add.w	r1, r0, #20
 8008488:	f100 0210 	add.w	r2, r0, #16
 800848c:	4618      	mov	r0, r3
 800848e:	4553      	cmp	r3, sl
 8008490:	db33      	blt.n	80084fa <__lshift+0xb6>
 8008492:	6920      	ldr	r0, [r4, #16]
 8008494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008498:	f104 0314 	add.w	r3, r4, #20
 800849c:	f019 091f 	ands.w	r9, r9, #31
 80084a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084a8:	d02b      	beq.n	8008502 <__lshift+0xbe>
 80084aa:	f1c9 0e20 	rsb	lr, r9, #32
 80084ae:	468a      	mov	sl, r1
 80084b0:	2200      	movs	r2, #0
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	fa00 f009 	lsl.w	r0, r0, r9
 80084b8:	4310      	orrs	r0, r2
 80084ba:	f84a 0b04 	str.w	r0, [sl], #4
 80084be:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c2:	459c      	cmp	ip, r3
 80084c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80084c8:	d8f3      	bhi.n	80084b2 <__lshift+0x6e>
 80084ca:	ebac 0304 	sub.w	r3, ip, r4
 80084ce:	3b15      	subs	r3, #21
 80084d0:	f023 0303 	bic.w	r3, r3, #3
 80084d4:	3304      	adds	r3, #4
 80084d6:	f104 0015 	add.w	r0, r4, #21
 80084da:	4584      	cmp	ip, r0
 80084dc:	bf38      	it	cc
 80084de:	2304      	movcc	r3, #4
 80084e0:	50ca      	str	r2, [r1, r3]
 80084e2:	b10a      	cbz	r2, 80084e8 <__lshift+0xa4>
 80084e4:	f108 0602 	add.w	r6, r8, #2
 80084e8:	3e01      	subs	r6, #1
 80084ea:	4638      	mov	r0, r7
 80084ec:	612e      	str	r6, [r5, #16]
 80084ee:	4621      	mov	r1, r4
 80084f0:	f7ff fdda 	bl	80080a8 <_Bfree>
 80084f4:	4628      	mov	r0, r5
 80084f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80084fe:	3301      	adds	r3, #1
 8008500:	e7c5      	b.n	800848e <__lshift+0x4a>
 8008502:	3904      	subs	r1, #4
 8008504:	f853 2b04 	ldr.w	r2, [r3], #4
 8008508:	f841 2f04 	str.w	r2, [r1, #4]!
 800850c:	459c      	cmp	ip, r3
 800850e:	d8f9      	bhi.n	8008504 <__lshift+0xc0>
 8008510:	e7ea      	b.n	80084e8 <__lshift+0xa4>
 8008512:	bf00      	nop
 8008514:	0800b650 	.word	0x0800b650
 8008518:	0800b661 	.word	0x0800b661

0800851c <__mcmp>:
 800851c:	690a      	ldr	r2, [r1, #16]
 800851e:	4603      	mov	r3, r0
 8008520:	6900      	ldr	r0, [r0, #16]
 8008522:	1a80      	subs	r0, r0, r2
 8008524:	b530      	push	{r4, r5, lr}
 8008526:	d10e      	bne.n	8008546 <__mcmp+0x2a>
 8008528:	3314      	adds	r3, #20
 800852a:	3114      	adds	r1, #20
 800852c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800853c:	4295      	cmp	r5, r2
 800853e:	d003      	beq.n	8008548 <__mcmp+0x2c>
 8008540:	d205      	bcs.n	800854e <__mcmp+0x32>
 8008542:	f04f 30ff 	mov.w	r0, #4294967295
 8008546:	bd30      	pop	{r4, r5, pc}
 8008548:	42a3      	cmp	r3, r4
 800854a:	d3f3      	bcc.n	8008534 <__mcmp+0x18>
 800854c:	e7fb      	b.n	8008546 <__mcmp+0x2a>
 800854e:	2001      	movs	r0, #1
 8008550:	e7f9      	b.n	8008546 <__mcmp+0x2a>
	...

08008554 <__mdiff>:
 8008554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	4689      	mov	r9, r1
 800855a:	4606      	mov	r6, r0
 800855c:	4611      	mov	r1, r2
 800855e:	4648      	mov	r0, r9
 8008560:	4614      	mov	r4, r2
 8008562:	f7ff ffdb 	bl	800851c <__mcmp>
 8008566:	1e05      	subs	r5, r0, #0
 8008568:	d112      	bne.n	8008590 <__mdiff+0x3c>
 800856a:	4629      	mov	r1, r5
 800856c:	4630      	mov	r0, r6
 800856e:	f7ff fd5b 	bl	8008028 <_Balloc>
 8008572:	4602      	mov	r2, r0
 8008574:	b928      	cbnz	r0, 8008582 <__mdiff+0x2e>
 8008576:	4b3f      	ldr	r3, [pc, #252]	@ (8008674 <__mdiff+0x120>)
 8008578:	f240 2137 	movw	r1, #567	@ 0x237
 800857c:	483e      	ldr	r0, [pc, #248]	@ (8008678 <__mdiff+0x124>)
 800857e:	f000 f99f 	bl	80088c0 <__assert_func>
 8008582:	2301      	movs	r3, #1
 8008584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008588:	4610      	mov	r0, r2
 800858a:	b003      	add	sp, #12
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	bfbc      	itt	lt
 8008592:	464b      	movlt	r3, r9
 8008594:	46a1      	movlt	r9, r4
 8008596:	4630      	mov	r0, r6
 8008598:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800859c:	bfba      	itte	lt
 800859e:	461c      	movlt	r4, r3
 80085a0:	2501      	movlt	r5, #1
 80085a2:	2500      	movge	r5, #0
 80085a4:	f7ff fd40 	bl	8008028 <_Balloc>
 80085a8:	4602      	mov	r2, r0
 80085aa:	b918      	cbnz	r0, 80085b4 <__mdiff+0x60>
 80085ac:	4b31      	ldr	r3, [pc, #196]	@ (8008674 <__mdiff+0x120>)
 80085ae:	f240 2145 	movw	r1, #581	@ 0x245
 80085b2:	e7e3      	b.n	800857c <__mdiff+0x28>
 80085b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085b8:	6926      	ldr	r6, [r4, #16]
 80085ba:	60c5      	str	r5, [r0, #12]
 80085bc:	f109 0310 	add.w	r3, r9, #16
 80085c0:	f109 0514 	add.w	r5, r9, #20
 80085c4:	f104 0e14 	add.w	lr, r4, #20
 80085c8:	f100 0b14 	add.w	fp, r0, #20
 80085cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	46d9      	mov	r9, fp
 80085d8:	f04f 0c00 	mov.w	ip, #0
 80085dc:	9b01      	ldr	r3, [sp, #4]
 80085de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	fa1f f38a 	uxth.w	r3, sl
 80085ec:	4619      	mov	r1, r3
 80085ee:	b283      	uxth	r3, r0
 80085f0:	1acb      	subs	r3, r1, r3
 80085f2:	0c00      	lsrs	r0, r0, #16
 80085f4:	4463      	add	r3, ip
 80085f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008604:	4576      	cmp	r6, lr
 8008606:	f849 3b04 	str.w	r3, [r9], #4
 800860a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800860e:	d8e5      	bhi.n	80085dc <__mdiff+0x88>
 8008610:	1b33      	subs	r3, r6, r4
 8008612:	3b15      	subs	r3, #21
 8008614:	f023 0303 	bic.w	r3, r3, #3
 8008618:	3415      	adds	r4, #21
 800861a:	3304      	adds	r3, #4
 800861c:	42a6      	cmp	r6, r4
 800861e:	bf38      	it	cc
 8008620:	2304      	movcc	r3, #4
 8008622:	441d      	add	r5, r3
 8008624:	445b      	add	r3, fp
 8008626:	461e      	mov	r6, r3
 8008628:	462c      	mov	r4, r5
 800862a:	4544      	cmp	r4, r8
 800862c:	d30e      	bcc.n	800864c <__mdiff+0xf8>
 800862e:	f108 0103 	add.w	r1, r8, #3
 8008632:	1b49      	subs	r1, r1, r5
 8008634:	f021 0103 	bic.w	r1, r1, #3
 8008638:	3d03      	subs	r5, #3
 800863a:	45a8      	cmp	r8, r5
 800863c:	bf38      	it	cc
 800863e:	2100      	movcc	r1, #0
 8008640:	440b      	add	r3, r1
 8008642:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008646:	b191      	cbz	r1, 800866e <__mdiff+0x11a>
 8008648:	6117      	str	r7, [r2, #16]
 800864a:	e79d      	b.n	8008588 <__mdiff+0x34>
 800864c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008650:	46e6      	mov	lr, ip
 8008652:	0c08      	lsrs	r0, r1, #16
 8008654:	fa1c fc81 	uxtah	ip, ip, r1
 8008658:	4471      	add	r1, lr
 800865a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800865e:	b289      	uxth	r1, r1
 8008660:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008664:	f846 1b04 	str.w	r1, [r6], #4
 8008668:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800866c:	e7dd      	b.n	800862a <__mdiff+0xd6>
 800866e:	3f01      	subs	r7, #1
 8008670:	e7e7      	b.n	8008642 <__mdiff+0xee>
 8008672:	bf00      	nop
 8008674:	0800b650 	.word	0x0800b650
 8008678:	0800b661 	.word	0x0800b661

0800867c <__d2b>:
 800867c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008680:	460f      	mov	r7, r1
 8008682:	2101      	movs	r1, #1
 8008684:	ec59 8b10 	vmov	r8, r9, d0
 8008688:	4616      	mov	r6, r2
 800868a:	f7ff fccd 	bl	8008028 <_Balloc>
 800868e:	4604      	mov	r4, r0
 8008690:	b930      	cbnz	r0, 80086a0 <__d2b+0x24>
 8008692:	4602      	mov	r2, r0
 8008694:	4b23      	ldr	r3, [pc, #140]	@ (8008724 <__d2b+0xa8>)
 8008696:	4824      	ldr	r0, [pc, #144]	@ (8008728 <__d2b+0xac>)
 8008698:	f240 310f 	movw	r1, #783	@ 0x30f
 800869c:	f000 f910 	bl	80088c0 <__assert_func>
 80086a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086a8:	b10d      	cbz	r5, 80086ae <__d2b+0x32>
 80086aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	f1b8 0300 	subs.w	r3, r8, #0
 80086b4:	d023      	beq.n	80086fe <__d2b+0x82>
 80086b6:	4668      	mov	r0, sp
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	f7ff fd7c 	bl	80081b6 <__lo0bits>
 80086be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086c2:	b1d0      	cbz	r0, 80086fa <__d2b+0x7e>
 80086c4:	f1c0 0320 	rsb	r3, r0, #32
 80086c8:	fa02 f303 	lsl.w	r3, r2, r3
 80086cc:	430b      	orrs	r3, r1
 80086ce:	40c2      	lsrs	r2, r0
 80086d0:	6163      	str	r3, [r4, #20]
 80086d2:	9201      	str	r2, [sp, #4]
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	61a3      	str	r3, [r4, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bf0c      	ite	eq
 80086dc:	2201      	moveq	r2, #1
 80086de:	2202      	movne	r2, #2
 80086e0:	6122      	str	r2, [r4, #16]
 80086e2:	b1a5      	cbz	r5, 800870e <__d2b+0x92>
 80086e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086e8:	4405      	add	r5, r0
 80086ea:	603d      	str	r5, [r7, #0]
 80086ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086f0:	6030      	str	r0, [r6, #0]
 80086f2:	4620      	mov	r0, r4
 80086f4:	b003      	add	sp, #12
 80086f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086fa:	6161      	str	r1, [r4, #20]
 80086fc:	e7ea      	b.n	80086d4 <__d2b+0x58>
 80086fe:	a801      	add	r0, sp, #4
 8008700:	f7ff fd59 	bl	80081b6 <__lo0bits>
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	6163      	str	r3, [r4, #20]
 8008708:	3020      	adds	r0, #32
 800870a:	2201      	movs	r2, #1
 800870c:	e7e8      	b.n	80086e0 <__d2b+0x64>
 800870e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008712:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008716:	6038      	str	r0, [r7, #0]
 8008718:	6918      	ldr	r0, [r3, #16]
 800871a:	f7ff fd2d 	bl	8008178 <__hi0bits>
 800871e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008722:	e7e5      	b.n	80086f0 <__d2b+0x74>
 8008724:	0800b650 	.word	0x0800b650
 8008728:	0800b661 	.word	0x0800b661

0800872c <__sflush_r>:
 800872c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008734:	0716      	lsls	r6, r2, #28
 8008736:	4605      	mov	r5, r0
 8008738:	460c      	mov	r4, r1
 800873a:	d454      	bmi.n	80087e6 <__sflush_r+0xba>
 800873c:	684b      	ldr	r3, [r1, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	dc02      	bgt.n	8008748 <__sflush_r+0x1c>
 8008742:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	dd48      	ble.n	80087da <__sflush_r+0xae>
 8008748:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800874a:	2e00      	cmp	r6, #0
 800874c:	d045      	beq.n	80087da <__sflush_r+0xae>
 800874e:	2300      	movs	r3, #0
 8008750:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008754:	682f      	ldr	r7, [r5, #0]
 8008756:	6a21      	ldr	r1, [r4, #32]
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	d030      	beq.n	80087be <__sflush_r+0x92>
 800875c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	0759      	lsls	r1, r3, #29
 8008762:	d505      	bpl.n	8008770 <__sflush_r+0x44>
 8008764:	6863      	ldr	r3, [r4, #4]
 8008766:	1ad2      	subs	r2, r2, r3
 8008768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800876a:	b10b      	cbz	r3, 8008770 <__sflush_r+0x44>
 800876c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	2300      	movs	r3, #0
 8008772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008774:	6a21      	ldr	r1, [r4, #32]
 8008776:	4628      	mov	r0, r5
 8008778:	47b0      	blx	r6
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	d106      	bne.n	800878e <__sflush_r+0x62>
 8008780:	6829      	ldr	r1, [r5, #0]
 8008782:	291d      	cmp	r1, #29
 8008784:	d82b      	bhi.n	80087de <__sflush_r+0xb2>
 8008786:	4a2a      	ldr	r2, [pc, #168]	@ (8008830 <__sflush_r+0x104>)
 8008788:	410a      	asrs	r2, r1
 800878a:	07d6      	lsls	r6, r2, #31
 800878c:	d427      	bmi.n	80087de <__sflush_r+0xb2>
 800878e:	2200      	movs	r2, #0
 8008790:	6062      	str	r2, [r4, #4]
 8008792:	04d9      	lsls	r1, r3, #19
 8008794:	6922      	ldr	r2, [r4, #16]
 8008796:	6022      	str	r2, [r4, #0]
 8008798:	d504      	bpl.n	80087a4 <__sflush_r+0x78>
 800879a:	1c42      	adds	r2, r0, #1
 800879c:	d101      	bne.n	80087a2 <__sflush_r+0x76>
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	b903      	cbnz	r3, 80087a4 <__sflush_r+0x78>
 80087a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80087a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087a6:	602f      	str	r7, [r5, #0]
 80087a8:	b1b9      	cbz	r1, 80087da <__sflush_r+0xae>
 80087aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087ae:	4299      	cmp	r1, r3
 80087b0:	d002      	beq.n	80087b8 <__sflush_r+0x8c>
 80087b2:	4628      	mov	r0, r5
 80087b4:	f7ff fb38 	bl	8007e28 <_free_r>
 80087b8:	2300      	movs	r3, #0
 80087ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80087bc:	e00d      	b.n	80087da <__sflush_r+0xae>
 80087be:	2301      	movs	r3, #1
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b0      	blx	r6
 80087c4:	4602      	mov	r2, r0
 80087c6:	1c50      	adds	r0, r2, #1
 80087c8:	d1c9      	bne.n	800875e <__sflush_r+0x32>
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0c6      	beq.n	800875e <__sflush_r+0x32>
 80087d0:	2b1d      	cmp	r3, #29
 80087d2:	d001      	beq.n	80087d8 <__sflush_r+0xac>
 80087d4:	2b16      	cmp	r3, #22
 80087d6:	d11e      	bne.n	8008816 <__sflush_r+0xea>
 80087d8:	602f      	str	r7, [r5, #0]
 80087da:	2000      	movs	r0, #0
 80087dc:	e022      	b.n	8008824 <__sflush_r+0xf8>
 80087de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e2:	b21b      	sxth	r3, r3
 80087e4:	e01b      	b.n	800881e <__sflush_r+0xf2>
 80087e6:	690f      	ldr	r7, [r1, #16]
 80087e8:	2f00      	cmp	r7, #0
 80087ea:	d0f6      	beq.n	80087da <__sflush_r+0xae>
 80087ec:	0793      	lsls	r3, r2, #30
 80087ee:	680e      	ldr	r6, [r1, #0]
 80087f0:	bf08      	it	eq
 80087f2:	694b      	ldreq	r3, [r1, #20]
 80087f4:	600f      	str	r7, [r1, #0]
 80087f6:	bf18      	it	ne
 80087f8:	2300      	movne	r3, #0
 80087fa:	eba6 0807 	sub.w	r8, r6, r7
 80087fe:	608b      	str	r3, [r1, #8]
 8008800:	f1b8 0f00 	cmp.w	r8, #0
 8008804:	dde9      	ble.n	80087da <__sflush_r+0xae>
 8008806:	6a21      	ldr	r1, [r4, #32]
 8008808:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800880a:	4643      	mov	r3, r8
 800880c:	463a      	mov	r2, r7
 800880e:	4628      	mov	r0, r5
 8008810:	47b0      	blx	r6
 8008812:	2800      	cmp	r0, #0
 8008814:	dc08      	bgt.n	8008828 <__sflush_r+0xfc>
 8008816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008828:	4407      	add	r7, r0
 800882a:	eba8 0800 	sub.w	r8, r8, r0
 800882e:	e7e7      	b.n	8008800 <__sflush_r+0xd4>
 8008830:	dfbffffe 	.word	0xdfbffffe

08008834 <_fflush_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	690b      	ldr	r3, [r1, #16]
 8008838:	4605      	mov	r5, r0
 800883a:	460c      	mov	r4, r1
 800883c:	b913      	cbnz	r3, 8008844 <_fflush_r+0x10>
 800883e:	2500      	movs	r5, #0
 8008840:	4628      	mov	r0, r5
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	b118      	cbz	r0, 800884e <_fflush_r+0x1a>
 8008846:	6a03      	ldr	r3, [r0, #32]
 8008848:	b90b      	cbnz	r3, 800884e <_fflush_r+0x1a>
 800884a:	f7fe fba5 	bl	8006f98 <__sinit>
 800884e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0f3      	beq.n	800883e <_fflush_r+0xa>
 8008856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008858:	07d0      	lsls	r0, r2, #31
 800885a:	d404      	bmi.n	8008866 <_fflush_r+0x32>
 800885c:	0599      	lsls	r1, r3, #22
 800885e:	d402      	bmi.n	8008866 <_fflush_r+0x32>
 8008860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008862:	f7fe fc90 	bl	8007186 <__retarget_lock_acquire_recursive>
 8008866:	4628      	mov	r0, r5
 8008868:	4621      	mov	r1, r4
 800886a:	f7ff ff5f 	bl	800872c <__sflush_r>
 800886e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008870:	07da      	lsls	r2, r3, #31
 8008872:	4605      	mov	r5, r0
 8008874:	d4e4      	bmi.n	8008840 <_fflush_r+0xc>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	059b      	lsls	r3, r3, #22
 800887a:	d4e1      	bmi.n	8008840 <_fflush_r+0xc>
 800887c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800887e:	f7fe fc83 	bl	8007188 <__retarget_lock_release_recursive>
 8008882:	e7dd      	b.n	8008840 <_fflush_r+0xc>

08008884 <_sbrk_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d06      	ldr	r5, [pc, #24]	@ (80088a0 <_sbrk_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	f7f9 fab6 	bl	8001e00 <_sbrk>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_sbrk_r+0x1a>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_sbrk_r+0x1a>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	200007c4 	.word	0x200007c4

080088a4 <memcpy>:
 80088a4:	440a      	add	r2, r1
 80088a6:	4291      	cmp	r1, r2
 80088a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ac:	d100      	bne.n	80088b0 <memcpy+0xc>
 80088ae:	4770      	bx	lr
 80088b0:	b510      	push	{r4, lr}
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ba:	4291      	cmp	r1, r2
 80088bc:	d1f9      	bne.n	80088b2 <memcpy+0xe>
 80088be:	bd10      	pop	{r4, pc}

080088c0 <__assert_func>:
 80088c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088c2:	4614      	mov	r4, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <__assert_func+0x2c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4605      	mov	r5, r0
 80088cc:	68d8      	ldr	r0, [r3, #12]
 80088ce:	b954      	cbnz	r4, 80088e6 <__assert_func+0x26>
 80088d0:	4b07      	ldr	r3, [pc, #28]	@ (80088f0 <__assert_func+0x30>)
 80088d2:	461c      	mov	r4, r3
 80088d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088d8:	9100      	str	r1, [sp, #0]
 80088da:	462b      	mov	r3, r5
 80088dc:	4905      	ldr	r1, [pc, #20]	@ (80088f4 <__assert_func+0x34>)
 80088de:	f000 f841 	bl	8008964 <fiprintf>
 80088e2:	f000 f851 	bl	8008988 <abort>
 80088e6:	4b04      	ldr	r3, [pc, #16]	@ (80088f8 <__assert_func+0x38>)
 80088e8:	e7f4      	b.n	80088d4 <__assert_func+0x14>
 80088ea:	bf00      	nop
 80088ec:	20000084 	.word	0x20000084
 80088f0:	0800b7fd 	.word	0x0800b7fd
 80088f4:	0800b7cf 	.word	0x0800b7cf
 80088f8:	0800b7c2 	.word	0x0800b7c2

080088fc <_calloc_r>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	fba1 5402 	umull	r5, r4, r1, r2
 8008902:	b93c      	cbnz	r4, 8008914 <_calloc_r+0x18>
 8008904:	4629      	mov	r1, r5
 8008906:	f7ff fb03 	bl	8007f10 <_malloc_r>
 800890a:	4606      	mov	r6, r0
 800890c:	b928      	cbnz	r0, 800891a <_calloc_r+0x1e>
 800890e:	2600      	movs	r6, #0
 8008910:	4630      	mov	r0, r6
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	220c      	movs	r2, #12
 8008916:	6002      	str	r2, [r0, #0]
 8008918:	e7f9      	b.n	800890e <_calloc_r+0x12>
 800891a:	462a      	mov	r2, r5
 800891c:	4621      	mov	r1, r4
 800891e:	f7fe fbb4 	bl	800708a <memset>
 8008922:	e7f5      	b.n	8008910 <_calloc_r+0x14>

08008924 <__ascii_mbtowc>:
 8008924:	b082      	sub	sp, #8
 8008926:	b901      	cbnz	r1, 800892a <__ascii_mbtowc+0x6>
 8008928:	a901      	add	r1, sp, #4
 800892a:	b142      	cbz	r2, 800893e <__ascii_mbtowc+0x1a>
 800892c:	b14b      	cbz	r3, 8008942 <__ascii_mbtowc+0x1e>
 800892e:	7813      	ldrb	r3, [r2, #0]
 8008930:	600b      	str	r3, [r1, #0]
 8008932:	7812      	ldrb	r2, [r2, #0]
 8008934:	1e10      	subs	r0, r2, #0
 8008936:	bf18      	it	ne
 8008938:	2001      	movne	r0, #1
 800893a:	b002      	add	sp, #8
 800893c:	4770      	bx	lr
 800893e:	4610      	mov	r0, r2
 8008940:	e7fb      	b.n	800893a <__ascii_mbtowc+0x16>
 8008942:	f06f 0001 	mvn.w	r0, #1
 8008946:	e7f8      	b.n	800893a <__ascii_mbtowc+0x16>

08008948 <__ascii_wctomb>:
 8008948:	4603      	mov	r3, r0
 800894a:	4608      	mov	r0, r1
 800894c:	b141      	cbz	r1, 8008960 <__ascii_wctomb+0x18>
 800894e:	2aff      	cmp	r2, #255	@ 0xff
 8008950:	d904      	bls.n	800895c <__ascii_wctomb+0x14>
 8008952:	228a      	movs	r2, #138	@ 0x8a
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	f04f 30ff 	mov.w	r0, #4294967295
 800895a:	4770      	bx	lr
 800895c:	700a      	strb	r2, [r1, #0]
 800895e:	2001      	movs	r0, #1
 8008960:	4770      	bx	lr
	...

08008964 <fiprintf>:
 8008964:	b40e      	push	{r1, r2, r3}
 8008966:	b503      	push	{r0, r1, lr}
 8008968:	4601      	mov	r1, r0
 800896a:	ab03      	add	r3, sp, #12
 800896c:	4805      	ldr	r0, [pc, #20]	@ (8008984 <fiprintf+0x20>)
 800896e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008972:	6800      	ldr	r0, [r0, #0]
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	f000 f837 	bl	80089e8 <_vfiprintf_r>
 800897a:	b002      	add	sp, #8
 800897c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008980:	b003      	add	sp, #12
 8008982:	4770      	bx	lr
 8008984:	20000084 	.word	0x20000084

08008988 <abort>:
 8008988:	b508      	push	{r3, lr}
 800898a:	2006      	movs	r0, #6
 800898c:	f000 fa00 	bl	8008d90 <raise>
 8008990:	2001      	movs	r0, #1
 8008992:	f7f9 f9bc 	bl	8001d0e <_exit>

08008996 <__sfputc_r>:
 8008996:	6893      	ldr	r3, [r2, #8]
 8008998:	3b01      	subs	r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	b410      	push	{r4}
 800899e:	6093      	str	r3, [r2, #8]
 80089a0:	da08      	bge.n	80089b4 <__sfputc_r+0x1e>
 80089a2:	6994      	ldr	r4, [r2, #24]
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	db01      	blt.n	80089ac <__sfputc_r+0x16>
 80089a8:	290a      	cmp	r1, #10
 80089aa:	d103      	bne.n	80089b4 <__sfputc_r+0x1e>
 80089ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b0:	f000 b932 	b.w	8008c18 <__swbuf_r>
 80089b4:	6813      	ldr	r3, [r2, #0]
 80089b6:	1c58      	adds	r0, r3, #1
 80089b8:	6010      	str	r0, [r2, #0]
 80089ba:	7019      	strb	r1, [r3, #0]
 80089bc:	4608      	mov	r0, r1
 80089be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <__sfputs_r>:
 80089c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c6:	4606      	mov	r6, r0
 80089c8:	460f      	mov	r7, r1
 80089ca:	4614      	mov	r4, r2
 80089cc:	18d5      	adds	r5, r2, r3
 80089ce:	42ac      	cmp	r4, r5
 80089d0:	d101      	bne.n	80089d6 <__sfputs_r+0x12>
 80089d2:	2000      	movs	r0, #0
 80089d4:	e007      	b.n	80089e6 <__sfputs_r+0x22>
 80089d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089da:	463a      	mov	r2, r7
 80089dc:	4630      	mov	r0, r6
 80089de:	f7ff ffda 	bl	8008996 <__sfputc_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d1f3      	bne.n	80089ce <__sfputs_r+0xa>
 80089e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089e8 <_vfiprintf_r>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	460d      	mov	r5, r1
 80089ee:	b09d      	sub	sp, #116	@ 0x74
 80089f0:	4614      	mov	r4, r2
 80089f2:	4698      	mov	r8, r3
 80089f4:	4606      	mov	r6, r0
 80089f6:	b118      	cbz	r0, 8008a00 <_vfiprintf_r+0x18>
 80089f8:	6a03      	ldr	r3, [r0, #32]
 80089fa:	b90b      	cbnz	r3, 8008a00 <_vfiprintf_r+0x18>
 80089fc:	f7fe facc 	bl	8006f98 <__sinit>
 8008a00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a02:	07d9      	lsls	r1, r3, #31
 8008a04:	d405      	bmi.n	8008a12 <_vfiprintf_r+0x2a>
 8008a06:	89ab      	ldrh	r3, [r5, #12]
 8008a08:	059a      	lsls	r2, r3, #22
 8008a0a:	d402      	bmi.n	8008a12 <_vfiprintf_r+0x2a>
 8008a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a0e:	f7fe fbba 	bl	8007186 <__retarget_lock_acquire_recursive>
 8008a12:	89ab      	ldrh	r3, [r5, #12]
 8008a14:	071b      	lsls	r3, r3, #28
 8008a16:	d501      	bpl.n	8008a1c <_vfiprintf_r+0x34>
 8008a18:	692b      	ldr	r3, [r5, #16]
 8008a1a:	b99b      	cbnz	r3, 8008a44 <_vfiprintf_r+0x5c>
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f000 f938 	bl	8008c94 <__swsetup_r>
 8008a24:	b170      	cbz	r0, 8008a44 <_vfiprintf_r+0x5c>
 8008a26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a28:	07dc      	lsls	r4, r3, #31
 8008a2a:	d504      	bpl.n	8008a36 <_vfiprintf_r+0x4e>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	b01d      	add	sp, #116	@ 0x74
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	89ab      	ldrh	r3, [r5, #12]
 8008a38:	0598      	lsls	r0, r3, #22
 8008a3a:	d4f7      	bmi.n	8008a2c <_vfiprintf_r+0x44>
 8008a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a3e:	f7fe fba3 	bl	8007188 <__retarget_lock_release_recursive>
 8008a42:	e7f3      	b.n	8008a2c <_vfiprintf_r+0x44>
 8008a44:	2300      	movs	r3, #0
 8008a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a48:	2320      	movs	r3, #32
 8008a4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a52:	2330      	movs	r3, #48	@ 0x30
 8008a54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c04 <_vfiprintf_r+0x21c>
 8008a58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a5c:	f04f 0901 	mov.w	r9, #1
 8008a60:	4623      	mov	r3, r4
 8008a62:	469a      	mov	sl, r3
 8008a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a68:	b10a      	cbz	r2, 8008a6e <_vfiprintf_r+0x86>
 8008a6a:	2a25      	cmp	r2, #37	@ 0x25
 8008a6c:	d1f9      	bne.n	8008a62 <_vfiprintf_r+0x7a>
 8008a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a72:	d00b      	beq.n	8008a8c <_vfiprintf_r+0xa4>
 8008a74:	465b      	mov	r3, fp
 8008a76:	4622      	mov	r2, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ffa2 	bl	80089c4 <__sfputs_r>
 8008a80:	3001      	adds	r0, #1
 8008a82:	f000 80a7 	beq.w	8008bd4 <_vfiprintf_r+0x1ec>
 8008a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a88:	445a      	add	r2, fp
 8008a8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 809f 	beq.w	8008bd4 <_vfiprintf_r+0x1ec>
 8008a96:	2300      	movs	r3, #0
 8008a98:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aa0:	f10a 0a01 	add.w	sl, sl, #1
 8008aa4:	9304      	str	r3, [sp, #16]
 8008aa6:	9307      	str	r3, [sp, #28]
 8008aa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008aac:	931a      	str	r3, [sp, #104]	@ 0x68
 8008aae:	4654      	mov	r4, sl
 8008ab0:	2205      	movs	r2, #5
 8008ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab6:	4853      	ldr	r0, [pc, #332]	@ (8008c04 <_vfiprintf_r+0x21c>)
 8008ab8:	f7f7 fb9a 	bl	80001f0 <memchr>
 8008abc:	9a04      	ldr	r2, [sp, #16]
 8008abe:	b9d8      	cbnz	r0, 8008af8 <_vfiprintf_r+0x110>
 8008ac0:	06d1      	lsls	r1, r2, #27
 8008ac2:	bf44      	itt	mi
 8008ac4:	2320      	movmi	r3, #32
 8008ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aca:	0713      	lsls	r3, r2, #28
 8008acc:	bf44      	itt	mi
 8008ace:	232b      	movmi	r3, #43	@ 0x2b
 8008ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ada:	d015      	beq.n	8008b08 <_vfiprintf_r+0x120>
 8008adc:	9a07      	ldr	r2, [sp, #28]
 8008ade:	4654      	mov	r4, sl
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	f04f 0c0a 	mov.w	ip, #10
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aec:	3b30      	subs	r3, #48	@ 0x30
 8008aee:	2b09      	cmp	r3, #9
 8008af0:	d94b      	bls.n	8008b8a <_vfiprintf_r+0x1a2>
 8008af2:	b1b0      	cbz	r0, 8008b22 <_vfiprintf_r+0x13a>
 8008af4:	9207      	str	r2, [sp, #28]
 8008af6:	e014      	b.n	8008b22 <_vfiprintf_r+0x13a>
 8008af8:	eba0 0308 	sub.w	r3, r0, r8
 8008afc:	fa09 f303 	lsl.w	r3, r9, r3
 8008b00:	4313      	orrs	r3, r2
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	46a2      	mov	sl, r4
 8008b06:	e7d2      	b.n	8008aae <_vfiprintf_r+0xc6>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	1d19      	adds	r1, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	9103      	str	r1, [sp, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfbb      	ittet	lt
 8008b14:	425b      	neglt	r3, r3
 8008b16:	f042 0202 	orrlt.w	r2, r2, #2
 8008b1a:	9307      	strge	r3, [sp, #28]
 8008b1c:	9307      	strlt	r3, [sp, #28]
 8008b1e:	bfb8      	it	lt
 8008b20:	9204      	strlt	r2, [sp, #16]
 8008b22:	7823      	ldrb	r3, [r4, #0]
 8008b24:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b26:	d10a      	bne.n	8008b3e <_vfiprintf_r+0x156>
 8008b28:	7863      	ldrb	r3, [r4, #1]
 8008b2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b2c:	d132      	bne.n	8008b94 <_vfiprintf_r+0x1ac>
 8008b2e:	9b03      	ldr	r3, [sp, #12]
 8008b30:	1d1a      	adds	r2, r3, #4
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	9203      	str	r2, [sp, #12]
 8008b36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b3a:	3402      	adds	r4, #2
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c14 <_vfiprintf_r+0x22c>
 8008b42:	7821      	ldrb	r1, [r4, #0]
 8008b44:	2203      	movs	r2, #3
 8008b46:	4650      	mov	r0, sl
 8008b48:	f7f7 fb52 	bl	80001f0 <memchr>
 8008b4c:	b138      	cbz	r0, 8008b5e <_vfiprintf_r+0x176>
 8008b4e:	9b04      	ldr	r3, [sp, #16]
 8008b50:	eba0 000a 	sub.w	r0, r0, sl
 8008b54:	2240      	movs	r2, #64	@ 0x40
 8008b56:	4082      	lsls	r2, r0
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	3401      	adds	r4, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b62:	4829      	ldr	r0, [pc, #164]	@ (8008c08 <_vfiprintf_r+0x220>)
 8008b64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b68:	2206      	movs	r2, #6
 8008b6a:	f7f7 fb41 	bl	80001f0 <memchr>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d03f      	beq.n	8008bf2 <_vfiprintf_r+0x20a>
 8008b72:	4b26      	ldr	r3, [pc, #152]	@ (8008c0c <_vfiprintf_r+0x224>)
 8008b74:	bb1b      	cbnz	r3, 8008bbe <_vfiprintf_r+0x1d6>
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	3307      	adds	r3, #7
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	3308      	adds	r3, #8
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b84:	443b      	add	r3, r7
 8008b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b88:	e76a      	b.n	8008a60 <_vfiprintf_r+0x78>
 8008b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b8e:	460c      	mov	r4, r1
 8008b90:	2001      	movs	r0, #1
 8008b92:	e7a8      	b.n	8008ae6 <_vfiprintf_r+0xfe>
 8008b94:	2300      	movs	r3, #0
 8008b96:	3401      	adds	r4, #1
 8008b98:	9305      	str	r3, [sp, #20]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f04f 0c0a 	mov.w	ip, #10
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ba6:	3a30      	subs	r2, #48	@ 0x30
 8008ba8:	2a09      	cmp	r2, #9
 8008baa:	d903      	bls.n	8008bb4 <_vfiprintf_r+0x1cc>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0c6      	beq.n	8008b3e <_vfiprintf_r+0x156>
 8008bb0:	9105      	str	r1, [sp, #20]
 8008bb2:	e7c4      	b.n	8008b3e <_vfiprintf_r+0x156>
 8008bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bb8:	4604      	mov	r4, r0
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e7f0      	b.n	8008ba0 <_vfiprintf_r+0x1b8>
 8008bbe:	ab03      	add	r3, sp, #12
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	462a      	mov	r2, r5
 8008bc4:	4b12      	ldr	r3, [pc, #72]	@ (8008c10 <_vfiprintf_r+0x228>)
 8008bc6:	a904      	add	r1, sp, #16
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f7fd fda1 	bl	8006710 <_printf_float>
 8008bce:	4607      	mov	r7, r0
 8008bd0:	1c78      	adds	r0, r7, #1
 8008bd2:	d1d6      	bne.n	8008b82 <_vfiprintf_r+0x19a>
 8008bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bd6:	07d9      	lsls	r1, r3, #31
 8008bd8:	d405      	bmi.n	8008be6 <_vfiprintf_r+0x1fe>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	059a      	lsls	r2, r3, #22
 8008bde:	d402      	bmi.n	8008be6 <_vfiprintf_r+0x1fe>
 8008be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008be2:	f7fe fad1 	bl	8007188 <__retarget_lock_release_recursive>
 8008be6:	89ab      	ldrh	r3, [r5, #12]
 8008be8:	065b      	lsls	r3, r3, #25
 8008bea:	f53f af1f 	bmi.w	8008a2c <_vfiprintf_r+0x44>
 8008bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bf0:	e71e      	b.n	8008a30 <_vfiprintf_r+0x48>
 8008bf2:	ab03      	add	r3, sp, #12
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	462a      	mov	r2, r5
 8008bf8:	4b05      	ldr	r3, [pc, #20]	@ (8008c10 <_vfiprintf_r+0x228>)
 8008bfa:	a904      	add	r1, sp, #16
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7fe f81f 	bl	8006c40 <_printf_i>
 8008c02:	e7e4      	b.n	8008bce <_vfiprintf_r+0x1e6>
 8008c04:	0800b8ff 	.word	0x0800b8ff
 8008c08:	0800b909 	.word	0x0800b909
 8008c0c:	08006711 	.word	0x08006711
 8008c10:	080089c5 	.word	0x080089c5
 8008c14:	0800b905 	.word	0x0800b905

08008c18 <__swbuf_r>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	460e      	mov	r6, r1
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	4605      	mov	r5, r0
 8008c20:	b118      	cbz	r0, 8008c2a <__swbuf_r+0x12>
 8008c22:	6a03      	ldr	r3, [r0, #32]
 8008c24:	b90b      	cbnz	r3, 8008c2a <__swbuf_r+0x12>
 8008c26:	f7fe f9b7 	bl	8006f98 <__sinit>
 8008c2a:	69a3      	ldr	r3, [r4, #24]
 8008c2c:	60a3      	str	r3, [r4, #8]
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	071a      	lsls	r2, r3, #28
 8008c32:	d501      	bpl.n	8008c38 <__swbuf_r+0x20>
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	b943      	cbnz	r3, 8008c4a <__swbuf_r+0x32>
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f000 f82a 	bl	8008c94 <__swsetup_r>
 8008c40:	b118      	cbz	r0, 8008c4a <__swbuf_r+0x32>
 8008c42:	f04f 37ff 	mov.w	r7, #4294967295
 8008c46:	4638      	mov	r0, r7
 8008c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	6922      	ldr	r2, [r4, #16]
 8008c4e:	1a98      	subs	r0, r3, r2
 8008c50:	6963      	ldr	r3, [r4, #20]
 8008c52:	b2f6      	uxtb	r6, r6
 8008c54:	4283      	cmp	r3, r0
 8008c56:	4637      	mov	r7, r6
 8008c58:	dc05      	bgt.n	8008c66 <__swbuf_r+0x4e>
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f7ff fde9 	bl	8008834 <_fflush_r>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d1ed      	bne.n	8008c42 <__swbuf_r+0x2a>
 8008c66:	68a3      	ldr	r3, [r4, #8]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	60a3      	str	r3, [r4, #8]
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	6022      	str	r2, [r4, #0]
 8008c72:	701e      	strb	r6, [r3, #0]
 8008c74:	6962      	ldr	r2, [r4, #20]
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d004      	beq.n	8008c86 <__swbuf_r+0x6e>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	07db      	lsls	r3, r3, #31
 8008c80:	d5e1      	bpl.n	8008c46 <__swbuf_r+0x2e>
 8008c82:	2e0a      	cmp	r6, #10
 8008c84:	d1df      	bne.n	8008c46 <__swbuf_r+0x2e>
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f7ff fdd3 	bl	8008834 <_fflush_r>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d0d9      	beq.n	8008c46 <__swbuf_r+0x2e>
 8008c92:	e7d6      	b.n	8008c42 <__swbuf_r+0x2a>

08008c94 <__swsetup_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4b29      	ldr	r3, [pc, #164]	@ (8008d3c <__swsetup_r+0xa8>)
 8008c98:	4605      	mov	r5, r0
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	b118      	cbz	r0, 8008ca8 <__swsetup_r+0x14>
 8008ca0:	6a03      	ldr	r3, [r0, #32]
 8008ca2:	b90b      	cbnz	r3, 8008ca8 <__swsetup_r+0x14>
 8008ca4:	f7fe f978 	bl	8006f98 <__sinit>
 8008ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cac:	0719      	lsls	r1, r3, #28
 8008cae:	d422      	bmi.n	8008cf6 <__swsetup_r+0x62>
 8008cb0:	06da      	lsls	r2, r3, #27
 8008cb2:	d407      	bmi.n	8008cc4 <__swsetup_r+0x30>
 8008cb4:	2209      	movs	r2, #9
 8008cb6:	602a      	str	r2, [r5, #0]
 8008cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc2:	e033      	b.n	8008d2c <__swsetup_r+0x98>
 8008cc4:	0758      	lsls	r0, r3, #29
 8008cc6:	d512      	bpl.n	8008cee <__swsetup_r+0x5a>
 8008cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cca:	b141      	cbz	r1, 8008cde <__swsetup_r+0x4a>
 8008ccc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	d002      	beq.n	8008cda <__swsetup_r+0x46>
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f7ff f8a7 	bl	8007e28 <_free_r>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	6063      	str	r3, [r4, #4]
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f043 0308 	orr.w	r3, r3, #8
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	b94b      	cbnz	r3, 8008d0e <__swsetup_r+0x7a>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d04:	d003      	beq.n	8008d0e <__swsetup_r+0x7a>
 8008d06:	4621      	mov	r1, r4
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 f883 	bl	8008e14 <__smakebuf_r>
 8008d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d12:	f013 0201 	ands.w	r2, r3, #1
 8008d16:	d00a      	beq.n	8008d2e <__swsetup_r+0x9a>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	60a2      	str	r2, [r4, #8]
 8008d1c:	6962      	ldr	r2, [r4, #20]
 8008d1e:	4252      	negs	r2, r2
 8008d20:	61a2      	str	r2, [r4, #24]
 8008d22:	6922      	ldr	r2, [r4, #16]
 8008d24:	b942      	cbnz	r2, 8008d38 <__swsetup_r+0xa4>
 8008d26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d2a:	d1c5      	bne.n	8008cb8 <__swsetup_r+0x24>
 8008d2c:	bd38      	pop	{r3, r4, r5, pc}
 8008d2e:	0799      	lsls	r1, r3, #30
 8008d30:	bf58      	it	pl
 8008d32:	6962      	ldrpl	r2, [r4, #20]
 8008d34:	60a2      	str	r2, [r4, #8]
 8008d36:	e7f4      	b.n	8008d22 <__swsetup_r+0x8e>
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e7f7      	b.n	8008d2c <__swsetup_r+0x98>
 8008d3c:	20000084 	.word	0x20000084

08008d40 <_raise_r>:
 8008d40:	291f      	cmp	r1, #31
 8008d42:	b538      	push	{r3, r4, r5, lr}
 8008d44:	4605      	mov	r5, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	d904      	bls.n	8008d54 <_raise_r+0x14>
 8008d4a:	2316      	movs	r3, #22
 8008d4c:	6003      	str	r3, [r0, #0]
 8008d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d56:	b112      	cbz	r2, 8008d5e <_raise_r+0x1e>
 8008d58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d5c:	b94b      	cbnz	r3, 8008d72 <_raise_r+0x32>
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f000 f830 	bl	8008dc4 <_getpid_r>
 8008d64:	4622      	mov	r2, r4
 8008d66:	4601      	mov	r1, r0
 8008d68:	4628      	mov	r0, r5
 8008d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d6e:	f000 b817 	b.w	8008da0 <_kill_r>
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d00a      	beq.n	8008d8c <_raise_r+0x4c>
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	d103      	bne.n	8008d82 <_raise_r+0x42>
 8008d7a:	2316      	movs	r3, #22
 8008d7c:	6003      	str	r3, [r0, #0]
 8008d7e:	2001      	movs	r0, #1
 8008d80:	e7e7      	b.n	8008d52 <_raise_r+0x12>
 8008d82:	2100      	movs	r1, #0
 8008d84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4798      	blx	r3
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	e7e0      	b.n	8008d52 <_raise_r+0x12>

08008d90 <raise>:
 8008d90:	4b02      	ldr	r3, [pc, #8]	@ (8008d9c <raise+0xc>)
 8008d92:	4601      	mov	r1, r0
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	f7ff bfd3 	b.w	8008d40 <_raise_r>
 8008d9a:	bf00      	nop
 8008d9c:	20000084 	.word	0x20000084

08008da0 <_kill_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d07      	ldr	r5, [pc, #28]	@ (8008dc0 <_kill_r+0x20>)
 8008da4:	2300      	movs	r3, #0
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	4611      	mov	r1, r2
 8008dac:	602b      	str	r3, [r5, #0]
 8008dae:	f7f8 ff9e 	bl	8001cee <_kill>
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	d102      	bne.n	8008dbc <_kill_r+0x1c>
 8008db6:	682b      	ldr	r3, [r5, #0]
 8008db8:	b103      	cbz	r3, 8008dbc <_kill_r+0x1c>
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	bd38      	pop	{r3, r4, r5, pc}
 8008dbe:	bf00      	nop
 8008dc0:	200007c4 	.word	0x200007c4

08008dc4 <_getpid_r>:
 8008dc4:	f7f8 bf8b 	b.w	8001cde <_getpid>

08008dc8 <__swhatbuf_r>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	460c      	mov	r4, r1
 8008dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd0:	2900      	cmp	r1, #0
 8008dd2:	b096      	sub	sp, #88	@ 0x58
 8008dd4:	4615      	mov	r5, r2
 8008dd6:	461e      	mov	r6, r3
 8008dd8:	da0d      	bge.n	8008df6 <__swhatbuf_r+0x2e>
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008de0:	f04f 0100 	mov.w	r1, #0
 8008de4:	bf14      	ite	ne
 8008de6:	2340      	movne	r3, #64	@ 0x40
 8008de8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008dec:	2000      	movs	r0, #0
 8008dee:	6031      	str	r1, [r6, #0]
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	b016      	add	sp, #88	@ 0x58
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	466a      	mov	r2, sp
 8008df8:	f000 f848 	bl	8008e8c <_fstat_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	dbec      	blt.n	8008dda <__swhatbuf_r+0x12>
 8008e00:	9901      	ldr	r1, [sp, #4]
 8008e02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e0a:	4259      	negs	r1, r3
 8008e0c:	4159      	adcs	r1, r3
 8008e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e12:	e7eb      	b.n	8008dec <__swhatbuf_r+0x24>

08008e14 <__smakebuf_r>:
 8008e14:	898b      	ldrh	r3, [r1, #12]
 8008e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e18:	079d      	lsls	r5, r3, #30
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	d507      	bpl.n	8008e30 <__smakebuf_r+0x1c>
 8008e20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	6123      	str	r3, [r4, #16]
 8008e28:	2301      	movs	r3, #1
 8008e2a:	6163      	str	r3, [r4, #20]
 8008e2c:	b003      	add	sp, #12
 8008e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e30:	ab01      	add	r3, sp, #4
 8008e32:	466a      	mov	r2, sp
 8008e34:	f7ff ffc8 	bl	8008dc8 <__swhatbuf_r>
 8008e38:	9f00      	ldr	r7, [sp, #0]
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7ff f866 	bl	8007f10 <_malloc_r>
 8008e44:	b948      	cbnz	r0, 8008e5a <__smakebuf_r+0x46>
 8008e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4a:	059a      	lsls	r2, r3, #22
 8008e4c:	d4ee      	bmi.n	8008e2c <__smakebuf_r+0x18>
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	f043 0302 	orr.w	r3, r3, #2
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	e7e2      	b.n	8008e20 <__smakebuf_r+0xc>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	6020      	str	r0, [r4, #0]
 8008e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	9b01      	ldr	r3, [sp, #4]
 8008e66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e6a:	b15b      	cbz	r3, 8008e84 <__smakebuf_r+0x70>
 8008e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e70:	4630      	mov	r0, r6
 8008e72:	f000 f81d 	bl	8008eb0 <_isatty_r>
 8008e76:	b128      	cbz	r0, 8008e84 <__smakebuf_r+0x70>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f023 0303 	bic.w	r3, r3, #3
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	431d      	orrs	r5, r3
 8008e88:	81a5      	strh	r5, [r4, #12]
 8008e8a:	e7cf      	b.n	8008e2c <__smakebuf_r+0x18>

08008e8c <_fstat_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d07      	ldr	r5, [pc, #28]	@ (8008eac <_fstat_r+0x20>)
 8008e90:	2300      	movs	r3, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4608      	mov	r0, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	f7f8 ff88 	bl	8001dae <_fstat>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d102      	bne.n	8008ea8 <_fstat_r+0x1c>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	b103      	cbz	r3, 8008ea8 <_fstat_r+0x1c>
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	bf00      	nop
 8008eac:	200007c4 	.word	0x200007c4

08008eb0 <_isatty_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	@ (8008ecc <_isatty_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7f8 ff87 	bl	8001dce <_isatty>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_isatty_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_isatty_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	200007c4 	.word	0x200007c4

08008ed0 <_init>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	bf00      	nop
 8008ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed6:	bc08      	pop	{r3}
 8008ed8:	469e      	mov	lr, r3
 8008eda:	4770      	bx	lr

08008edc <_fini>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr
